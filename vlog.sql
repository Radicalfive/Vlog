/*
 Navicat Premium Data Transfer

 Source Server         : localhost_3306
 Source Server Type    : MySQL
 Source Server Version : 80026
 Source Host           : localhost:3306
 Source Schema         : vlog

 Target Server Type    : MySQL
 Target Server Version : 80026
 File Encoding         : 65001

 Date: 11/05/2022 16:34:50
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for t_article
-- ----------------------------
DROP TABLE IF EXISTS `t_article`;
CREATE TABLE `t_article`  (
  `id` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT 'id',
  `category` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '分类名称',
  `user_id` int NULL DEFAULT NULL COMMENT '用户id',
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标题',
  `cover` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '封面图',
  `summary` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '摘要',
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL COMMENT '内容',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  `total_words` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '总字数',
  `duration` int NULL DEFAULT NULL COMMENT '阅读时长',
  `page_view` int NULL DEFAULT NULL COMMENT '浏览次数',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article
-- ----------------------------
INSERT INTO `t_article` VALUES ('0132bf0cf01f43599d1c1e028ebe940a', '编程算法', 19, '【每日算法Day 70】图解算法：小学生都会的数块数问题，你会吗？', 'https://picsum.photos/1920/1080?random&rand=0.943790135426497', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 959. 由斜杠划分区域 题目描述在由 1 x 1 方格组成的 N x N 网格 grid 中，每个 1 x 1 方块由 /、\\ 或空格构成。这些字符会将方块', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/regions-cut-by-slashes/\" title=\"LeetCode 959. 由斜杠划分区域\" target=\"_blank\" rel=\"noopener\">LeetCode 959. 由斜杠划分区域</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在由 1 x 1 方格组成的 N x N 网格 grid 中，每个 1 x 1 方块由 /、\\ 或空格构成。这些字符会将方块划分为一些共边的区域。</p> \n<p>（请注意，反斜杠字符是转义的，因此 \\ 用 “\\\\” 表示。）。</p> \n<p>返回区域的数目。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  \" /\",\n  \"/ \"\n]\n输出：\n2\n解释：\n2x2 网格如下：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><img src=\"1.png\" alt></p> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  \" /\",\n  \"  \"\n]\n输出：\n1\n解释：\n2x2 网格如下：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><img src=\"2.png\" alt></p> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  \"\\\\/\",\n  \"/\\\\\"\n]\n输出：\n4\n解释：\n（回想一下，因为 \\ 字符是转义的，所以 \"\\\\/\" 表示 \\/，而 \"/\\\\\" 表示 /\\。）\n2x2 网格如下：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><img src=\"3.png\" alt></p> \n<p><strong>示例4</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  \"/\\\\\",\n  \"\\\\/\"\n]\n输出：\n5\n解释：\n（回想一下，因为 \\ 字符是转义的，所以 \"/\\\\\" 表示 /\\，而 \"\\\\/\" 表示 \\/。）\n2x2 网格如下：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><img src=\"4.png\" alt></p> \n<p><strong>示例5</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  \"//\",\n  \"/ \"\n]\n输出：\n3\n解释：\n2x2 网格如下：<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><img src=\"5.png\" alt></p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题如果不用写代码，直接让你数的话，那就非常简单了。但是要想实现代码，还是有点麻烦的。</p> \n<p>最主要的麻烦点在于，如果表示出斜杠的划分？这里我提供了三种不同的方法。</p> \n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法 1\"></a>方法 1</h3>\n<p><img src=\"6.jpg\" alt><br>如上图所示，首先将每个格子划分成 3 x 3 的更小的网格，然后对角线上填充 1 来表示斜杠，其余地方全部填充 0 。</p> \n<p>那么问题就转化为了求一个 3N x 3N 的网格上的 0 的连通块一共有几块，这就用普通的 dfs 搜一遍就知道了。</p> \n<p>那么这里有个问题，为什么不能每个格子划分成 2 x 2 呢？如下图所示，这样会导致两个格子中的 0 无法只用上下左右四个方向来联通：<br><img src=\"9.jpg\" alt></p> \n<h3 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法 2\"></a>方法 2</h3>\n<p><img src=\"7.jpg\" alt><br>如上图所示，这种方法采用了并查集的思想。</p> \n<p>首先将一个格子用 X 划分成四块，上图左半部分是各自之间的连通性，两个格子的相邻部分是一定连通的。</p> \n<p>而右半部分是格子内部的连通性。如果有斜杠，那就将斜杠两边的两小块都连起来。如果没有斜杠，那就将四小块都连起来，而这只需要三条线就够了。</p> \n<h3 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法 3\"></a>方法 3</h3>\n<p><img src=\"8.jpg\" alt><br>如上图所示，这个方法还是采用了并查集的思想。这次我们不以格子为计算单元了，我们来看格点。</p> \n<p>初始的时候，四周一圈的格点都是连通的（红色线），而内部的格点都是孤立的。这时候只有一个区域，也就是整个平面。</p> \n<p>然后一个格子一个格子添加斜杠。首先添加绿色斜杠，也就是连接 0 和 5 格点，这时候发现这两个点不在一个连通块里，那么就没有产生区域。</p> \n<p>然后添加蓝色斜杠，也就是连接 2 和 5 格点，这时候发现这两个点在同一个连通块里，那么就产生了一个新的区域（也就是灰色部分）。</p> \n<p>这样遍历完所有斜杠，就能知道增加了几块新的区域了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"方法-1（c-）\"><a href=\"#方法-1（c-）\" class=\"headerlink\" title=\"方法 1（c++）\"></a>方法 1（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> nx <span class=\"token operator\">&amp;&amp;</span> nx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ny <span class=\"token operator\">&amp;&amp;</span> ny <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">regionsBySlashes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">new_grid</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'/\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'\\\\\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    new_grid<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>new_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    new_grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> new_grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法-2（c-）\"><a href=\"#方法-2（c-）\" class=\"headerlink\" title=\"方法 2（c++）\"></a>方法 2（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> f<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> fu <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fv <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fu <span class=\"token operator\">==</span> fv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>fv<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fu<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">regionsBySlashes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>n<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'/\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\' \'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> s<span class=\"token number\">-4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> s<span class=\"token number\">-3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token operator\">*</span>n<span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法-3（c-）\"><a href=\"#方法-3（c-）\" class=\"headerlink\" title=\"方法 3（c++）\"></a>方法 3（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> f<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> fu <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fv <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fu <span class=\"token operator\">==</span> fv<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>fv<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fu<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">regionsBySlashes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        f <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\' \'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'/\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    u <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    u <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n                    v <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-08-29 05:15:07', '8.6k', 11, 5916);
INSERT INTO `t_article` VALUES ('01c55548f23b49c3865cd511c9da90ba', '编程算法', 12, '【每日算法Day 64】LeetCode 861. 翻转矩阵后的得分', 'https://picsum.photos/1920/1080?random&rand=0.2825262513011957', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述有一个二维矩阵 $A$ 其中每个元素的值为 $0$ 或 $1$。 移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 $0$ 都更改为 $1$，将所有 $1$ 都更改为', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>有一个二维矩阵 $A$ 其中每个元素的值为 $0$ 或 $1$。</p> \n<p>移动是指选择任一行或列，并转换该行或列中的每一个值：将所有 $0$ 都更改为 $1$，将所有 $1$ 都更改为 $0$。</p> \n<p>在做出任意次数的移动后，将该矩阵的每一行都按照二进制数来解释，矩阵的得分就是这些数字的总和。</p> \n<p>返回尽可能高的分数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n输出：\n39\n解释：\n转换为 [[1,1,1,1],[1,0,0,1],[1,1,1,1]]\n0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$1 \\le A.length \\le 20$</li> \n <li>$1 \\le A[0].length \\le 20$</li> \n <li>$A[i][j]$ 是 $0$ 或 $1$</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先我们要明确一个显而易见的事实：</p> \n<ul> \n <li>每一行、每一列要么不翻转，要么翻转一次，再多是等价的，没有意义。</li> \n</ul> \n<h3 id=\"二进制枚举\"><a href=\"#二进制枚举\" class=\"headerlink\" title=\"二进制枚举\"></a>二进制枚举</h3>\n<p>因为行列数最多 $20$ ，所以我们可以枚举每一行的翻转状态（$0$：不翻转，$1$：翻转）。</p> \n<p>然后对于每一列，我们只需要看不翻转的 $1$ 多，还是翻转后 $1$ 多就行了。</p> \n<p>这样的时间复杂度是 $O(2^{R}C)$，极限情况下是 $2e^7$ 左右，还是可能会超时的。</p> \n<h3 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h3>\n<p>再仔细观察，我们可以发现要想最终和最大，第一列必须全为 $1$ 。</p> \n<p>证明很简单，对于任意一行，如果它的第一位是 $1$ ，那么这一位的二进制数值就是 $2^{C-1}$ 。反之如果这一位是 $0$ ，那么即使后面所有位全为 $1$ ，总数值也只能达到 $2^{C-1}-1$ 。所以第一位是一定要为 $1$ 的。</p> \n<p>这样就很简单了，每一行的翻转情况其实是确定的。如果第一位是 $1$ ，就不翻转，否则就翻转。</p> \n<p>然后每一列还是看不翻转的 $1$ 多，还是翻转后 $1$ 多。</p> \n<p>这样的时间复杂度只有 $O(RC)$ 。</p> \n<p>那么可能有人会问：为啥不把每行第一位全翻转为 $0$ ，然后翻转第一列使得每行第一位全 $1$ 呢？其实这样是等价的，完全就相当于将之前的方法倒转过来（翻转不翻转操作颠倒）。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">matrixScore</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cnt <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> cnt<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 20:02:55', '5.8k', 2, 7414);
INSERT INTO `t_article` VALUES ('053b0eb56f584a4594ea8a242395db2a', '编程算法', 17, '【每日算法Day 68】脑筋急转弯：只要一行代码，但你会证吗？', 'https://picsum.photos/1920/1080?random&rand=0.8850421516743124', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 1227. 飞机座位分配概率 题目描述有 $n$ 位乘客即将登机，飞机正好有 $n$ 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。 剩下的乘客将会：', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/airplane-seat-assignment-probability/\" title=\"LeetCode 1227. 飞机座位分配概率\" target=\"_blank\" rel=\"noopener\">LeetCode 1227. 飞机座位分配概率</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>有 $n$ 位乘客即将登机，飞机正好有 $n$ 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。</p> \n<p>剩下的乘客将会：</p> \n<ul> \n <li>如果他们自己的座位还空着，就坐到自己的座位上。</li> \n <li>当他们自己的座位被占用时，随机选择其他座位。</li> \n</ul> \n<p>第 $n$ 位乘客坐在自己的座位上的概率是多少？</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 1\n输出：\n1.00000\n解释：\n第一个人只会坐在自己的位置上。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 2\n输出：\n0.50000\n解释：\n在第一个人选好座位坐下后，第二个人坐在自己的座位上的概率是 0.5。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题呢代码相当之简单，但是我看了看题解区能真正理解的也不是很多，很多都是揣着糊涂装明白，稀里糊涂就当证过了。</p> \n<p>首先题目并没有说第一个乘客座位号就是 $1$ 啊？也没说最后一个乘客座位号就是 $n$ 啊？所以大家的假设是怎么来的？这一点没有说清。其实很简单，不管每个乘客编号是多少，我们不用管，我们只要看他入场的次序就行了，所以我们就按照入场次序给他们重新编个号，这样的话就是按照 $1$ 到 $n$ 的编号入场了（也就是这里的编号代表的是入场的次序，而不是实际的座位号）。</p> \n<p>然后就是 $1$ 号进场了，可以分为下面几种情况：</p> \n<ul> \n <li>他有 $\\frac{1}{n}$ 的概率选择坐在 $1$ 号座位上。这样 $2$ 到 $n$ 号位置都不会被占，那么 $n$ 号坐在自己座位的概率就是 $1.0$ 。</li> \n <li>他有 $\\frac{1}{n}$ 的概率选择坐在 $n$ 号座位上。这样 $2$ 到 $n-1$ 号位置都不会被占，而 $n$ 号只能坐在 $1$ 号座位上，那么概率就是 $0.0$ 。</li> \n <li>他有 $\\frac{1}{n}$ 的概率选择坐在 $i$ 号座位上，其中 $2 \\le i \\le n-1$。这样 $2$ 到 $i-1$ 号位置都不会被占，他们都坐在自己的的位置上。而 $i$ 号乘客就犯难了，他的座位被 $1$ 号占了，他不知道坐哪了。这时候，如果他选择坐 $1$ 号座位，那么 $i+1$ 到 $n$ 号乘客还是坐在自己位置，相安无事。而如果他选择坐在 $i+1$ 到 $n$ 号中的某个位置，那么必然又会产生新的冲突，这样就不好求解了啊！</li> \n</ul> \n<p>对于第三种情况，我们可以换个角度看问题。现在面临的问题是，$i$ 号选择坐在哪？这时候还没入场的有 $i$ 到 $n$ 号乘客，而座位还剩 $1$ 和 $i+1$ 到 $n$ 号。那既然 $i$ 号乘客坐在 $1$ 号座位的话，后面的人都能坐回原位，那我们就把 $1$ 号座位当作是 $i$ 号乘客原本的座位就行了嘛，反正我最后又不要求 $i$ 号乘客坐回原位的概率，你坐哪都没事，只要别影响到其他人就行了。那么问题的规模就被缩小到了 $n-i+1$ ，我们递归求解就行了。</p> \n<p>令 $f(n)$ 表示 $n$ 个人的情况下，最后一个人坐回原位的概率，按照上面的分析，我们可以列出递推式：<br>$$<br>f(n) = \\frac{1}{n}\\left(1 + \\sum_{i=2}^{n-1}{f(n-i+1)}\\right)<br>$$<br>这个递推式想必大家高中就会求了，令 $n = n-1$再写出一项：<br>$$<br>f(n-1) = \\frac{1}{n-1}\\left(1 + \\sum_{i=2}^{n-2}{f(n-i)}\\right)<br>$$<br>然后两式相减得到：<br>$$<br>nf(n) - (n-1)f(n-1) = f(n-1)<br>$$<br>即：<br>$$<br>f(n) = f(n-1) = \\cdots = f(2)<br>$$<br>那么我们就可以得到最终的答案了，对任意的 $n \\ge 2$ 都有 $f(n) = f(2) = 0.5$ 。</p> \n<p>还有一个特例就是 $f(1) = 1.0$ ，这样这题就证好了。</p> \n<p>这题最关键的一步就是 $1$ 号坐在了 $i$ 号座位后，$i$ 号何去何从？如果你能换个角度，把 $1$ 号座位给 $i$ 号（因为给他之后，对后面的乘客座位没有任何影响，那么就能把 $1$ 号座位看成就是 $i$ 号乘客的），那么问题就能递归下去了。题解区许多人这一步为什么能递归下去？根本没有讲清楚。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">nthPersonGetsNthSeat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-py\"><code class=\"language-py\">class Solution:\n    def nthPersonGetsNthSeat(self, n: int) -&gt; float:\n        return 1 if n==1 else .5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>', '2020-09-15 05:05:42', '9.7k', 11, 6181);
INSERT INTO `t_article` VALUES ('0564f626722b40e49710d31ac4f32292', '编程算法', 36, '【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！', 'https://picsum.photos/1920/1080?random&rand=0.2054892576234142', '关注公众号【算法码上来】，每日算法干货马上就来！ 竟然甩给我一道算法题做，太可恶了嘤嘤嘤。 题目链接LeetCode 99. 恢复二叉搜索树 题目描述二叉搜索树中的两个节点被错误地交换。 请在不改变其结构的情况下，恢复这棵树。 示', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>竟然甩给我一道算法题做，太可恶了嘤嘤嘤。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/recover-binary-search-tree/\" title=\"LeetCode 99. 恢复二叉搜索树\" target=\"_blank\" rel=\"noopener\">LeetCode 99. 恢复二叉搜索树</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>二叉搜索树中的两个节点被错误地交换。</p> \n<p>请在不改变其结构的情况下，恢复这棵树。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,3,null,null,2]\n   1\n  /\n 3\n  \\\n   2\n输出：\n[3,1,null,null,2]\n   3\n  /\n 1\n  \\\n   2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,1,4,null,null,2]\n  3\n / \\\n1   4\n   /\n  2\n输出：\n[2,1,4,null,null,3]\n  2\n / \\\n1   4\n   /\n  3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>进阶：</strong> </p> \n<ul> \n <li>使用 $O(n)$ 空间复杂度的解法很容易实现。</li> \n <li>你能想出一个只使用常数空间的解决方案吗？</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>先不考虑空间复杂度，因为二叉搜索树的中序遍历是单调递增的，所以我们只需要求出它的中序遍历。然后两个结点被调换过位置，等价于递增序列中两个数调换了位置。那么我们只需要找出序列中第一个逆序对（前一个数）和最后一个逆序对（后一个数）就行了，然后换回它俩的位置。</p> \n<p>但是中序遍历无论使用递归实现还是栈实现，空间复杂度都是树的高度，不是常数。</p> \n<p>想一下为什么我们需要用递归或者栈来实现中序遍历？因为从根结点开始进入左子树之后，遍历完了左子树还需要回到根结点，然后再进入右子树继续遍历。但是如果你没有栈，你就没法从左子树回到根结点了，因为左子树中没有结点能指到根结点。</p> \n<p>我们需要解决的就是这个问题，这里我们引入 <strong>Morris 遍历算法</strong>。</p> \n<p>下图是一个二叉搜索树例子：<br><img src=\"1.jpg\" alt></p> \n<p>我们用递归来做中序遍历，访问结点的顺序是 <code>4212346567</code> （这个序列就是 Morris 遍历得到的序列）。注意到非叶子结点 <code>246</code> 会被访问两次，第一次是作为根结点进入左子树，第二次是递归返回了，中序遍历到自己了。</p> \n<p>那么不用递归或者栈，我们怎么在第二次成功返回根结点呢？注意到叶子结点的左右儿子都是空的，所以可以利用它们来指向根结点。</p> \n<p>用结点 <code>4</code> 举个例子。首先访问 <code>4</code> ，然后遍历它的左子树。左子树的最后一个遍历的结点是 <code>3</code> ，那么我们就把 <code>3</code> 的右儿子指向根结点 <code>4</code> 。这样遍历完左子树之后，还能通过 <code>3</code> 的右儿子回到根结点 <code>4</code> ，接着继续遍历右子树。</p> \n<p>所以在第一次访问根结点时，首先要找出它左子树中最右边的那个叶子结点，把它的右儿子指向根结点。然后才能放心地递归遍历左子树，不用担心回不去啦。</p> \n<p>具体实现的时候还有一些细节，看代码更好理解，我都写在注释里面了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">recoverTree</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        TreeNode <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pre <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>rightmost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果有左子树，就递归遍历左子树。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rightmost <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 找出左子树的最右边一个叶子结点</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">&amp;&amp;</span> rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rightmost <span class=\"token operator\">=</span> rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果左子树最右边的叶子结点的右儿子是空的，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 那就说明根结点是第一次访问，那么就把它的右儿子指向根结点。</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 然后递归遍历左子树。</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 否则的话说明根结点是第二次访问了，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 那就说明左子树已经递归完毕了，</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 那么就判断一下是否存在逆序对。</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 记得把左子树最右叶子结点的右儿子改回空指针。</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 然后递归遍历右子树了。</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val <span class=\"token operator\">&gt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n                        y <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n                    pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果没有左子树，那就直接遍历右子树，同时判断是否存在逆序对。</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&amp;&amp;</span> pre<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val <span class=\"token operator\">&gt;</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n                    y <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                pre <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-21 09:31:00', '9.6k', 2, 1612);
INSERT INTO `t_article` VALUES ('05fadf8f91f9463095f42fe20808be58', '编程算法', 32, '每日算法系列【LeetCode 188】买卖股票的最佳时机 IV', 'https://picsum.photos/1920/1080?random&rand=0.1660536046357235', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。 注意: 你不能同时参与多笔交易（你必', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。</p> \n<p>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,4,1], k = 2\n输出：\n2\n解释：\n在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,6,5,0,3], k = 2\n输出：\n7\n解释：\n在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。\n随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第四题。</p> \n<p>这题是最一般的情况了，也就是最多可以买卖 $k$ 次。那么我们采用动态规划来求解。</p> \n<p>令 $dp0[i][j]$ 为第 $i$ 只股票之前（包含）买卖 $j$ 次（且最后一次操作为<strong>买入</strong>）可以获得的最大利润，$dp1[i][j]$ 为第 $i$ 只股票之前（包含）买卖 $j$ 次（且最后一次操作为<strong>卖出</strong>）可以获得的最大利润。</p> \n<p>那么对于 $dp0[i][j]$ 来说，最后一次操作是买入，所以分为两种情况。</p> \n<ul> \n <li>一种是不买第 $i$ 只股票，那么最大利润就是前 $i-1$ 只股票买卖 $j$ 次（且最后一次操作为买入）的最大利润：<br>$$dp0[i][j] = dp0[i-1][j]$$</li> \n <li>一种是买第 $i$ 只股票，那么最大利润就是前 $i-1$ 只股票买卖 $j-1$ 次（且最后一次操作为卖出）的最大利润：<br>$$dp0[i][j] = dp1[i-1][j-1] - price[i]$$</li> \n</ul> \n<p>而对于 $dp1[i][j]$ 来说，最后一次操作是卖出，所以分为两种情况。</p> \n<ul> \n <li>一种是不卖第 $i$ 只股票，那么最大利润就是前 $i-1$ 只股票买卖 $j$ 次（且最后一次操作为卖出）的最大利润：<br>$$dp1[i][j] = dp1[i-1][j]$$</li> \n <li>一种是卖第 $i$ 只股票，那么最大利润就是前 $i-1$ 只股票买卖 $j$ 次（且最后一次操作为买入）的最大利润：<br>$$dp1[i][j] = dp0[i-1][j] + price[i]$$</li> \n</ul> \n<p>综上转移方程就是：<br>$$<br>\\begin{aligned}<br>dp0[i][j] &amp;= \\max{\\left\\{dp0[i-1][j], dp1[i-1][j-1] - price[i]\\right\\}} \\\\<br>dp1[i][j] &amp;= \\max{\\left\\{dp1[i-1][j], dp0[i-1][j] + price[i]\\right\\}}<br>\\end{aligned}<br>$$</p> \n<p>初始情况就是 $n = 0$ 和 $k = 0$ 时，单独计算一下就行了。</p> \n<p>此外本题还可以优化成一维数组，就不展开介绍了，大家可以参考代码。</p> \n<p>时间复杂度是 $O(nk)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> k <span class=\"token operator\">&gt;=</span> n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> max<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> res\n        dp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        dp1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                dp1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>p<span class=\"token punctuation\">)</span>\n                dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp1<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-07-24 19:42:44', '4.9k', 5, 3813);
INSERT INTO `t_article` VALUES ('0658191832da4d0b99a2df1a3e49a437', '深度学习', 15, '一文速览EMNLP 2020中的Transformer量化论文', 'https://picsum.photos/1920/1080?random&rand=0.42339481965481185', '关注公众号【算法码上来】，每日算法干货马上就来！ 花了几天看了三篇EMNLP 2020中关于Transformer模型量化的相关论文，快速记一下要点。 Fully Quantized Transformer for Machine', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>花了几天看了三篇EMNLP 2020中关于Transformer模型量化的相关论文，快速记一下要点。</p> \n</blockquote> \n<h2 id=\"Fully-Quantized-Transformer-for-Machine-Translation\"><a href=\"#Fully-Quantized-Transformer-for-Machine-Translation\" class=\"headerlink\" title=\"Fully Quantized Transformer for Machine Translation\"></a>Fully Quantized Transformer for Machine Translation</h2>\n<p>这篇是华为诺亚方舟实验室和蒙特利尔大学合作的，发表在findings上面。</p> \n<p><strong>论文地址：</strong><br><a href=\"https://www.aclweb.org/anthology/2020.findings-emnlp.1.pdf\" target=\"_blank\" rel=\"noopener\">https://www.aclweb.org/anthology/2020.findings-emnlp.1.pdf</a></p> \n<p><img src=\"1.png\" alt></p> \n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p>针对Transformer结构的计算密集型算子进行了activation量化，除了bias以外的所有weight进行了量化，这一点其实我们组也都做过了。</p> \n<p>采用的是量化感知训练（QAT），反向传播采用的是straight-through estimator。</p> \n<p>考虑到每个channel的分布有差异，因此针对每个channel单独学习量化的scale参数。</p> \n<p>零值的处理：padding无需考虑，反正会被mask掉。ReLU和attention softmax之后的量化强制定义量化下界为0。量化全部加在dropout之前。</p> \n<p>剪枝采用结构化剪枝，因为稀疏性剪枝需要硬件或库支持，比较麻烦。这里只对FFN参数进行剪枝，而且不是采用传统的百分比阈值，而是根据ReLU之后值计算出第一层FFN输出的每一列的max值，根据max值是否超过一定阈值来剪枝，这个阈值设定为所有列max值的方差乘上一个常数。这里好处就是剪枝的百分比不固定了，每一层动态剪，可多可少。</p> \n<h3 id=\"实验结果\"><a href=\"#实验结果\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3>\n<p><img src=\"2.png\" alt><br>可以看出训练后量化（PTQ）降得还是略多的，而QAT的8位或6位基本没怎么降，4位的话影响就很大了。结果也是符合我们组实践效果的。</p> \n<h3 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>自我感觉这篇没啥创新，不过最后也只是findings，没有中主会。量化位置和一些trick也都是很容易想到的，而每个channel单独量化其实实践下来意义也不大，不加这个trick效果也很好了已经。FFN最后也并没有剪去多少参数。</p> \n<h2 id=\"Extremely-Low-Bit-Transformer-Quantization-for-On-Device-Neural-Machine-Translation\"><a href=\"#Extremely-Low-Bit-Transformer-Quantization-for-On-Device-Neural-Machine-Translation\" class=\"headerlink\" title=\"Extremely Low Bit Transformer Quantization for On-Device Neural Machine Translation\"></a>Extremely Low Bit Transformer Quantization for On-Device Neural Machine Translation</h2>\n<p>这篇是三星做的，也发表在findings上面。</p> \n<p><strong>论文地址：</strong><br><a href=\"https://www.aclweb.org/anthology/2020.findings-emnlp.433.pdf\" target=\"_blank\" rel=\"noopener\">https://www.aclweb.org/anthology/2020.findings-emnlp.433.pdf</a></p> \n<p><img src=\"3.png\" alt></p> \n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p>这篇没有采用比较常用的uniform量化方式（也就是将浮点数区间等比例映射到整数区间），而是采用binary-code，也就是将参数$w$表示成$q$（量化位数）个相同维度的二值向量$b$的线性组合，最后矩阵和向量相乘可以变为：$y = \\sum_{i=1}^{q}{(\\alpha_i \\circ (B_i \\cdot x))}$，具体这里可以怎么加速可以参看三星之前的论文：BiQGEMM: Matrix Multiplication with Lookup Table For Binary-Coding-based Quantized DNNs。</p> \n<p>这篇针对embedding的不同词频采用了不同的量化位数，具体方案可以看下面的伪代码：<br><img src=\"4.png\" alt><br>总之就是词频越高，量化位数越多。而大多数单词词频都很低，1%的单词占据了95%的词频，所以他们位数高一点影响不大。针对每个词向量，采用的是不同的量化参数，这也是考虑到每个词向量的空间分布有差异。</p> \n<p>针对encoder和decoder中的不同类型attention，论文也是采用了不同的量化位数。</p> \n<p>训练策略上，这里finetune阶段每2000步开启一次量化，为了节约训练时间。</p> \n<h3 id=\"实验结果-1\"><a href=\"#实验结果-1\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3>\n<p><img src=\"5.png\" alt><br>可以看出embedding量化影响还是比较大的，特别是量化到2位以下时。而全部采用2位量化效果很差。如果用本文的量化方法，可以看出大部分配置下，损失都在1个点以内，效果还是不错的。</p> \n<h3 id=\"评价-1\"><a href=\"#评价-1\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>这篇采用non-uniform量化方式，实现起来还是更复杂一点的，而且在矩阵相乘的加速优化方面，并没有过多阐述怎么实现。此外没有对比uniform量化和non-uniform量化方式的差距，不清楚性能的提升是non-uniform量化占主导，还是根据词频和不同attention类型采用不同量化位数占了主导。最后人工设计因素过多，比如attention的量化位数都得人来定好，应用起来不是很灵活。</p> \n<h2 id=\"TernaryBERT-Distillation-aware-Ultra-low-Bit-BERT\"><a href=\"#TernaryBERT-Distillation-aware-Ultra-low-Bit-BERT\" class=\"headerlink\" title=\"TernaryBERT: Distillation-aware Ultra-low Bit BERT\"></a>TernaryBERT: Distillation-aware Ultra-low Bit BERT</h2>\n<p>这篇还是华为诺亚方舟实验室做的，发表在EMNLP主会上面。</p> \n<p><strong>论文地址：</strong><br><a href=\"https://www.aclweb.org/anthology/2020.emnlp-main.37.pdf\" target=\"_blank\" rel=\"noopener\">https://www.aclweb.org/anthology/2020.emnlp-main.37.pdf</a></p> \n<p><img src=\"6.png\" alt></p> \n<h3 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p><img src=\"7.png\" alt><br>如上图所示，这篇在量化基础上还加上了蒸馏。</p> \n<p>首先对于weight量化，采用三值量化，训练方法用的是TWN或者LAT，具体原理可以去看侯璐的论文：<a href=\"https://houlu369.github.io/，而activation还是采用一般的min-max量化。\" target=\"_blank\" rel=\"noopener\">https://houlu369.github.io/，而activation还是采用一般的min-max量化。</a></p> \n<p>量化参数的话，embedding每一行采用一套参数，而其他所有weight都是一整个采用一套参数。</p> \n<p>蒸馏采用三个loss：hidden state、attention和logits。teacher是全精度的，student有两个，第一个是全精度的，模型和teacher一模一样。然后采用TWN或LAT量化得到三值网络，计算loss，最后反向传播更新全精度student的参数。</p> \n<p>此外还有两个trick，一是用了数据增强，二是全精度的student模型初始化是用的finetune后的teacher。</p> \n<h3 id=\"实验结果-2\"><a href=\"#实验结果-2\" class=\"headerlink\" title=\"实验结果\"></a>实验结果</h3>\n<p><img src=\"8.png\" alt><br>在GLUE上做的实验，最大压缩率可以达到23倍，看起来效果比普通的Q-BERT、Q8-BERT还是好了不少的，比BERT也只差了1个点左右。这里所有的activation都只量化到了8位，估计再低试了效果也不好。</p> \n<h3 id=\"评价-2\"><a href=\"#评价-2\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>GLUE和SQUAD上看起来效果很不错，压缩率也很高，但是融合的手段有点多：蒸馏、数据增强、模型初始化等，消融实验也可以看出来去掉蒸馏和数据增强后效果降了非常多，因此TWN和LAT相比于一般的min-max量化实际中到底有多大优势不得而知。最后这篇论文没有做机器翻译任务，都是做的分类任务，如果在更困难的生成任务上效果也很好，才真的有说服力。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>综合看下来，这三篇论文采用了三种完全不同的量化方法。第一篇最好实现，TensorFlow自带的量化也是采用这种方式，8比特效果也近乎无损，但是更低的话就不大行了。后两篇都是超低比特量化，一个用的是binary-code，一个是TWN或LAT，压缩率都很高。第二篇根据词频或重要性区分不同参数的量化位数，在超低比特情况下还能保持很好的效果。第三篇直接超低比特量化，但是用了蒸馏等一系列操作把性能提升了上去，遗憾的是没有做机器翻译任务，让人产生怀疑。</p> \n<p>不过最后只有第三篇中了主会，不管怎么样，还是有很多值得借鉴的地方的。</p>', '2022-04-22 21:46:17', '1.0k', 9, 7299);
INSERT INTO `t_article` VALUES ('07593c1e2170443081da1506d9ac21bf', '编程算法', 1, 'PyTorch自定义CUDA算子教程与运行时间分析', 'https://picsum.photos/1920/1080?random&rand=0.12394848747003606', '最近因为工作需要，学习了一波CUDA。这里简单记录一下PyTorch自定义CUDA算子的方法，写了一个非常简单的example，再介绍一下正确的PyTorch中CUDA运行时间分析方法。 所有的代码都放在了github上，地址是：https', '<p>最近因为工作需要，学习了一波CUDA。这里简单记录一下PyTorch自定义CUDA算子的方法，写了一个非常简单的example，再介绍一下正确的PyTorch中CUDA运行时间分析方法。</p> \n<p>所有的代码都放在了github上，地址是：<br><a href=\"https://github.com/godweiyang/torch-cuda-example\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/torch-cuda-example</a></p> \n<h2 id=\"完整流程\"><a href=\"#完整流程\" class=\"headerlink\" title=\"完整流程\"></a>完整流程</h2>\n<p>下面我们就来详细了解一下PyTorch是如何调用自定义的CUDA算子的。</p> \n<p>首先我们可以看到有四个代码文件：</p> \n<ul> \n <li><code>main.py</code>，这是python入口，也就是你平时写模型的地方。</li> \n <li><code>add2.cpp</code>，这是torch和CUDA连接的地方，将CUDA程序封装成了python可以调用的库。</li> \n <li><code>add2.h</code>，CUDA函数声明。</li> \n <li><code>add2.cu</code>，CUDA函数实现。</li> \n</ul> \n<p>然后逐个文件看一下是怎么调用的。</p> \n<h3 id=\"CUDA算子实现\"><a href=\"#CUDA算子实现\" class=\"headerlink\" title=\"CUDA算子实现\"></a>CUDA算子实现</h3>\n<p>首先最简单的当属<code>add2.h</code>和<code>add2.cu</code>，这就是普通的CUDA实现。</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">launch_add2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\">__global__ <span class=\"token keyword\">void</span> <span class=\"token function\">add2_kernel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span>\n                            <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> blockIdx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> blockDim<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> threadIdx<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span> \\\n            i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> gridDim<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> blockDim<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">launch_add2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span> c<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> b<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dim3 <span class=\"token function\">grid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1023</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dim3 <span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    add2_kernel<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span>grid<span class=\"token punctuation\">,</span> block<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里实现的功能是两个长度为$n$的tensor相加，每个block有1024个线程，一共有$n/1024$个block。具体CUDA细节就不讲了，本文重点不在于这个。</p> \n<p><code>add2_kernel</code>是kernel函数，运行在GPU端的。而<code>launch_add2</code>是CPU端的执行函数，调用kernel。注意它是异步的，调用完之后控制权立刻返回给CPU，所以之后计算时间的时候要格外小心，很容易只统计到调用的时间。</p> \n<h3 id=\"Torch-C-封装\"><a href=\"#Torch-C-封装\" class=\"headerlink\" title=\"Torch C++封装\"></a>Torch C++封装</h3>\n<p>这里涉及到的是<code>add2.cpp</code>，这个文件主要功能是提供一个PyTorch可以调用的接口。</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;torch/extension.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"add2.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">torch_launch_add2</span><span class=\"token punctuation\">(</span>torch<span class=\"token operator\">::</span>Tensor <span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> torch<span class=\"token operator\">::</span>Tensor <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">const</span> torch<span class=\"token operator\">::</span>Tensor <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span>\n                       <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">launch_add2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">data_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">data_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">data_ptr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">PYBIND11_MODULE</span><span class=\"token punctuation\">(</span>TORCH_EXTENSION_NAME<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"torch_launch_add2\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">&amp;</span>torch_launch_add2<span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"add2 kernel warpper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><code>torch_launch_add2</code>函数传入的是C++版本的torch tensor，然后转换成C++指针数组，调用CUDA函数<code>launch_add2</code>来执行核函数。</p> \n<p>这里用pybind11来对<code>torch_launch_add2</code>函数进行封装，然后用cmake编译就可以产生python可以调用的.so库。但是我们这里不直接手动cmake编译，具体方法看下面的章节。</p> \n<h3 id=\"Python调用\"><a href=\"#Python调用\" class=\"headerlink\" title=\"Python调用\"></a>Python调用</h3>\n<p>最后就是python层面，也就是我们用户编写代码去调用上面生成的库了。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>cpp_extension <span class=\"token keyword\">import</span> load\n\ncuda_module <span class=\"token operator\">=</span> load<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"add2\"</span><span class=\"token punctuation\">,</span>\n                   sources<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"add2.cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"add2.cu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># c = a + b (shape: [n])</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span>\na <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\ncuda_c <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n\nntest <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">show_time</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    times <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># GPU warm up</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>ntest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># sync the threads to get accurate cuda running time</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n        start_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        r <span class=\"token operator\">=</span> func<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n        end_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        times<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end_time<span class=\"token operator\">-</span>start_time<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1e6</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> times<span class=\"token punctuation\">,</span> res\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run_cuda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    cuda_module<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>cuda_c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cuda_c\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">run_torch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># return None to avoid intermediate GPU memory application</span>\n    <span class=\"token comment\" spellcheck=\"true\"># for accurate time statistics</span>\n    a <span class=\"token operator\">+</span> b\n    <span class=\"token keyword\">return</span> None\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Running cuda...\"</span><span class=\"token punctuation\">)</span>\ncuda_time<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> show_time<span class=\"token punctuation\">(</span>run_cuda<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Cuda time:  {:.3f}us\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>cuda_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Running torch...\"</span><span class=\"token punctuation\">)</span>\ntorch_time<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> show_time<span class=\"token punctuation\">(</span>run_torch<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Torch time:  {:.3f}us\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>torch_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里6-8行的<code>torch.utils.cpp_extension.load</code>函数就是用来自动编译上面的几个cpp和cu文件的。最主要的就是<code>sources</code>参数，指定了需要编译的文件列表。然后就可以通过<code>cuda_module.torch_launch_add2</code>，也就是我们封装好的接口来进行调用。</p> \n<p>接下来的代码就随心所欲了，这里简单写了一个测量运行时间，对比和torch速度的代码，这部分留着下一章节讲解。</p> \n<p>总结一下，主要分为三个模块：</p> \n<ul> \n <li>先编写CUDA算子和对应的调用函数。</li> \n <li>然后编写torch cpp函数建立PyTorch和CUDA之间的联系，用pybind11封装。</li> \n <li>最后用PyTorch的cpp扩展库进行编译和调用。</li> \n</ul> \n<h2 id=\"运行时间分析\"><a href=\"#运行时间分析\" class=\"headerlink\" title=\"运行时间分析\"></a>运行时间分析</h2>\n<p>我们知道，CUDA kernel函数是异步的，所以不能直接在CUDA函数两端加上<code>time.time()</code>测试时间，这样测出来的只是调用CUDA api的时间，不包括GPU端运行的时间。</p> \n<p>所以我们要加上线程同步函数，等待kernel中所有线程全部执行完毕再执行CPU端后续指令。这里我们将同步指令加在了python端，用的是<code>torch.cuda.synchronize</code>函数。</p> \n<p>具体来说就是形如下面代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nstart_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nfunc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nend_time <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>其中第一次同步是为了防止前面的代码中有未同步还在GPU端运行的指令，第二次同步就是为了等<code>fun()</code>所有线程执行完毕后再统计时间。</p> \n<p>这里我们torch和cuda分别执行10次看看平均时间，此外执行前需要先执行10次做一下warm up，让GPU达到正常状态。</p> \n<p>我们分别测试四种情况，分别是：</p> \n<ul> \n <li>两次同步</li> \n <li>第一次同步，第二次不同步</li> \n <li>第一次不同步，第二次同步</li> \n <li>两次不同步</li> \n</ul> \n<p>这里我们采用英伟达的Nsight Systems来可视化运行的每个时刻指令执行的情况。</p> \n<p>安装命令为：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sudo apt install nsight-systems<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>然后在运行python代码时，在命令前面加上<code>nsys profile</code>就行了：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">nsys profile python3 main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>然后就会生成<code>report1.qdstrm</code>和<code>report1.sqlite</code>两个文件，将<code>report1.qdstrm</code>转换为<code>report1.qdrep</code>文件：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">QdstrmImporter -i report1.qdstrm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>最后将生成的<code>report1.qdrep</code>文件用Nsight Systems软件打开，我这里是mac系统。</p> \n<h3 id=\"两次同步\"><a href=\"#两次同步\" class=\"headerlink\" title=\"两次同步\"></a>两次同步</h3>\n<p>这是正确的统计时间的方法，我们打开Nsight Systems，放大kernel运行那一段可以看到下图：<br><img src=\"1.png\" alt></p> \n<p>其中第1和第3个框分别是cuda和torch的GPU warm up过程，这部分没有进行线程同步（上面的黄色块）。</p> \n<p>而第2和第4个框就分别是cuda和torch的加法执行过程了，我们可以放大来看看。<br><img src=\"2.png\" alt></p> \n<p>可以看出，每执行一次（一个框）都经过了三个步骤：先是调用api（左上角蓝色框），然后执行kernel（下方蓝色框），最后线程同步（右上角黄色框）。</p> \n<p>所以最后算出来的时间就是这三个步骤的耗时，也就是下图选中的范围：<br><img src=\"3.png\" alt></p> \n<p>时间大概在29us左右，和我们实际代码测出来的也是比较接近的：<br><img src=\"4.png\" alt></p> \n<p>其实我们实际想要知道的耗时并不包括api调用和线程同步的时间，但是这部分时间在python端不好去掉，所以就加上了。</p> \n<h3 id=\"第一次同步，第二次不同步\"><a href=\"#第一次同步，第二次不同步\" class=\"headerlink\" title=\"第一次同步，第二次不同步\"></a>第一次同步，第二次不同步</h3>\n<p>放大每次执行的过程：<br><img src=\"5.png\" alt></p> \n<p>可以看出，虽然长的和上一种情况几乎一模一样，但是在api调用完之后，立刻就进行计时了，所以耗时只有8us左右，实际测出来情况也是这样的：<br><img src=\"6.png\" alt></p> \n<h3 id=\"第一次不同步，第二次同步\"><a href=\"#第一次不同步，第二次同步\" class=\"headerlink\" title=\"第一次不同步，第二次同步\"></a>第一次不同步，第二次同步</h3>\n<p>我们先来看一下实际统计的时间：<br><img src=\"7.png\" alt></p> \n<p>很奇怪是不是，第一次运行耗时非常久，那我们可视化看看到底怎么回事：<br><img src=\"8.png\" alt></p> \n<p>可以看出，因为第一次开始计时前没有同步线程，所以在GPU warm up调用api完毕后，第一次cuda kernel调用就开始了。然后一直等到warm up执行完毕，才开始执行第一次cuda kernel，然后是线程同步，结束后才结束计时。这个过程非常长，差不多有130us左右。然后第二次开始执行就很正常了，因为kernel结束的同步相当于是下一次执行之前的同步。</p> \n<h3 id=\"两次不同步\"><a href=\"#两次不同步\" class=\"headerlink\" title=\"两次不同步\"></a>两次不同步</h3>\n<p>先来看看执行情况：<br><img src=\"9.png\" alt></p> \n<p>可以看出因为没有任何同步，所有GPU warm up和cuda kernel的api调用全接在一起了，执行也是。所以计时只计算到了每个api调用的时间，差不多在7us左右。</p> \n<p>上面四种情况，torch指令情形几乎一样，因此不再赘述。</p> \n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n<p>通过这篇文章，应该可以大致了解PyTorch实现自定义CUDA算子并调用的方法，也能知道怎么正确的测量CUDA程序的耗时。</p> \n<p>当然还有一些内容留作今后讲解，比如如何实现PyTorch神经网络的自定义前向和反向传播CUDA算子、如何用TensorFlow调用CUDA算子等等。</p>', '2022-04-22 16:51:04', '5.2k', 11, 3390);
INSERT INTO `t_article` VALUES ('079f21ca76a643c195abf0f484007690', '深度学习', 8, '养成女友？我训练出了一个“杨超越”聊天机器人', 'https://picsum.photos/1920/1080?random&rand=0.3130003012543935', '在上一期教程中，我演示了如何从零开始训练一个比较智障的聊天机器人。 https://zhuanlan.zhihu.com/p/392175369 但是当时数据量太少，模型简单，完全没法用，只能回复训练集中出现过的句子。 而现在，完全体的聊天', '<p>在上一期教程中，我演示了如何从零开始训练一个比较智障的聊天机器人。</p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/392175369\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/392175369</a></p> \n<p>但是当时数据量太少，模型简单，完全没法用，只能回复训练集中出现过的句子。</p> \n<p>而现在，完全体的聊天机器人终于诞生了，我把它命名为“杨超越”。这次可以随你提问什么了，她都能对答如流！</p> \n<p>首先来看看回复的效果怎么样：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">聊天开始！（按q退出）\n我：很高兴认识你\n杨超越：我也很开心哦\n我：我喜欢你\n杨超越：我也喜欢你\n我：做我女朋友好不好？\n杨超越：哈哈,可以呢!\n我：我会一直支持超越妹妹的！\n杨超越：谢谢我们会一直努力的\n我：我什么时候有女朋友？\n杨超越：女朋友。。\n我：我什么时候脱单？\n杨超越：脱你妹啊!!\n我：q\n聊天结束！<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>可以看到超越妹妹的回复还是非常流畅的，那她究竟是怎么诞生的呢？</p> \n<p>完整的项目我都放在了下面，欢迎大家点个star，支持一波：<br><a href=\"https://github.com/godweiyang/chatbot\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/chatbot</a></p> \n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>\n<p>这里我才用的是网上公开的小黄鸡聊天语料，大概有100万条左右，但是质量不是很高，都放在了<code>data</code>目录下。</p> \n<p>模型采用标准的Transformer-big模型，输入你的提问句子，预测超越妹妹回复的句子，<code>config</code>目录下是训练和预测的配置文件。</p> \n<p>模型训练采用NeurST训练库，主要基于TensorFlow，也支持PyTorch训练。模型快速推理采用LightSeq，可加速推理10倍以上，同时还能加速NeurST的训练，最高加速3倍。两者都是字节跳动AI Lab自研的，都已开源。</p> \n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2>\n<p>我们需要安装三样东西：</p> \n<ul> \n <li>SentencePiece的命令行版本和python版本，用来对句子进行分词。</li> \n <li>NeurST深度学习训练库，用来训练Transformer模型。</li> \n <li>LightSeq，用来加速模型推理。</li> \n</ul> \n<p>安装命令都很简单：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">git clone https://github.com/google/sentencepiece.git &amp; cd sentencepiece\nmkdir build &amp; cd build\ncmake ..\nmake -j $(nproc)\nsudo make install\nsudo ldconfig -v\n\npip3 install lightseq neurst sentencepiece<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"开始养成\"><a href=\"#开始养成\" class=\"headerlink\" title=\"开始养成\"></a>开始养成</h2>\n<h3 id=\"生成词表\"><a href=\"#生成词表\" class=\"headerlink\" title=\"生成词表\"></a>生成词表</h3>\n<p>首先我们需要从训练语料库中抽取出词表，为了方便，直接用SentencePiece来分词，生成大小为32k的词表。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">spm_train --input=./data/train/train.src,./data/train/train.trg \\\n    --model_prefix=./data/spm \\\n    --vocab_size=32000 \\\n    --character_coverage=0.9995<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里需要指定训练语料路径<code>--input</code>、词表保存的路径前缀<code>--model_prefix</code>和词表大小<code>--vocab_size</code>。运行结束后会在<code>data</code>目录下生成<code>spm.model</code>和<code>spm.vocab</code>两个词表文件。一个是训练好的分词模型，一个是词表。</p> \n<p>不过我也上传了生成好的TFRecord，大家也可以直接使用，跳过这一步。</p> \n<p><strong>我上传了生成好的词表文件，大家可以直接使用，跳过这一步。</strong></p> \n<h3 id=\"生成TFRecord\"><a href=\"#生成TFRecord\" class=\"headerlink\" title=\"生成TFRecord\"></a>生成TFRecord</h3>\n<p>为了加快TensorFlow的训练速度，可以预先将训练语料用上面的词表处理成id，然后保存为TFRecord格式。这样模型训练时就可以直接读取id进行训练了，不需要做前面的分词操作。能大大加快训练速度，提升显卡利用率。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 -m neurst.cli.create_tfrecords \\\n    --config_paths configs/task_args.yml \\\n    --dataset ParallelTextDataset \\\n    --src_file ./data/train/train.src \\\n    --trg_file ./data/train/train.trg \\\n    --processor_id 0 \\\n    --num_processors 1 \\\n    --num_output_shards 32 \\\n    --output_range_begin 0 \\\n    --output_range_end 32 \\\n    --output_template ./data/tfrecords/train.tfrecords-%5.5d-of-%5.5d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里主要需要指定训练集的路径<code>--src_file</code>和<code>--trg_file</code>，其它参数保持默认即可。生成完毕后会在<code>data/tfrecords</code>下面生成32个二进制文件，这就是处理好的训练数据了。</p> \n<p><strong>我上传了生成好的TFRecord，大家可以直接使用，跳过这一步。</strong></p> \n<h3 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h3>\n<p>有了词表，有了处理好的训练数据，接下来就是训练模型了。这里开启了XLA优化，使用Horovod分布式训练，加快训练速度。如果报错，可以去掉最后两行。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 -m neurst.cli.run_exp \\\n    --entry trainer \\\n    --task translation \\\n    --hparams_set transformer_big \\\n    --model_dir ./models/transformer_big \\\n    --config_paths ./configs/task_args.yml,./configs/train_args.yml,./configs/valid_args.yml \\\n    --distribution_strategy horovod \\\n    --enable_xla<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里需要指定的参数就是模型保存路径<code>model_dir</code>，其他都保持默认。训练好的模型会保存在<code>models/transformer_big</code>下，里面还细分为了<code>best</code>、<code>best_avg</code>等文件夹，用来存最好的模型、模型的平均值等等。</p> \n<p>我在8张V100 32G显卡上训练了8个小时左右，如果你们自己训练的话还是比较耗时的。</p> \n<p><strong>由于模型文件过大，之后我会找地方上传我训练好的模型文件，省去大家训练的时间。</strong></p> \n<h3 id=\"模型预测\"><a href=\"#模型预测\" class=\"headerlink\" title=\"模型预测\"></a>模型预测</h3>\n<p>训练好的模型会保存在<code>models/transformer_big</code>目录下，然后我们就可以开始预测啦。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 -m neurst.cli.run_exp \\\n    --entry predict \\\n    --model_dir ./models/transformer_big \\\n    --config_paths ./configs/predict_args.yml \\\n    --output output.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>但是这时候还没有交互功能，只能指定一个测试集文件，写在了模型预测的配置文件里<code>configs/predict_args.yml</code>。还可以指定<code>--output</code>，将回复结果输出到文件中。</p> \n<p><strong>如果想直接体验交互式的对话聊天，可以跳过这一步。</strong></p> \n<h3 id=\"模型导出为PB格式\"><a href=\"#模型导出为PB格式\" class=\"headerlink\" title=\"模型导出为PB格式\"></a>模型导出为PB格式</h3>\n<p>如果直接用TensorFlow进行推理的话，速度非常慢，你就会感觉你和超越妹妹之间存在延时。所以可以将训练得到的ckpt模型导出为PB格式，然后就可以用LightSeq训练加速引擎进行快速推理了。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 export/export.py \\\n    --model_dir ./models/transformer_big \\\n    --output_file ./models/transformer_big/model.pb \\\n    --beam_size 4 \\\n    --length_penalty 0.6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里需要指定模型路径<code>--model_dir</code>和导出PB文件的路径<code>--output_file</code>，其它参数保持默认。最后会得到<code>models/transformer_big/model.pb</code>这个PB文件。</p> \n<p><strong>由于模型文件过大，之后我会找地方上传我导出好的PB模型文件，这样大家就可以直接跳到最后一步了。</strong></p> \n<h3 id=\"开始交互式聊天！\"><a href=\"#开始交互式聊天！\" class=\"headerlink\" title=\"开始交互式聊天！\"></a>开始交互式聊天！</h3>\n<p>有了PB模型文件，就可以和超越妹妹开始聊天啦！</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 chat.py \\\n    --spm_model ./data/spm.model \\\n    --model_file ./models/transformer_big/model.pb<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>这里需要指定两个路径。一是最开始训练好的分词模型<code>--spm_model</code>，用来将你输入的句子变成整数id。二是<code>--model_file</code>，也就是上一步中的PB格式模型文件。</p> \n<p>聊天过程中随时可以按q退出聊天，你每说一句话，超越妹妹就会回复你一句。</p> \n<h2 id=\"欢迎关注\"><a href=\"#欢迎关注\" class=\"headerlink\" title=\"欢迎关注\"></a>欢迎关注</h2>\n<p>这次用到的NeurST训练库和LightSeq加速库都非常好用，从上面使用教程中也可以看出，几乎不需要你写什么代码就能使用起来。</p> \n<p><strong>聊天机器人：</strong><br><a href=\"https://github.com/godweiyang/chatbot\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/chatbot</a></p> \n<p><strong>NeurST训练库：</strong><br><a href=\"https://github.com/bytedance/neurst\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/neurst</a></p> \n<p><strong>LightSeq加速库：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p>', '2020-07-29 08:09:04', '6.4k', 9, 5841);
INSERT INTO `t_article` VALUES ('098e845c71be46409f5d74f87594236e', '编程算法', 14, '【每日算法Day 83】邻居小孩一年级就会的乘法表，你会吗？', 'https://picsum.photos/1920/1080?random&rand=0.6655411466993121', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 668. 乘法表中第k小的数 题目描述几乎每一个人都用乘法表。但是你能在乘法表中快速找到第 $k$ 小的数字吗？ 给定高度 $m$、宽度 $n$ 的一张 $m', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/kth-smallest-number-in-multiplication-table/\" title=\"LeetCode 668. 乘法表中第k小的数\" target=\"_blank\" rel=\"noopener\">LeetCode 668. 乘法表中第k小的数</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>几乎每一个人都用乘法表。但是你能在乘法表中快速找到第 $k$ 小的数字吗？</p> \n<p>给定高度 $m$、宽度 $n$ 的一张 $m \\times n$ 的乘法表，以及正整数 $k$，你需要返回表中第 $k$ 小的数字。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nm = 3, n = 3, k = 5\n输出：\n3\n解释：\n乘法表:\n1    2    3\n2    4    6\n3    6    9\n第5小的数字是 3 (1, 2, 2, 3, 3).<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nm = 2, n = 3, k = 6\n输出：\n6\n解释：\n乘法表:\n1    2    3\n2    4    6\n第6小的数字是 6 (1, 2, 2, 3, 4, 6).<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li>$m$ 和 $n$ 的范围在 $[1, 30000]$ 之间。</li> \n <li>$k$ 的范围在 $[1, mn]$ 之间。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h3>\n<p>因为 $mn$ 数量级是 $9 \\times 10^8$ 级别的，所以显然不能直接枚举，要想一个对数级别的算法。</p> \n<p>对数级别首先想到的肯定是二分了，我们二分第 $k$ 小的数 $mid$ ，然后求出乘法表中小于等于 $mid$ 的数的数量 $cnt$ 。如果发现 $cnt \\le mid$ ，那就说明这个答案太大了，还可以继续缩小。否则的话答案太小了，得增大一点。</p> \n<p>那么对于枚举的答案 $mid$ 来说，如何找到乘法表中有多少小于等于它的数呢？我们可以直接从 $1$ 开始枚举，和 $1$ 相乘并且结果小于等于 $mid$ 的数有 $mid$ 个，当然还有个 $n$ 的限制，所以是 $\\min{(mid, n)}$ 个。然后和 $2$ 相乘并且结果小于等于 $mid$ 的数有 $\\min{(\\left\\lfloor\\frac{mid}{2}\\right\\rfloor, n)}$ 个。依此类推下去，最终和 $m$ 相乘并且结果小于等于 $mid$ 的数有 $\\min{(\\left\\lfloor\\frac{mid}{m}\\right\\rfloor, n)}$ 个。</p> \n<p>所以最终小于等于 $mid$ 的个数 $cnt$ 就可以计算为：<br>$$<br>\\sum_{i=1}^{m}{\\min{\\left(\\left\\lfloor\\frac{mid}{i}\\right\\rfloor, n\\right)}}<br>$$</p> \n<h3 id=\"二分法-优化\"><a href=\"#二分法-优化\" class=\"headerlink\" title=\"二分法+优化\"></a>二分法+优化</h3>\n<p>当然这题计算还可以进行一些优化。</p> \n<p>首先第 $k$ 小的数是一定小于等于 $k$ 的，所以我们的二分上界可以定为 $k$ 。</p> \n<p>其次注意到当 $i &gt; mid$ 之后，个数一定是 $0$，所以 $i$ 只需要枚举到 $\\min{(mid, m)}$ 就行了。</p> \n<p>然后当 $i \\le \\left\\lfloor\\frac{mid}{n}\\right\\rfloor$ 时，有 $\\min{\\left(\\left\\lfloor\\frac{mid}{i}\\right\\rfloor, n\\right)} = n$，所以这部分的求和结果就是 $n\\left\\lfloor\\frac{mid}{n}\\right\\rfloor$ 。所以 $cnt$ 又可以写为：<br>$$<br>n\\left\\lfloor\\frac{mid}{n}\\right\\rfloor + \\sum_{i=\\left\\lfloor\\frac{mid}{n}\\right\\rfloor+1}^{\\min{(mid, m)}}{\\left\\lfloor\\frac{mid}{i}\\right\\rfloor}<br>$$</p> \n<p>最后，对于某个 $i = t$ ，我们会发现如果 $i$ 慢慢增大，某一段连续区间内 $\\left\\lfloor\\frac{mid}{i}\\right\\rfloor$ 的值都是不会变的。而 $i$ 最大可以增大到 $\\left\\lfloor\\frac{mid}{\\left\\lfloor\\frac{mid}{t}\\right\\rfloor}\\right\\rfloor$，那么这一段区间内的求和就可以直接算出来：<br>$$<br>\\left\\lfloor\\frac{mid}{t}\\right\\rfloor \\left(\\left\\lfloor\\frac{mid}{\\left\\lfloor\\frac{mid}{t}\\right\\rfloor}\\right\\rfloor-t+1\\right)<br>$$<br>接着令 $i$ 直接跳转到 $\\left\\lfloor\\frac{mid}{\\left\\lfloor\\frac{mid}{t}\\right\\rfloor}\\right\\rfloor + 1$ 就可以了，这样就不用慢慢加 $1$ 计算了。要特别注意的是最后不能超过 $m$ 。</p> \n<p>理论上这样的计算复杂度是更低的，但是实际运行中速度还不如不加最后一步优化，可能原因是除法操作次数太多了，反而总的操作次数超过了直接遍历计算。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"二分法（c-）\"><a href=\"#二分法（c-）\" class=\"headerlink\" title=\"二分法（c++）\"></a>二分法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> m<span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">enough</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">enough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token operator\">/</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">?</span>x<span class=\"token operator\">/</span>i<span class=\"token operator\">:</span>n<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分法-优化（c-）\"><a href=\"#二分法-优化（c-）\" class=\"headerlink\" title=\"二分法+优化（c++）\"></a>二分法+优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">enough</span><span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> m<span class=\"token operator\">&lt;</span>mid<span class=\"token operator\">?</span>m<span class=\"token operator\">:</span>mid<span class=\"token punctuation\">,</span> n<span class=\"token operator\">&lt;</span>mid<span class=\"token operator\">?</span>n<span class=\"token operator\">:</span>mid<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">enough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> d<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            d <span class=\"token operator\">=</span> x<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">&lt;</span>m<span class=\"token operator\">?</span>d<span class=\"token operator\">:</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分法（python）\"><a href=\"#二分法（python）\" class=\"headerlink\" title=\"二分法（python）\"></a>二分法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">enough</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">+=</span> x<span class=\"token operator\">//</span>i <span class=\"token keyword\">if</span> x<span class=\"token operator\">//</span>i<span class=\"token operator\">&lt;</span>n <span class=\"token keyword\">else</span> n\n            <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">&gt;=</span> k\n\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token operator\">*</span>n\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> enough<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> mid\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分法-优化（python）\"><a href=\"#二分法-优化（python）\" class=\"headerlink\" title=\"二分法+优化（python）\"></a>二分法+优化（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">enough</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cnt<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">//</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">//</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">:</span>\n                d <span class=\"token operator\">=</span> x<span class=\"token operator\">//</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">//</span>i<span class=\"token punctuation\">)</span>\n                cnt <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">//</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>d <span class=\"token keyword\">if</span> d<span class=\"token operator\">&lt;</span>m <span class=\"token keyword\">else</span> m<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                i <span class=\"token operator\">=</span> d<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> cnt <span class=\"token operator\">&gt;=</span> k\n\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            mid <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> enough<span class=\"token punctuation\">(</span>mid<span class=\"token punctuation\">,</span> m <span class=\"token keyword\">if</span> m<span class=\"token operator\">&lt;</span>mid <span class=\"token keyword\">else</span> mid<span class=\"token punctuation\">,</span> n <span class=\"token keyword\">if</span> n<span class=\"token operator\">&lt;</span>mid <span class=\"token keyword\">else</span> mid<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> mid\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> l <span class=\"token operator\">=</span> mid<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 09:58:28', '6.8k', 9, 2827);
INSERT INTO `t_article` VALUES ('0a9f3b70563a40f08c16a0428a1fb279', '随笔', 3, '关于内推、简历、面试，我有一些想说的', 'https://picsum.photos/1920/1080?random&rand=0.4484192843966037', '最近我司内推活动又开始了，宣传了一波，帮很多人内推了一下，这过程中也发现了不少问题。虽然我也没太多经验，但还是想拿出来说一说。 关于内推其实如果你只是随便在网上找了个内推码，然后自己投了投，那和不内推基本没有任何区别。所以还是得找靠谱的', '<blockquote> \n <p>最近我司内推活动又开始了，宣传了一波，帮很多人内推了一下，这过程中也发现了不少问题。虽然我也没太多经验，但还是想拿出来说一说。</p> \n</blockquote> \n<h2 id=\"关于内推\"><a href=\"#关于内推\" class=\"headerlink\" title=\"关于内推\"></a>关于内推</h2>\n<p>其实如果你只是随便在网上找了个内推码，然后自己投了投，那和不内推基本没有任何区别。所以还是得找靠谱的人内推，能随时联系得上，内推的一大好处就是<strong>能随时找他查查进度咋样了，能让他帮忙联系hr处理一些事情</strong>。当然这还是普通内推的情况，如果你投的是内推人自己的部门，并且你也很强，那他可以在面试官面前给你吹吹牛，至少<strong>简历关基本上可以直接过了吧，面试或许也能增加好感</strong>，当然个人能力还是最重要的。</p> \n<p>然后就是针对我司内推的一些注意事项，<strong>尽量不要海投</strong>。有些人以为一下子投几十个，总能有一个被捞起来吧。其实我们后台系统看到的情况是，简历评估是串行的，遵循队列先进先出的规律，你的投递顺序决定了你的简历评估顺序。所以<strong>投你最中意、最有把握的岗位</strong>就行，然后可以投一两个次优的，或者干脆别再投了。因为你投再多，流程也不会进行下去的。</p> \n<p>也有人会好奇内推对我有啥好处，其实绝大多数情况下，你们在我这投一个简历我可能也就几毛钱或者几块钱，只有入职了才会有大额奖金。</p> \n<h2 id=\"关于简历\"><a href=\"#关于简历\" class=\"headerlink\" title=\"关于简历\"></a>关于简历</h2>\n<p>简历说白了其实还是需要硬实力，但是我相信大多数人跟我一样也没啥拿得出手的干货，这时候就要包装一下了。</p> \n<p>先放一下我的辣鸡简历吧：</p> \n<p><strong>中文简历：</strong><br><a href=\"https://godweiyang.com/medias/files/cv-zh.pdf\">https://godweiyang.com/medias/files/cv-zh.pdf</a></p> \n<p><strong>英文简历：</strong><br><a href=\"https://godweiyang.com/medias/files/cv-en.pdf\">https://godweiyang.com/medias/files/cv-en.pdf</a></p> \n<p>也没啥好参考的，我这方面经验不是很足，推荐一个我感觉不错的经验贴：</p> \n<p><a href=\"https://www.zhihu.com/question/25002833/answer/158108028\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/25002833/answer/158108028</a></p> \n<p>我个人感觉，少一些主观评价（没有特色的），比如踏实好学、不怕吃苦这种（还真看到很多人喜欢写这些）。然后突出自己的特长，精简一些，如果你是面试官，第一眼看到你的简历如果是密密麻麻的，那你可能都没耐心找重点了。</p> \n<p>简历模板也是不少人想要的，我比较推崇用LaTeX模板写，排版比较工整，也不会很花里胡哨，当然你喜欢用word也行。分享一个LaTeX模板网站吧：</p> \n<p><a href=\"https://www.latexstudio.net/index/lists/barSearch/text/%E7%AE%80%E5%8E%86\" target=\"_blank\" rel=\"noopener\">https://www.latexstudio.net/index/lists/barSearch/text/%E7%AE%80%E5%8E%86</a></p> \n<p>简历页数最好控制在一页以内，还是以精简为主，当然如果你是大佬几十页的论文就当我没说，不过大佬也不会来看我写的这些。</p> \n<h2 id=\"关于面试\"><a href=\"#关于面试\" class=\"headerlink\" title=\"关于面试\"></a>关于面试</h2>\n<p>面试我也没啥好说的，主要就算法题和专业知识，我的经历说实话也基本没任何参考价值。</p> \n<p>算法题去刷leetcode就行了。如果你有基础，那就随机刷，找手感就行了。如果你基础不是很好，那就刷重点专题，比如贪心、动态规划之类的，先培养题感。大多数题目官网都有不错的题解，如果你还是看不懂，可以试试看我写的题解：</p> \n<p><a href=\"https://godweiyang.com/2020/04/24/leetcode-conclusions-110/\">https://godweiyang.com/2020/04/24/leetcode-conclusions-110/</a></p> \n<p>专业知识没啥特别说的，网上找面经复习去吧，当然这就靠你搜索能力了，鱼龙混杂，不一定找得到靠谱的面经。就拿我NLP方向举例，我当时就在知乎找到几篇不错的总结文章，例如下面的：</p> \n<p><strong>nlp中的预训练语言模型总结（单向模型、BERT系列模型、XLNet）：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/76912493\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/76912493</a></p> \n<p><strong>NLP算法面试必备！史上最全！PTMs：NLP预训练模型的全面总结：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/115014536\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/115014536</a></p> \n<p>我觉得很多人搜索能力还是挺欠缺的，特别是在各种群里看到过的各种问题都能轻易搜到，所以锻炼锻炼搜索能力吧。</p> \n<p>如果你有很牛的论文或者项目，那大可不必复习得这么累，好好温习一下你的论文或项目，问起细节来对答如流就行。</p> \n<h2 id=\"找我内推\"><a href=\"#找我内推\" class=\"headerlink\" title=\"找我内推\"></a>找我内推</h2>\n<p><strong>NLP同学想来我们组的：</strong><br>有NLP基础，想找实习的同学，可以【直接把简历给我】。我们组（字节AI Lab NLP，北京和上海）急缺做文本生成和机器翻译相关工作的实习生，不要求有顶会或竞赛，面试能过就行，看能力。实习转正率很高。有兴趣的私聊我【微信godweiyang】直接发简历，会直接送到leader手上，帮转给有需要的同学也行。</p> \n<p><strong>想投其他岗位的：</strong><br>我的内推码：<strong>A7FSJMK</strong></p> \n<p>投递地址：<br><a href=\"https://job.toutiao.com/referral/mobile/position?token=MzsxNjExOTkzMjA4NDg4OzY4MjMzNTY3NzIyMzg0MTEyNzc7MA\" target=\"_blank\" rel=\"noopener\">https://job.toutiao.com/referral/mobile/position?token=MzsxNjExOTkzMjA4NDg4OzY4MjMzNTY3NzIyMzg0MTEyNzc7MA</a></p> \n<p>或者直接加我微信godweiyang，拉你进内推群，找我问进度，有啥疑问也能直接问我。</p> \n<p><img src=\"1.jpeg\" alt></p>', '2022-04-22 20:46:50', '5.1k', 6, 6752);
INSERT INTO `t_article` VALUES ('0ec8fb45c18b42548b62592b2462cd26', '计算机知识', 27, '微信电脑版重大更新，可以上班刷朋友圈摸鱼了', 'https://picsum.photos/1920/1080?random&rand=0.7366205452238027', '微信刚刚更新了3.0.0内测版本，不过暂时只有mac os版本。 主要有这么几大更新： 图标变了。 能刷朋友圈了。 能看聊天分享的视频号了。 支持深色模式了。 首先是图标，从原来的圆润的图标变成了手机端的方形图标： 然后是可以刷朋友圈', '<p>微信刚刚更新了3.0.0内测版本，不过暂时只有mac os版本。</p> \n<p>主要有这么几大更新：</p> \n<ul> \n <li>图标变了。</li> \n <li>能刷朋友圈了。</li> \n <li>能看聊天分享的视频号了。</li> \n <li>支持深色模式了。</li> \n</ul> \n<p>首先是图标，从原来的圆润的图标变成了手机端的方形图标：</p> \n<p><img src=\"1.png\" alt></p> \n<p>然后是可以刷朋友圈了，这是最重磅的一大更新了，上班再也不用担心刷手机摸鱼被发现了！</p> \n<p><img src=\"2.png\" alt></p> \n<p>接着是可以点开朋友分享的视频号观看了，不过只能看分享的，不能任意查看。</p> \n<p><img src=\"3.png\" alt></p> \n<p>最后是支持深色模式了，不过对系统版本有要求。</p> \n<p><img src=\"4.png\" alt></p> \n<blockquote> \n <p>因为是内测版，所以自己下安装包安装。在我公众号“算法码上来”的后台回复“微信”，下载最新安装包。</p> \n</blockquote> \n<p>但是安装完后，如果你的系统是最新的big sur，那么可能会打不开，显示“没有权限”。那么两条简单的命令教你怎么解决。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sudo chmod -R 777 /Applications/WeChat.app/\nxattr -c -r /Applications/WeChat.app/Contents/MacOS/WeChat<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre> \n<p>首先第一条命令是给微信app文件夹下所有文件赋予可执行权限，第二条命令则是去除mac系统特有的管理权限，然后就能运行啦。</p>', '2021-10-03 22:24:13', '6.3k', 8, 4113);
INSERT INTO `t_article` VALUES ('0fda2d81786b4b89a885940d8703f7d5', '随笔', 12, '字节跳动2021春招正式启动！欢迎找我内推~', 'https://picsum.photos/1920/1080?random&rand=0.9677579524049265', '字节跳动2021春季校园招聘正式启动！持续扩招，7000+ offer来袭，2次投递机会，70%超高实习转正率，大量暑期实习及全职补录岗位欢迎大家踊跃投递！ 招聘对象👩‍🎓暑期实习：2022届应届生（2021 年 9 月至 202', '<p><img src=\"1.png\" alt></p> \n<blockquote> \n <p>字节跳动2021春季校园招聘正式启动！<strong>持续扩招，7000+ offer来袭，2次投递机会，70%超高实习转正率</strong>，大量暑期实习及全职补录岗位欢迎大家踊跃投递！</p> \n</blockquote> \n<h2 id=\"招聘对象\"><a href=\"#招聘对象\" class=\"headerlink\" title=\"招聘对象\"></a>招聘对象</h2>\n<p>👩‍🎓暑期实习：2022届应届生（2021 年 9 月至 2022 年 8 月期间毕业）<br>👨‍🎓全职补录：2021届应届生（2020 年 9 月至 2021 年 8 月期间毕业）</p> \n<p><em>上述毕业时间中国大陆以毕业证为准，非中国大陆地区以学位证为准，全职补录岗位需最高学历毕业后无全职工作经验</em></p> \n<h2 id=\"职位类别\"><a href=\"#职位类别\" class=\"headerlink\" title=\"职位类别\"></a>职位类别</h2>\n<p>研发、运营、职能/支持、产品、设计、销售、市场、教研教学、游戏策划。</p> \n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2>\n<ul> \n <li>每位候选人最多可以投递<strong>两个</strong>职位。</li> \n <li>两个职位可以同时投递、彼此独立，<strong>较早投递</strong>的职位默认优先处理。</li> \n <li>内推码的优势是可以帮助候选人的简历被<strong>优先筛选</strong>，并且可以随时<strong>查进度</strong>，<strong>联系HR</strong>。</li> \n <li>候选人可以同时投递校招实习岗位和日常实习岗位，但注意候选人当次只能在<strong>一个岗位</strong>上进入后续招聘流程。</li> \n <li>内推码<strong>不支持补填</strong>，记得一定要第一时间填上我的内推码哦。</li> \n</ul> \n<h2 id=\"我的内推码：\"><a href=\"#我的内推码：\" class=\"headerlink\" title=\"我的内推码：\"></a>我的内推码：</h2>\n<p><strong>A7FSJMK</strong></p> \n<h2 id=\"投递链接\"><a href=\"#投递链接\" class=\"headerlink\" title=\"投递链接\"></a>投递链接</h2>\n<p><a href=\"https://jobs.toutiao.com/s/e1tMuhb\" target=\"_blank\" rel=\"noopener\">https://jobs.toutiao.com/s/e1tMuhb</a></p> \n<h2 id=\"投递二维码\"><a href=\"#投递二维码\" class=\"headerlink\" title=\"投递二维码\"></a>投递二维码</h2>\n<p><img src=\"2.png\" alt></p> \n<h2 id=\"日常实习生以及社招\"><a href=\"#日常实习生以及社招\" class=\"headerlink\" title=\"日常实习生以及社招\"></a>日常实习生以及社招</h2>\n<p><strong>日常实习生</strong>以及<strong>社招</strong>长期开启，欢迎<strong>加入内推群</strong>了解最新消息，也欢迎<strong>加我微信</strong>给我简历，向我咨询进度。</p> \n<p><em>注意：<strong>暑期实习</strong>以及<strong>全职补录</strong>请从上文链接投递，下图二维码适合任意时刻投递。</em><br><img src=\"3.jpeg\" alt></p>', '2020-02-14 20:40:53', '5.1k', 5, 2896);
INSERT INTO `t_article` VALUES ('1088ec1e02a74fbd811ffda1ec0ea097', '随笔', 19, '国庆碎碎念', 'https://picsum.photos/1920/1080?random&rand=0.28346082903510694', '关注公众号【算法码上来】，每日算法干货马上就来！ 很久没有写东西了。一是实习确实没啥时间，下了班也只想打开游戏或者打开直播看看开火车。二是确实也不知道写啥，总是分享论文挺累的，刷题也没啥必要了。最舒服的还是闲扯，聊聊划水经验之类的。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<p>很久没有写东西了。一是实习确实没啥时间，下了班也只想打开游戏或者打开直播看看开火车。二是确实也不知道写啥，总是分享论文挺累的，刷题也没啥必要了。最舒服的还是闲扯，聊聊划水经验之类的。</p> \n<p>这个国庆回了趟家，本来想着以后很少回去了，趁机周围转转。最后还是懒，还是呆家里窝了七天，每天LOL和直播为伴。想当年本科毕业也啥事没有，天天呆实验室打游戏，空度了一年。以后工作了时间就更少了，最久的假期可能就只剩明年毕业了，不知道到时候有没有人一起出去玩呢。<br><img src=\"1.jpg\" alt><br>这么多年过去了，心态啥的可能改变了很多，唯一没改的就是懒。有多懒呢，就像这篇文章一样，我都懒得找好看的模板。</p> \n<p>想当初保了研选学校导师，懒得出去夏令营，正好本校又有奈斯的导师，就直接留下了。大四啥事也没有，在实验室打了一年的游戏，白白浪费了一年时间。从下面我练的三个LOL号就能看出我打的有多勤快了，这么些年打了总共有7500把左右了。段位还是很低，水平还是很菜，但打个游戏就是为了开心，为了下班后能够放松放松，自然就不用受排位那些气了。<br><img src=\"2.jpg\" alt><br><img src=\"3.jpg\" alt><br><img src=\"4.jpg\" alt><br>其实在科研上，我也是一个懒。讲道理这两年看论文写代码的时间应该比打游戏少得多。每天睡到中午才起来，吃完午饭可能都一两点了，然后去实验室看看论文想想idea，五六点老板来交流交流，吃完晚饭一直到深夜都是游戏时间了，偶尔晚上会写博客分享论文比较上头，回宿舍后凌晨又是抖音或者网抑云时间。这样时差混乱的日子过了有两三年，轻松是轻松，但是也挺无趣的，也想像别人那样过得充实，就还是懒，呆在实验室多舒服。其实我不是非常投入做科研的，不然我就转博了，还是想简简单单毕业找个工作了。我相信大多数人也是这个想法，真正喜欢科研的人少数。所以我一直用一种轻松愉悦的状态做科研，而不是应付任务，也许这样更容易产生出idea吧。<br><img src=\"5.jpg\" alt><br>这种颓废的状态在今年实习后有了很大改变，公司毕竟不是学校，每天朝九晚五的生活节奏还是很快的。不过在这里还是做的偏research一点的东西，和学校区别不是很大，只是白天不划水了，学到的东西更多了。我也想过，这是不是我要的生活？看到许多人投了银行之类的，955轻轻松松，每天下班老婆孩子热炕头多舒服，我也想这样，就是钱可能少了点，家境贫寒的我还是想多挣点钱。再者自身技术还是不过关，也想做点有意义的工作，提升自己技术，同时为公司挣到了钱，这才是双赢。马上也面临转正了，虽然有其他几家保底了，但还是挺慌的，工作做的感觉零零散散，一直想总结总结沉淀一下，希望十月能给我带来好运吧。<br><img src=\"6.jpg\" alt><br>感情上也是突出一个懒，单身久了看谁都眉清目秀，但也看谁都觉得不靠谱。越来越现实，考虑的不再是学校里简简单单的东西了，而是想着以后会怎样，这样一来很多都没法进行下去了。常说自信是最重要的，奖学金答辩时可自信了，吹牛一套一套的，但这时候却丧失了自信，逐渐卑微。很多道理都懂，也看过很多故事，但在自己身上，却不舍得花功夫。这一点这么些年还是没变，可能还是得等到工作安定了才能有心思冲一发吧，屡教不改，当年也是沉迷学习才落得如此下场。闲聊也越来越少了，事情过去没有人会记得你，他还是他，你还是你。<br><img src=\"7.jpg\" alt><br>博客更新也越来越少了，粉丝涨得太慢了，进入了瓶颈期，主要还是自己懒，懒得营销。偶尔还是会挑些有意思的论文分享分享，但更多的是省点脑细胞，写写碎碎念多轻松。</p> \n<p>2020最后一个假期结束了，明天又要开始社畜生活了，希望代码少点bug，运行顺利。其他的东西，我知道干等是等不到了，以后再说吧，有精力再冲。<br><img src=\"8.jpg\" alt></p>', '2022-04-22 10:37:30', '2.1k', 10, 4366);
INSERT INTO `t_article` VALUES ('1142ab126986465ab879e3dcc8202b4f', '编程算法', 31, '网传字节跳动实习生删除所有轻量级模型，还有救吗？', 'https://picsum.photos/1920/1080?random&rand=0.8980558103767928', '这两天字节跳动的一个新闻上了热搜，相信大多数人应该都已经听说了： 事情大致经过就是字节跳动一个新实习生想删除HDFS下一个目录，可能是存储空间不够了吧。然后经过多方求证，确定了这个目录已经没用了，接着删除了，还使用了无法恢复的命令删除的。', '<p>这两天字节跳动的一个新闻上了热搜，相信大多数人应该都已经听说了：<br><img src=\"1.png\" alt></p> \n<p>事情大致经过就是字节跳动一个新实习生想删除HDFS下一个目录，可能是存储空间不够了吧。然后经过多方求证，确定了这个目录已经没用了，接着删除了，还使用了无法恢复的命令删除的。</p> \n<p>这下公司很多轻量级模型全被删没了，受到了一定程度上的影响，也被认定为P0级事故。但因为实习生也是误删，还多方求证过的，所以对他的影响应该没那么大。</p> \n<p>在知乎上还看到了个有趣的评论：</p> \n<blockquote> \n <p>张一鸣：要Always Day 1。<br>实习生：懂了。</p> \n</blockquote> \n<p>当然这只是调侃，虽然实习生权限给这么大，也反映了字节跳动一视同仁，人人平等的文化理念，但也暴露出了一些权限管理上的漏洞，这次事件也能给他们敲响警钟。</p> \n<h2 id=\"还有救吗？\"><a href=\"#还有救吗？\" class=\"headerlink\" title=\"还有救吗？\"></a>还有救吗？</h2>\n<p>我相信字节跳动应该有能力恢复被删除的模型的。那要是真的无法恢复了，就得全部重新训练了。虽然模型也不大，但架不住数量多啊，真要全部重新训练，还是得耗费不少时间的。</p> \n<p>这时候有什么办法可以挽救呢？可以试试字节跳动人工智能实验室最近开源的LightSeq新版训练引擎啊！</p> \n<p><img src=\"logo.png\" alt></p> \n<p>目前主流的NLP模型和部分CV模型都是基于Transformer的。用LightSeq进行训练加速，<strong>本来要3天训练完的，现在最快只需要1天！</strong></p> \n<p>技术原理和使用教程也在最近发布了，亲测非常好用，只需要几行代码。</p> \n<p><strong>技术原理：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/383657837\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/383657837</a></p> \n<p><strong>使用教程：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/382961951\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/382961951</a></p> \n<p><strong>项目地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p>如果觉得好用，还请帮忙转发，点个star，让更多的人体会到极速训练的快乐。</p>', '2019-12-03 06:39:58', '5.8k', 10, 8982);
INSERT INTO `t_article` VALUES ('1186946a853645749269dcfc3c584c7a', '编程算法', 1, '每日算法系列【LeetCode 1031】两个非重叠子数组的最大和', 'https://picsum.photos/1920/1080?random&rand=0.9199668577386922', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给出非负整数数组 A ，返回两个非重叠（连续）子数组中元素的最大和，子数组的长度分别为 L 和 M。（这里需要澄清的是，长为 L 的子数组可以出现在长为 M 的子数组之前或之后', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给出非负整数数组 A ，返回两个非重叠（连续）子数组中元素的最大和，子数组的长度分别为 L 和 M。（这里需要澄清的是，长为 L 的子数组可以出现在长为 M 的子数组之前或之后。）</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nA = [0,6,5,2,2,5,1,9,4], L = 1, M = 2\n输出：\n20\n解释：\n子数组的一种选择中，[9] 长度为 1，[6,5] 长度为 2。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nA = [3,8,1,3,2,1,8,9,0], L = 3, M = 2\n输出：\n29\n解释：\n子数组的一种选择中，[3,8,1] 长度为 3，[8,9] 长度为 2。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nA = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3\n输出：\n31\n解释：\n子数组的一种选择中，[5,6,0,9] 长度为 4，[0,3,8] 长度为 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>L &gt;= 1</li> \n <li>M &gt;= 1</li> \n <li>L + M &lt;= A.length &lt;= 1000</li> \n <li>0 &lt;= A[i] &lt;= 1000</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题意思就是找到两段给定长度的、不重合的、连续的区间，使得两段区间和最大。</p> \n<p>因为长度是给定的，所以我们只需要预处理好前缀和 sum ，然后给定区间右端点，就可以直接算出区间和。<br>那么如果枚举两段区间的右端点，时间复杂度也才 $O(n^2)$ ，极限情况下也就 1e6 左右，貌似也还可以接受。</p> \n<p>那有没有更快的方法呢？试试动态规划！因为两段区间有前后顺序，我们不妨假设长度为 L 的区间在后面。<br>用 dpm[i] 表示前 i 个数中长度为 M 的区间和的最大值。<br>那么 dpm[i] = max{dpm[i-1], sum[i] - sum[i-M]} ，也就是要么取最后 M 个数，要么最后一个数不取，在前 i - 1 个数里面找答案。<br>然后 dpm 全部处理完之后，遍历数组，假设长度为 L 的区间以 A[i] 结束，那么我们只需要在 A[0] 到 A[i-L] 中间找长度为 M 的区间最大和就行了，那答案不就是上面求好的 dpm[i-L] 吗？这样最终时间复杂度就是 $O(n)$ 了。</p> \n<p>结束了吗？并没有！空间还能不能优化呢？其实当我们遍历长度为 L 的区间时，长度为 M 的区间不用每次都重新遍历，可以重复利用之前的结果，每次向右移动直到和长度为 L 的区间衔接上为止。这样就等于用了两个指针，分别指向了两个区间的右端点，总共最多移动 2n 次就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"动态规划（c-）\"><a href=\"#动态规划（c-）\" class=\"headerlink\" title=\"动态规划（c++）\"></a>动态规划（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dpl<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dpm<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSumTwoNoOverlap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dpl<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dpl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dpm<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dpm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        dpl<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dpm<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> L<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dpl<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dpl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpm<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dpm<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dpm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpl<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划（python）\"><a href=\"#动态规划（python）\" class=\"headerlink\" title=\"动态规划（python）\"></a>动态规划（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxSumTwoNoOverlap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span>\n        dpl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\n        dpm <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\n        sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        dpl<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span>\n        dpm<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;=</span> L<span class=\"token punctuation\">:</span>\n                dpl<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dpl<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpm<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;=</span> M<span class=\"token punctuation\">:</span>\n                dpm<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dpm<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dpl<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"指针法（c-）\"><a href=\"#指针法（c-）\" class=\"headerlink\" title=\"指针法（c++）\"></a>指针法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxSumTwoNoOverlap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> lmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> mmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> L<span class=\"token operator\">+</span>M<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lmax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mmax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mmax<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> lmax <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> mmax <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"指针法（python）\"><a href=\"#指针法（python）\" class=\"headerlink\" title=\"指针法（python）\"></a>指针法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxSumTwoNoOverlap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> L<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> N\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        lmax <span class=\"token operator\">=</span> mmax <span class=\"token operator\">=</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>M<span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            lmax <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            mmax <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>mmax<span class=\"token punctuation\">,</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> lmax <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> mmax <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>思考问题要从简单往困难思考，先想想暴力怎么做？再想想怎么优化它。就算做出来了，也不要拘泥于一种解法，还有代码上能否优化？变量、写法上能否更优美一点？</p> \n<p>当然很熟练了之后这些都不用考虑了，上来像我一样直接一步到位就行了，嘻嘻。</p>', '2022-04-22 21:56:23', '7.1k', 11, 4112);
INSERT INTO `t_article` VALUES ('12992b8c7e4e419faaafc4b0c2fd0506', '编程算法', 26, '【每日算法Day 94】经典面试题：机器人的运动范围', 'https://picsum.photos/1920/1080?random&rand=0.13830327976941803', '最近在忙面试，本来今天都不想更了，但是看基础知识看的太累了，于是写道题排解一下压力。 题目链接LeetCode 面试题13. 机器人的运动范围 题目描述地上有一个 m 行 n 列的方格，从坐标 [0, 0] 到坐标 [m-1, n-1]', '<blockquote> \n <p>最近在忙面试，本来今天都不想更了，但是看基础知识看的太累了，于是写道题排解一下压力。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/\" title=\"LeetCode 面试题13. 机器人的运动范围\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题13. 机器人的运动范围</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>地上有一个 <code>m</code> 行 <code>n</code> 列的方格，从坐标 <code>[0, 0]</code> 到坐标 <code>[m-1, n-1]</code> 。一个机器人从坐标 <code>[0, 0]</code> 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于 <code>k</code> 的格子。例如，当 <code>k</code> 为 <code>18</code> 时，机器人能够进入方格 <code>[35, 37]</code> ，因为 <code>3+5+3+7=18</code>。但它不能进入方格 <code>[35, 38]</code>，因为 <code>3+5+3+8=19</code>。请问该机器人能够到达多少个格子？</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nm = 2, n = 3, k = 1\n输出：\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nm = 3, n = 1, k = 0\n输出：\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= n,m &lt;= 100</code></li> \n <li><code>0 &lt;= k &lt;= 20</code></li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这道题没有什么算法，比较简单，主要考察你的代码实现能力，这里我写了两个方法，一个 BFS，一个 DFS。</p> \n<h3 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h3>\n<p>BFS 的思路就是用一个队列来保存即将要访问的结点，然后不断出队，将当前结点的四周的结点满足要求的入队。为了避免重复访问，可以用一个 <code>vis</code> 数组来标记已经访问过的结点位置。</p> \n<h3 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h3>\n<p>DFS 思路就更加清晰简单了，对于一个结点来说，从它出发可以访问到的结点总数就等于从它四周的结点出发可以访问到的结点总数加一。同样需要用一个 <code>vis</code> 数组来标记已经访问过的结点位置。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"BFS（c-）\"><a href=\"#BFS（c-）\" class=\"headerlink\" title=\"BFS（c++）\"></a>BFS（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">movingCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> p <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> nx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> ny <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">countDigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"DFS（c-）\"><a href=\"#DFS（c-）\" class=\"headerlink\" title=\"DFS（c++）\"></a>DFS（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countDigit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            x <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            y <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ny<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> vis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> nx <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> ny <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">countDigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> vis<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">movingCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vis<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 12:22:36', '8.8k', 4, 1801);
INSERT INTO `t_article` VALUES ('137f6c9c582943de99f1cb687ea3191d', '编程算法', 25, '恕我直言，你们的模型训练都还不够快', 'https://picsum.photos/1920/1080?random&rand=0.6087551029543169', '周末在家没事干，也没人约了打游戏，于是打开了gayhub闲逛，哦不，是github。 然后发现了一个挺有意思的项目: 也就是将你模型中的参数全部存储为一个连续的内存块，加速你的模型训练。 于是我抱着试试看的心态，基于Fairseq和Lig', '<p>周末在家没事干，也没人约了打游戏，于是打开了gayhub闲逛，哦不，是github。</p> \n<p><img src=\"1.jpeg\" alt></p> \n<p>然后发现了一个挺有意思的项目:<br><img src=\"2.png\" alt></p> \n<p><strong>也就是将你模型中的参数全部存储为一个连续的内存块，加速你的模型训练。</strong></p> \n<p>于是我抱着试试看的心态，基于Fairseq和LightSeq分别实现了两个单层的Transformer编码层模型，简单写了一个例子试了一下。</p> \n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>首先为了运行我这个例子，你需要安装上面提到的<code>contiguous-params</code>库。然后还需要安装<code>fairseq</code>和<code>lightseq</code>库。</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install contiguous-params fairseq lightseq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<h2 id=\"一个简单的例子\"><a href=\"#一个简单的例子\" class=\"headerlink\" title=\"一个简单的例子\"></a>一个简单的例子</h2>\n<p>我这里创建了一个模型，就是单层的Transformer编码层，然后随机输入一个向量，损失函数就是输出向量的所有元素的平方均值。</p> \n<p>然后测试了采用参数连续化前后，前向传播、反向传播、梯度更新三部分的时间消耗。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">from</span> dataclasses <span class=\"token keyword\">import</span> dataclass\n<span class=\"token keyword\">import</span> copy\n\n<span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> fairseq<span class=\"token punctuation\">.</span>modules<span class=\"token punctuation\">.</span>transformer_layer <span class=\"token keyword\">import</span> TransformerEncoderLayer\n<span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>pytorch<span class=\"token punctuation\">.</span>transformer_encoder_layer <span class=\"token keyword\">import</span> LSTransformerEncoderLayer\n<span class=\"token keyword\">from</span> contiguous_params <span class=\"token keyword\">import</span> ContiguousParams\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_time</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\'\'\'CUDA同步并获取当前时间\'\'\'</span>\n\n    torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>synchronize<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">ls_config_to_fs_args</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\'\'\'将LightSeq的config转换为Fairseq的args\'\'\'</span>\n\n    @dataclass\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Args</span><span class=\"token punctuation\">:</span>\n        encoder_embed_dim<span class=\"token punctuation\">:</span> int\n        encoder_ffn_embed_dim<span class=\"token punctuation\">:</span> int\n        encoder_attention_heads<span class=\"token punctuation\">:</span> int\n        dropout<span class=\"token punctuation\">:</span> float\n        attention_dropout<span class=\"token punctuation\">:</span> float\n        activation_dropout<span class=\"token punctuation\">:</span> float\n        encoder_normalize_before<span class=\"token punctuation\">:</span> bool\n\n    args <span class=\"token operator\">=</span> Args<span class=\"token punctuation\">(</span>\n        config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>intermediate_size<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>nhead<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>hidden_dropout_ratio<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>attn_prob_dropout_ratio<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>activation_dropout_ratio<span class=\"token punctuation\">,</span>\n        config<span class=\"token punctuation\">.</span>pre_layer_norm\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> args\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">,</span> contiguous<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\'\'\'训练过程\'\'\'</span>\n\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> contiguous<span class=\"token punctuation\">:</span>\n        parameters <span class=\"token operator\">=</span> ContiguousParams<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        opt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        opt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    fw_time<span class=\"token punctuation\">,</span> bw_time<span class=\"token punctuation\">,</span> step_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        opt<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        start_time <span class=\"token operator\">=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        outputs <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        fw_time <span class=\"token operator\">+=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time\n\n        start_time <span class=\"token operator\">=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        bw_time <span class=\"token operator\">+=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time\n\n        start_time <span class=\"token operator\">=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        opt<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        step_time <span class=\"token operator\">+=</span> get_time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start_time\n\n        <span class=\"token keyword\">if</span> epoch <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoch {:&gt;3d}: loss = {:&gt;5.3f}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> fw_time<span class=\"token punctuation\">,</span> bw_time<span class=\"token punctuation\">,</span> step_time\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 定义LightSeq的config</span>\n    config <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n        hidden_size<span class=\"token operator\">=</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span>\n        intermediate_size<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n        nhead<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n        attn_prob_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        activation_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        hidden_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        pre_layer_norm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将LightSeq的config转换为Fairseq的args</span>\n    args <span class=\"token operator\">=</span> ls_config_to_fs_args<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 随机生成输入</span>\n    bsz<span class=\"token punctuation\">,</span> sl <span class=\"token operator\">=</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span>\n    inputs <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>bsz<span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>bsz<span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 定义LightSeq模型并训练</span>\n    ls_model <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    ls_fw_time<span class=\"token punctuation\">,</span> ls_bw_time<span class=\"token punctuation\">,</span> ls_step_time <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>ls_model<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 定义连续化参数的LightSeq模型并训练</span>\n    config_cont <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span>deepcopy<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    ls_model_cont <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config_cont<span class=\"token punctuation\">)</span>\n    ls_c_fw_time<span class=\"token punctuation\">,</span> ls_c_bw_time<span class=\"token punctuation\">,</span> ls_c_step_time <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>ls_model_cont<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">,</span> contiguous<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    inputs <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> masks <span class=\"token operator\">&gt;</span> <span class=\"token number\">0.5</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 定义Fairseq模型并训练</span>\n    fs_model <span class=\"token operator\">=</span> TransformerEncoderLayer<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    fs_fw_time<span class=\"token punctuation\">,</span> fs_bw_time<span class=\"token punctuation\">,</span> fs_step_time <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>fs_model<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 定义连续化参数的Fairseq模型并训练</span>\n    fs_model_cont <span class=\"token operator\">=</span> TransformerEncoderLayer<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span>\n    fs_c_fw_time<span class=\"token punctuation\">,</span> fs_c_bw_time<span class=\"token punctuation\">,</span> fs_c_step_time <span class=\"token operator\">=</span> train<span class=\"token punctuation\">(</span>fs_model_cont<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">,</span> contiguous<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LightSeq time:         {:.3f}s, {:.3f}s, {:.3f}s\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>ls_fw_time<span class=\"token punctuation\">,</span> ls_bw_time<span class=\"token punctuation\">,</span> ls_step_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LightSeq (cont) time:  {:.3f}s, {:.3f}s, {:.3f}s\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>ls_c_fw_time<span class=\"token punctuation\">,</span> ls_c_bw_time<span class=\"token punctuation\">,</span> ls_c_step_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fairseq time:          {:.3f}s, {:.3f}s, {:.3f}s\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>fs_fw_time<span class=\"token punctuation\">,</span> fs_bw_time<span class=\"token punctuation\">,</span> fs_step_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fairseq (cont) time:   {:.3f}s, {:.3f}s, {:.3f}s\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>fs_c_fw_time<span class=\"token punctuation\">,</span> fs_c_bw_time<span class=\"token punctuation\">,</span> fs_c_step_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"详细讲解\"><a href=\"#详细讲解\" class=\"headerlink\" title=\"详细讲解\"></a>详细讲解</h2>\n<p>这里最主要的地方就两行：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">parameters <span class=\"token operator\">=</span> ContiguousParams<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nopt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">.</span>contiguous<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre> \n<p>首先用<code>ContiguousParams</code>类封装<code>model.parameters()</code>，然后将封装后的<code>parameters.contiguous()</code>送进优化器中，这里送进去的就已经是连续存储的一整块参数了。</p> \n<p>我们详细阅读<code>ContiguousParams</code>的源码，可以发现实现很简单：<br><a href=\"https://github.com/PhilJd/contiguous_pytorch_params/blob/master/contiguous_params/params.py\" target=\"_blank\" rel=\"noopener\">https://github.com/PhilJd/contiguous_pytorch_params/blob/master/contiguous_params/params.py</a></p> \n<p>核心代码就是下面这个函数，注释中我都详细解释了每一步在干嘛：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">make_params_contiguous</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    index <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 遍历所有的参数</span>\n    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>_parameters<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 计算参数p的大小</span>\n        size <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>numel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 在连续参数块中的对应位置赋值参数p</span>\n        self<span class=\"token punctuation\">.</span>_param_buffer<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span>index <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 将参数p的数值和梯度都重新指向连续参数块和连续梯度块的对应位置</span>\n        p<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_param_buffer<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span>index <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n        p<span class=\"token punctuation\">.</span>grad <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_grad_buffer<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">:</span>index <span class=\"token operator\">+</span> size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 连续内存块位置偏移到下一个参数</span>\n        index <span class=\"token operator\">+=</span> size\n    <span class=\"token comment\" spellcheck=\"true\"># 连续参数块的梯度设置为连续梯度块</span>\n    self<span class=\"token punctuation\">.</span>_param_buffer<span class=\"token punctuation\">.</span>grad <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_grad_buffer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>所以在封装了原始参数之后，之后模型计算就会从连续内存块中对应位置取出数值，然后进行计算。</p> \n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2>\n<p>我在V100显卡上运行了一下上面的例子，结果如下：<br><img src=\"3.png\" alt></p> \n<p>可以看出，LightSeq在采用参数连续化前后，三部分运行时间几乎没有任何变化，这主要是由于LightSeq已经在模型内部做过参数连续化了，因此速度已经很快了。</p> \n<p>而Fairseq前后的第三部分，也就是参数更新部分时间缩减非常多，从1.5秒缩短到了0.1秒，总的训练时间几乎缩短了将近一半。</p> \n<p>最后对比LightSeq和Fairseq可以明显发现，LightSeq的训练时间比Fairseq快非常多。主要是因为LightSeq采用了算子融合等各种技术，加速了Transformer模型的训练。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>所以在你的<strong>任意</strong>PyTorch模型中，都可以用上面的参数连续化技术大大加快训练速度。</p> \n<p>而如果你的模型是Transformer类模型，那还可以直接用字节跳动开源的LightSeq训练加速引擎，更加方便。</p> \n<p>如果你是TensorFlow爱好者，还可以直接用字节跳动开源的NeurST序列生成库进行训练，里面直接集成了LightSeq，所以训练很快。</p> \n<h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2>\n<h3 id=\"参数连续化\"><a href=\"#参数连续化\" class=\"headerlink\" title=\"参数连续化\"></a>参数连续化</h3>\n<p><a href=\"https://github.com/PhilJd/contiguous_pytorch_params\" target=\"_blank\" rel=\"noopener\">https://github.com/PhilJd/contiguous_pytorch_params</a></p> \n<h3 id=\"LightSeq\"><a href=\"#LightSeq\" class=\"headerlink\" title=\"LightSeq\"></a>LightSeq</h3>\n<p><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<h3 id=\"NeurST\"><a href=\"#NeurST\" class=\"headerlink\" title=\"NeurST\"></a>NeurST</h3>\n<p><a href=\"https://github.com/bytedance/neurst\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/neurst</a></p>', '2022-04-22 10:23:02', '6.7k', 8, 6252);
INSERT INTO `t_article` VALUES ('13e135828fab4cadb15b40e3b87db6c0', '编程算法', 21, '每日算法系列【LeetCode 1006】笨阶乘', 'https://picsum.photos/1920/1080?random&rand=0.8196145812253856', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>通常，正整数 n 的阶乘是所有小于或等于 n 的正整数的乘积。例如，<code>factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1</code>。</p> \n<p>相反，我们设计了一个笨阶乘 <code>clumsy</code>：在整数的递减序列中，我们以一个固定顺序的操作符序列来依次替换原有的乘法操作符：<code>乘法(*)，除法(/)，加法(+)和减法(-)</code>。</p> \n<p>例如，<code>clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1</code>。然而，这些运算仍然使用通常的算术运算顺序：我们在任何加、减步骤之前执行所有的乘法和除法步骤，并且按从左到右处理乘法和除法步骤。</p> \n<p>另外，我们使用的除法是地板除法（floor division），所以 <code>10 * 9 / 8</code> 等于 11。这保证结果是一个整数。</p> \n<p>实现上面定义的笨函数：给定一个整数 N，它返回 N 的笨阶乘。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n4\n输出：\n7\n解释：\n7 = 4 * 3 / 2 + 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n10\n输出：\n12\n解释：\n12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$1 \\le N \\le 10000$</li> \n <li>$-2^{31} \\le answer \\le 2^{31} - 1$ （答案保证符合 32 位整数。）</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>笨方法我就不写了，按照运算顺序模拟一遍，数量比较少的话，应该也不会超时。</p> \n<p>这道题可以用简单的数学计算来优化一下，首先笨阶乘数学形式是下面这样的：<br>$$<br>clumsy(n) = \\left\\lfloor\\frac{n(n-1)}{n-2}\\right\\rfloor + (n-3) - \\left\\lfloor\\frac{(n-4)(n-5)}{n-6}\\right\\rfloor + \\cdots<br>$$</p> \n<p>好像看不出什么东西，那么我们先去掉取整符号看看：<br>$$<br>\\left\\lfloor\\frac{n(n-1)}{n-2}\\right\\rfloor = \\left\\lfloor\\frac{(n-2)(n-2)+3(n-2)+2}{n-2}\\right\\rfloor = \\left\\lfloor n+1+\\frac{2}{n-2}\\right\\rfloor<br>$$</p> \n<p>所以当 $n \\ge 5$ 时，取整符号可以直接去掉：<br>$$<br>\\left\\lfloor\\frac{n(n-1)}{n-2}\\right\\rfloor = n + 1<br>$$</p> \n<p>所以我们就讨论 $n \\ge 5$ 时的情况，笨函数可以写成：<br>$$<br>clumsy(n) = n+1 + n-3 - (n-3) + \\cdots = n+1 + d(n)<br>$$</p> \n<p>也就是第一个取整（$3$ 项）结果是 $n+1$ ，而后面每 $4$ 项结果是 0 ，最后还剩余不足 $4$ 项的结果 $d(n)$ 。</p> \n<p>那么 $d(n)$ 的取值有 $4$ 种情况：</p> \n<ul> \n <li>$n \\% 4 = 0$ ，也就是最后剩余 $1$ 项时，$d(n) = 1$ 。</li> \n <li>$n \\% 4 = 1$ ，也就是最后剩余 $2$ 项时，$d(n) = 2 - 1 = 1$ 。</li> \n <li>$n \\% 4 = 2$ ，也就是最后剩余 $3$ 项时，$d(n) = 3 - 2 \\times 1 = 1$ 。</li> \n <li>$n \\% 4 = 3$ ，也就是最后剩余 $0$ 项时，$d(n) = 0$ 。</li> \n</ul> \n<p>但是考虑到取整函数只有在 $n \\ge 5$ 时才等于 $n+1$ ，也就是最后剩余的项数大于 $2$ 时才行。那么上面的 $4$ 种情况的 $1、4$ 两种，就要特殊处理一下前一个取整结果：</p> \n<ul> \n <li>$n \\% 4 = 0$ ，也就是最后剩余 $1$ 项时，$d(n) = 5 - 4 \\times 3 / 2 + 1 = 0$ 。</li> \n <li>$n \\% 4 = 1$ ，也就是最后剩余 $2$ 项时，$d(n) = 2 - 1 = 1$ 。</li> \n <li>$n \\% 4 = 2$ ，也就是最后剩余 $3$ 项时，$d(n) = 3 - 2 \\times 1 = 1$ 。</li> \n <li>$n \\% 4 = 3$ ，也就是最后剩余 $0$ 项时，$d(n) = 4 - 3 \\times 2 / 1 = -2$ 。</li> \n</ul> \n<p>综上，$n &lt; 5$ 时的结果直接算出来就行了，$n \\ge 5$ 时结果就是 $n+1+d(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">clumsy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> N <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> N<span class=\"token operator\">&gt;=</span><span class=\"token number\">5</span> <span class=\"token operator\">?</span> N<span class=\"token operator\">+</span>d<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">clumsy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        q <span class=\"token operator\">=</span> N <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span>\n        a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n        d <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> N<span class=\"token operator\">+</span>d<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> N<span class=\"token operator\">&gt;=</span><span class=\"token number\">5</span> <span class=\"token keyword\">else</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2019-11-26 13:28:41', '6.3k', 6, 2086);
INSERT INTO `t_article` VALUES ('18addff8a4654c449203163b0fcbb8f4', '编程算法', 26, '【每日算法Day 88】超越妹妹教你如何做这道排序题', 'https://picsum.photos/1920/1080?random&rand=0.540632076766683', '题目链接LeetCode 面试题 16.16. 部分排序 题目描述给定一个整数数组，编写一个函数，找出索引 m 和 n，只要将索引区间 [m, n] 的元素排好序，整个数组就是有序的。注意：n-m 尽量最小，也就是说，找出符合条件的最短序', '<p><img src=\"1.jpg\" alt=\"每日一图：我老婆可爱不？\"></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/sub-sort-lcci/\" title=\"LeetCode 面试题 16.16. 部分排序\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 16.16. 部分排序</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组，编写一个函数，找出索引 <code>m</code> 和 <code>n</code>，只要将索引区间 <code>[m, n]</code> 的元素排好序，整个数组就是有序的。注意：<code>n-m</code> 尽量最小，也就是说，找出符合条件的最短序列。函数返回值为 <code>[m, n]</code>，若不存在这样的 <code>m</code> 和 <code>n</code>（例如整个数组是有序的），请返回 <code>[-1, -1]</code>。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,4,7,10,11,7,12,6,7,16,18,19]\n输出:\n[3,9]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>0 &lt;= len(array) &lt;= 1000000</code></li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先虽然题目没说，但是实际运行下来数列是单调递增的，所以我们下面默认数列是递增的。</p> \n<p>那么对于元素 <code>a[i]</code> 来说，如果它左边存在大于 <code>a[i]</code> 的元素，那么 <code>a[i]</code> 是一定要参与到排序里去的。或者说如果它右边存在小于 <code>a[i]</code> 的元素，那么 <code>a[i]</code> 也是要参与到排序里去的。</p> \n<p>所以我们只需要寻找最靠右的那个数（满足左边存在大于它的数），和最靠左的那个数（满足右边存在小于它的数），那么这两个数之间就是要排序的区间了。</p> \n<p>为什么最靠右的那个（满足左边存在大于它的数）数一定能保证右边没有更小的数了呢？因为如果右边还有更小的数，那么那个更小的数才是更靠右的啊，这就矛盾了。</p> \n<p>所以我们只需要从左到右扫描一遍，用一个变量维护一下最大值就行了，然后反向再遍历一遍，维护一个最小值。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">subSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxx <span class=\"token operator\">=</span> INT_MIN<span class=\"token punctuation\">,</span> minn <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> maxx<span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> maxx <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> minn<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> minn <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">subSort</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span>\n        maxx<span class=\"token punctuation\">,</span> minn <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> maxx<span class=\"token punctuation\">:</span> r <span class=\"token operator\">=</span> i\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> maxx <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> minn<span class=\"token punctuation\">:</span> l <span class=\"token operator\">=</span> i\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> minn <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-04-16 06:15:40', '4.5k', 10, 6473);
INSERT INTO `t_article` VALUES ('1f230091c9be4a44bca1f20864ec81a8', '编程算法', 29, '【每日算法Day 65】你能顺利救出地下城里的公主吗？', 'https://picsum.photos/1920/1080?random&rand=0.43124599485133897', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 174. 地下城游戏 题目描述一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/dungeon-game/\" title=\"LeetCode 174. 地下城游戏\" target=\"_blank\" rel=\"noopener\">LeetCode 174. 地下城游戏</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p> \n<p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p> \n<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。</p> \n<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p> \n<p>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</p> \n<p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 右 -&gt; 右 -&gt; 下 -&gt; 下，则骑士的初始健康点数至少为 7。</p> \n<table> \n <thead> \n  <tr> \n   <th align=\"center\">-2（K）</th> \n   <th align=\"center\">-3</th> \n   <th align=\"center\">-3</th> \n  </tr> \n </thead> \n <tbody>\n  <tr> \n   <td align=\"center\">-5</td> \n   <td align=\"center\">-10</td> \n   <td align=\"center\">1</td> \n  </tr> \n  <tr> \n   <td align=\"center\">10</td> \n   <td align=\"center\">30</td> \n   <td align=\"center\">-5（P）</td> \n  </tr> \n </tbody>\n</table> \n<p><strong>提示：</strong></p> \n<ul> \n <li>骑士的健康点数没有上限。</li> \n <li>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"错误解法\"><a href=\"#错误解法\" class=\"headerlink\" title=\"错误解法\"></a>错误解法</h3>\n<p>首先我们肯定想到的是从左上到右下动态规划，那么对于 $(i, j)$ 这个格子来说，它有两个选择，可以从 $(i-1, j)$ 或者 $(i, j-1)$ 过来。</p> \n<p>我们令 $dp[i][j]$ 表示从左上角走到 $(i, j)$ 这个格子所需要的最小生命值，那么我们选择 $\\min{\\{dp[i-1][j], dp[i][j-1]\\}}$ ，也就是两个<strong>来向</strong>中较小的那个走过来。但是考虑了当前格子的数值之后，路线上所需生命的最小值是可能增大的，而这时候可能选择两个来向中较大的那个反而更好（因为那个来向数值之和比较大），所以这里就产生了矛盾，无法求解。</p> \n<p>举个简单的例子：</p> \n<table> \n <thead> \n  <tr> \n   <th align=\"center\">1（K）</th> \n   <th align=\"center\">-3</th> \n   <th align=\"center\">3</th> \n  </tr> \n </thead> \n <tbody>\n  <tr> \n   <td align=\"center\">0</td> \n   <td align=\"center\">-2</td> \n   <td align=\"center\">0</td> \n  </tr> \n  <tr> \n   <td align=\"center\">-3</td> \n   <td align=\"center\">-3</td> \n   <td align=\"center\">-3（P）</td> \n  </tr> \n </tbody>\n</table> \n<p>这个例子中如果只看走到格子 $(1, 2)$ 的结果的话，肯定是 下 -&gt; 右 -&gt; 右 最好，因为这样初始生命只需要 2 就够了。而另一条路 右 -&gt; 右 -&gt; 下 则需要初始生命 3 。</p> \n<p>但是如果继续走到格子 $(2, 2)$ ，那么最优方向一定是从 $(1, 2)$ 过来（另一个方向负数太多）。但是到 $(1, 2)$ 的最优路线保存的是 下 -&gt; 右 -&gt; 右 这一条，走到终点总和是 -4 ，初始所需最小生命增大为 5 。而另一条原本不怎么好的路线 右 -&gt; 右 -&gt; 下 总和是 -2 ，初始所需最小生命 3 ，所以仍然保持不变。</p> \n<p>这样看来原本不好的路线在最后的结果里是可能会变好的，所以不好保存下来直接递推。</p> \n<h3 id=\"正确解法\"><a href=\"#正确解法\" class=\"headerlink\" title=\"正确解法\"></a>正确解法</h3>\n<p>既然从左上到右下没法动态规划，我们不妨从右下到左上动态规划看看。</p> \n<p>我们令 $dp[i][j]$ 表示从 $(i, j)$ 这个格子走到右下角所需要的最小生命值，同样我们选择两个<strong>去向</strong>中的较小值 $\\min{\\{dp[i+1][j], dp[i][j+1]\\}}$ 。然后考虑了格子 $(i, j)$ 之后， $dp[i][j]$ 就更新为：<br>$$<br>dp[i][j] = \\max{\\{1, \\min{\\{dp[i+1][j], dp[i][j+1]\\}} - dungeon[i][j]\\}}<br>$$<br>为什么这里选择两个去向中所需初始生命较小的那个就没问题了呢？</p> \n<h3 id=\"严格证明\"><a href=\"#严格证明\" class=\"headerlink\" title=\"严格证明\"></a>严格证明</h3>\n<p><img src=\"1.jpg\" alt><br>考虑上图这种情况，这里我把 $(i, j)$ 抽象为了 $x$ ，右边一格抽象为了 $s$ ，右下角抽象为了 $t$ 。然后 $s \\to t$ 走下面这条路所需初始生命值最小，路径上格子记为 $d$ ，另一条路径上格子记为 $d’$ 。</p> \n<p>因为走路径 $d$ 所需的初始生命值更小，所以我们有：<br>$$<br>\\max{\\left\\{ \\max_k{\\left\\{ -\\sum_{i=1}^k{d_i} \\right\\}}, 1 \\right\\}} &lt; \\max{\\left\\{ \\max_k{\\left\\{ -\\sum_{i=1}^k{d’_i} \\right\\}}, 1 \\right\\}}<br>$$<br>等价于：<br>$$<br>\\max_k{\\left\\{ -\\sum_{i=1}^k{d_i} \\right\\}} &lt; \\max_k{\\left\\{ -\\sum_{i=1}^k{d’_i} \\right\\}}<br>$$<br>这时候我们在两边 $\\max{\\{\\cdot\\}}$ 里面同时加上 $-x$ ，大小关系是不会变的。</p> \n<p>而错误解法中，考虑下图这种情况：<br><img src=\"2.jpg\" alt><br>同样我们可以得到：<br>$$<br>\\max_k{\\left\\{ -\\sum_{i=1}^k{d_i} \\right\\}} &lt; \\max_k{\\left\\{ -\\sum_{i=1}^k{d’_i} \\right\\}}<br>$$</p> \n<p>到这里为止和上面正确解法是一模一样的。但是，加上 $-x$ 之后，和上面正解的区别就是，<strong>正解求和里每一项都加了，所以大小关系不变，但是错解只有一项加了（就是所有值全加起来），大小关系无法确定</strong>。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">calculateMinimumHP</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> dungeon<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> dungeon<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> dungeon<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> minn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> minn<span class=\"token operator\">-</span>dungeon<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-11 19:25:51', '7.2k', 6, 7154);
INSERT INTO `t_article` VALUES ('20a23e88485f4ea0baf6658a6d3672e3', '深度学习', 29, '从零开始训练一个人工智障女友', 'https://picsum.photos/1920/1080?random&rand=0.8234040990444947', '很多人工智能小白可能不知道那些高大上的语音助理、机器翻译或者聊天机器人都是怎么被创造出来的，也不知道一个深度学习模型是怎么从零开始搭建并运行起来的。 今天我就简单教大家如何从零开始搭建一个Transformer模型，并在自己的数据上训练起来', '<p>很多人工智能小白可能不知道那些高大上的语音助理、机器翻译或者聊天机器人都是怎么被创造出来的，也不知道一个深度学习模型是怎么从零开始搭建并运行起来的。</p> \n<p>今天我就简单教大家如何从零开始搭建一个Transformer模型，并在自己的数据上训练起来。这个教程非常基础，所以训练出来的模型也很傻瓜，适合零基础小白长知识用。</p> \n<p>首先整个训练流程可以分为下面几步，我们在后面章节依次介绍：</p> \n<ol> \n <li>处理数据</li> \n <li>创建模型</li> \n <li>创建损失函数</li> \n <li>创建参数优化器</li> \n <li>进行训练</li> \n <li>进行预测</li> \n</ol> \n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2>\n<p>这里我们需要使用到的有三样东西：</p> \n<ul> \n <li>训练深度学习模型需要用PyTorch。</li> \n <li>对句子进行分词处理需要用Hugging Face的分词器。</li> \n <li>搭建Transformer模型需要用LightSeq的快速模型、损失函数以及参数优化器。</li> \n</ul> \n<p>所以运行下面安装命令即可：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip3 install torch transformers\ngit clone https://github.com/bytedance/lightseq.git\ncd lightseq\npip3 install -e .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>然后导入必要的一些文件：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> BertTokenizer\n<span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">import</span> LSTransformer<span class=\"token punctuation\">,</span> LSCrossEntropyLayer<span class=\"token punctuation\">,</span> LSAdam<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"处理数据\"><a href=\"#处理数据\" class=\"headerlink\" title=\"处理数据\"></a>处理数据</h2>\n<p>因为深度学习模型擅长和数字打交道，所以你需要将你说的话或者写的句子变成一串整数id，用来表示每个单词在词表中的序号。</p> \n<p>这里我们使用到的是Hugging Face的分词器，它能帮你把输入的句子直接变成一串整数id，非常便捷。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 创建Hugging Face分词器</span>\n    tokenizer <span class=\"token operator\">=</span> BertTokenizer<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"bert-base-cased\"</span><span class=\"token punctuation\">)</span>\n    vocab_size <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>vocab_size\n    sep_id <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>\n        tokenizer<span class=\"token punctuation\">.</span>special_tokens_map<span class=\"token punctuation\">[</span><span class=\"token string\">\"sep_token\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> add_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将源文本映射成整数id</span>\n    src_text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"What is the fastest library in the world?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"You are so pretty!\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"What do you love me for?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"The sparrow outside the window hovering on the telephone pole.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    src_tokens <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_encode_plus<span class=\"token punctuation\">(</span>\n        src_text<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span>\n    <span class=\"token punctuation\">)</span>\n    src_tokens <span class=\"token operator\">=</span> src_tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    batch_size<span class=\"token punctuation\">,</span> src_seq_len <span class=\"token operator\">=</span> src_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将目标文本映射成整数id</span>\n    trg_text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"I guess it must be LightSeq, because ByteDance is the fastest.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Thanks very much and you are pretty too.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Love your beauty, smart, virtuous and kind.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"You said all this is very summery.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    trg_tokens <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_encode_plus<span class=\"token punctuation\">(</span>\n        trg_text<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span>\n    <span class=\"token punctuation\">)</span>\n    trg_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    trg_seq_len <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将目标文本左移1个单词位置，用来作为解码端输出</span>\n    target <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    trg_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        tokenizer<span class=\"token punctuation\">,</span>\n        src_text<span class=\"token punctuation\">,</span>\n        src_tokens<span class=\"token punctuation\">,</span>\n        trg_text<span class=\"token punctuation\">,</span>\n        trg_tokens<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        sep_id<span class=\"token punctuation\">,</span>\n        vocab_size<span class=\"token punctuation\">,</span>\n        batch_size<span class=\"token punctuation\">,</span>\n        src_seq_len<span class=\"token punctuation\">,</span>\n        trg_seq_len<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>代码中注释写的非常清楚了，只需要创建输入文本和输出文本即可，而标准的解码端输出就是输出文本左移一个单词，也就是每个单词输入后预测下一个单词是什么。</p> \n<h2 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h2>\n<p>这里我们使用Transformer-base模型进行训练，使用LightSeq来创建Transformer模型非常简单，只需要创建一个配置，然后用它就能创建Transformer模型了。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_model</span><span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    transformer_config <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        model<span class=\"token operator\">=</span><span class=\"token string\">\"transformer-base\"</span><span class=\"token punctuation\">,</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n        max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n        vocab_size<span class=\"token operator\">=</span>vocab_size<span class=\"token punctuation\">,</span>\n        padding_idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        num_encoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        num_decoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">(</span>transformer_config<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"创建损失函数\"><a href=\"#创建损失函数\" class=\"headerlink\" title=\"创建损失函数\"></a>创建损失函数</h2>\n<p>这里我们使用交叉熵损失函数，使用LightSeq来创建同样非常简单，只需要创建一个配置。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">create_criterion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ce_config <span class=\"token operator\">=</span> LSCrossEntropyLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n        padding_idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        epsilon<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    loss_fn <span class=\"token operator\">=</span> LSCrossEntropyLayer<span class=\"token punctuation\">(</span>ce_config<span class=\"token punctuation\">)</span>\n    loss_fn<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> loss_fn<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"创建参数优化器\"><a href=\"#创建参数优化器\" class=\"headerlink\" title=\"创建参数优化器\"></a>创建参数优化器</h2>\n<p>使用LightSeq来创建参数优化器的过程和平常使用PyTorch创建一模一样，只要一行代码就行了。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">opt <span class=\"token operator\">=</span> LSAdam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<h2 id=\"进行训练\"><a href=\"#进行训练\" class=\"headerlink\" title=\"进行训练\"></a>进行训练</h2>\n<p>模型训练过程也和平常一模一样，这里我们训练2000轮。因为训练过程中需要知道目标端的文本是什么，所以需要输入源端和目标端两个文本。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================TRAIN========================\"</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> trg_tokens<span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> epoch <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoch {:03d}: {:.3f}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    opt<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"进行预测\"><a href=\"#进行预测\" class=\"headerlink\" title=\"进行预测\"></a>进行预测</h2>\n<p>在模型训练好之后，我们用它进行预测。这时候你就不知道目标端的文本是什么了，你只能输入源端文本，然后目标端输入一个句子开始标记，后面的目标端文本都得通过模型预测得到。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================TEST========================\"</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>eval<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 获得编码器的输出和掩码表示</span>\nencoder_out<span class=\"token punctuation\">,</span> encoder_padding_mask <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 使用目标端文本的第一个单词作为解码器的初始输入，预测后面单词</span>\npredict_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ncache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>trg_seq_len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 使用缓存来加速解码速度</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>\n        predict_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> encoder_out<span class=\"token punctuation\">,</span> encoder_padding_mask<span class=\"token punctuation\">,</span> cache\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 预测下一个单词</span>\n    output <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将预测得到的单词和历史预测拼接，作为最终预测结果</span>\n    predict_tokens <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>predict_tokens<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将结束符后的单词都标记为结束符</span>\nmask <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>eq<span class=\"token punctuation\">(</span>predict_tokens<span class=\"token punctuation\">,</span> sep_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\npredict_tokens <span class=\"token operator\">=</span> predict_tokens<span class=\"token punctuation\">.</span>masked_fill<span class=\"token punctuation\">(</span>mask <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep_id<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将预测结果的id还原为文本</span>\npredict_text <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_decode<span class=\"token punctuation\">(</span>predict_tokens<span class=\"token punctuation\">,</span> skip_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; source text\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>src_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; target text\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>trg_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; predict text\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>predict_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2>\n<p>完整代码如下，保存在<code>run.py</code>里面，然后运行下面命令就行了：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 run.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> BertTokenizer\n<span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">import</span> LSTransformer<span class=\"token punctuation\">,</span> LSCrossEntropyLayer<span class=\"token punctuation\">,</span> LSAdam\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 创建Hugging Face分词器</span>\n    tokenizer <span class=\"token operator\">=</span> BertTokenizer<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"bert-base-cased\"</span><span class=\"token punctuation\">)</span>\n    vocab_size <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>vocab_size\n    sep_id <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>\n        tokenizer<span class=\"token punctuation\">.</span>special_tokens_map<span class=\"token punctuation\">[</span><span class=\"token string\">\"sep_token\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> add_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">False</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将源文本映射成整数id</span>\n    src_text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"What is the fastest library in the world?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"You are so pretty!\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"What do you love me for?\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"The sparrow outside the window hovering on the telephone pole.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    src_tokens <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_encode_plus<span class=\"token punctuation\">(</span>\n        src_text<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span>\n    <span class=\"token punctuation\">)</span>\n    src_tokens <span class=\"token operator\">=</span> src_tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    batch_size<span class=\"token punctuation\">,</span> src_seq_len <span class=\"token operator\">=</span> src_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将目标文本映射成整数id</span>\n    trg_text <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"I guess it must be LightSeq, because ByteDance is the fastest.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Thanks very much and you are pretty too.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"Love your beauty, smart, virtuous and kind.\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"You said all this is very summery.\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n    trg_tokens <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_encode_plus<span class=\"token punctuation\">(</span>\n        trg_text<span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span>\n    <span class=\"token punctuation\">)</span>\n    trg_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    trg_seq_len <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 将目标文本左移1个单词位置，用来作为解码端输出</span>\n    target <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n    trg_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        tokenizer<span class=\"token punctuation\">,</span>\n        src_text<span class=\"token punctuation\">,</span>\n        src_tokens<span class=\"token punctuation\">,</span>\n        trg_text<span class=\"token punctuation\">,</span>\n        trg_tokens<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        sep_id<span class=\"token punctuation\">,</span>\n        vocab_size<span class=\"token punctuation\">,</span>\n        batch_size<span class=\"token punctuation\">,</span>\n        src_seq_len<span class=\"token punctuation\">,</span>\n        trg_seq_len<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_model</span><span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    transformer_config <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        model<span class=\"token operator\">=</span><span class=\"token string\">\"transformer-base\"</span><span class=\"token punctuation\">,</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n        max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n        vocab_size<span class=\"token operator\">=</span>vocab_size<span class=\"token punctuation\">,</span>\n        padding_idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        num_encoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        num_decoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">(</span>transformer_config<span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> model\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">create_criterion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    ce_config <span class=\"token operator\">=</span> LSCrossEntropyLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">2048</span><span class=\"token punctuation\">,</span>\n        padding_idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        epsilon<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    loss_fn <span class=\"token operator\">=</span> LSCrossEntropyLayer<span class=\"token punctuation\">(</span>ce_config<span class=\"token punctuation\">)</span>\n    loss_fn<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>half<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> loss_fn\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">(</span>\n        tokenizer<span class=\"token punctuation\">,</span>\n        src_text<span class=\"token punctuation\">,</span>\n        src_tokens<span class=\"token punctuation\">,</span>\n        trg_text<span class=\"token punctuation\">,</span>\n        trg_tokens<span class=\"token punctuation\">,</span>\n        target<span class=\"token punctuation\">,</span>\n        sep_id<span class=\"token punctuation\">,</span>\n        vocab_size<span class=\"token punctuation\">,</span>\n        batch_size<span class=\"token punctuation\">,</span>\n        src_seq_len<span class=\"token punctuation\">,</span>\n        trg_seq_len<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> create_data<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> create_model<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">)</span>\n    loss_fn <span class=\"token operator\">=</span> create_criterion<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    opt <span class=\"token operator\">=</span> LSAdam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================TRAIN========================\"</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> trg_tokens<span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> loss_fn<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> epoch <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoch {:03d}: {:.3f}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        opt<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================TEST========================\"</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>eval<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 获得编码器的输出和掩码表示</span>\n    encoder_out<span class=\"token punctuation\">,</span> encoder_padding_mask <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 使用目标端文本的第一个单词作为解码器的初始输入，预测后面单词</span>\n    predict_tokens <span class=\"token operator\">=</span> trg_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    cache <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>trg_seq_len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 使用缓存来加速解码速度</span>\n        output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>\n            predict_tokens<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> encoder_out<span class=\"token punctuation\">,</span> encoder_padding_mask<span class=\"token punctuation\">,</span> cache\n        <span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 预测下一个单词</span>\n        output <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 将预测得到的单词和历史预测拼接，作为最终预测结果</span>\n        predict_tokens <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>predict_tokens<span class=\"token punctuation\">,</span> output<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将结束符后的单词都标记为结束符</span>\n    mask <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cumsum<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>eq<span class=\"token punctuation\">(</span>predict_tokens<span class=\"token punctuation\">,</span> sep_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    predict_tokens <span class=\"token operator\">=</span> predict_tokens<span class=\"token punctuation\">.</span>masked_fill<span class=\"token punctuation\">(</span>mask <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sep_id<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 将预测结果的id还原为文本</span>\n    predict_text <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_decode<span class=\"token punctuation\">(</span>predict_tokens<span class=\"token punctuation\">,</span> skip_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; source text\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>src_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; target text\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>trg_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt; predict text\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>predict_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>如果运行顺利的话，你会看到下面的输出信息：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">========================TRAIN========================\nTransformerEmbeddingLayer #0 bind weights and grads.\nTransformerEncoderLayer #0 bind weights and grads.\nTransformerEncoderLayer #1 bind weights and grads.\nTransformerEncoderLayer #2 bind weights and grads.\nTransformerEncoderLayer #3 bind weights and grads.\nTransformerEncoderLayer #4 bind weights and grads.\nTransformerEncoderLayer #5 bind weights and grads.\nTransformerEmbeddingLayer #1 bind weights and grads.\nTransformerDecoderLayer #0 bind weights and grads.\nDecoder layer #0 allocate encdec_kv memory\nTransformerDecoderLayer #1 bind weights and grads.\nTransformerDecoderLayer #2 bind weights and grads.\nTransformerDecoderLayer #3 bind weights and grads.\nTransformerDecoderLayer #4 bind weights and grads.\nTransformerDecoderLayer #5 bind weights and grads.\nepoch 000: 725.560\nepoch 200: 96.252\nepoch 400: 15.151\nepoch 600: 5.770\nepoch 800: 3.212\nepoch 1000: 1.748\nepoch 1200: 0.930\nepoch 1400: 0.457\nepoch 1600: 0.366\nepoch 1800: 0.299\n========================TEST========================\n&gt;&gt;&gt;&gt;&gt; source text\nWhat is the fastest library in the world?\nYou are so pretty!\nWhat do you love me for?\nThe sparrow outside the window hovering on the telephone pole.\n&gt;&gt;&gt;&gt;&gt; target text\nI guess it must be LightSeq, because ByteDance is the fastest.\nThanks very much and you are pretty too.\nLove your beauty, smart, virtuous and kind.\nYou said all this is very summery.\n&gt;&gt;&gt;&gt;&gt; predict text\nI guess it must be LightSeq, because ByteDance is the fastest.\nThanks very much and you are pretty too.\nLove your beauty, smart, virtuous and kind.\nYou said all this is very summery.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>可以看到，最后的预测文本和真实的目标端文本完全一致。</p> \n<p>当然这里的例子非常简单，输入输出只有4句话。如果你有大量的对话数据集的话，你就可以训练出一个非常完美的聊天机器人啦，还愁啥没有女朋友呢？</p> \n<p>如果觉得LightSeq比较好用，别忘了给个star，是给我们最大的支持。</p> \n<p><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p>', '2022-04-22 14:20:34', '9.6k', 2, 4990);
INSERT INTO `t_article` VALUES ('22c3fa37c683402e827b24b93866f6f7', '深度学习', 14, '收藏！编码器中如何融入结构信息？这几篇论文一定不要错过', 'http://47.96.31.161:9000/my-file/img48.jpg', '在编码器中加入结构信息有很多种用途，下面就给大家简要分享几篇融入了结构信息的编码器的论文。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2>\n<p>编码器已经成为了很多 NLP 模型中的基本结构。不管你是做机器翻译，还是做句法分析，不管你是需要得到单词的上下文表示，还是需要得到句子的表示，你都需要一个强有力的编码器。输入一个句子，编码器最终输出每个单词的表示或者整个句子的表示。</p> \n<p>而近些年来 NLP 领域用的比较多的编码器有 CNN ，RvNN ，RNN （尤其是 LSTM）和 Transformer 等等，今天我们主要关注最后两个。在编码器中加入结构信息有很多种用途。一是利用结构信息增强编码器的结构表示，进而提高下游任务的性能。二可以无监督学习出句子的句法树（如果融入的是句法结构信息的话）。</p> \n<p>下面就给大家简要分享几篇融入了结构信息的编码器的论文。</p> \n<h2 id=\"01\"><a href=\"#01\" class=\"headerlink\" title=\"01\"></a>01</h2>\n<p><a href=\"http://arxiv.org/abs/1711.02013\" title=\"ICLR18: Neural Language Modeling by Jointly Learning Syntax and Lexicon\" target=\"_blank\" rel=\"noopener\">Neural Language Modeling by Jointly Learning Syntax and Lexicon</a></p> \n<p><img src=\"1.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/yikangshen/PRPN\" target=\"_blank\" rel=\"noopener\">https://github.com/yikangshen/PRPN</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://godweiyang.com/2019/03/31/iclr18-prpn/\">https://godweiyang.com/2019/03/31/iclr18-prpn/</a></p> \n<p>本文提出了一种新的语言模型叫做 PRPN ，隐式地建模句法树信息。具体实现上，模型分为了三个部分：Parsing 模块、Reading 模块和 Predict 模块。其中 Parsing 模块用 CNN 来预测相邻两个单词的句法距离（概念详见 <a href=\"http://aclweb.org/anthology/P18-1108\" title=\"ACL18: Straight to the Tree: Constituency Parsing with Neural Syntactic Distance\" target=\"_blank\" rel=\"noopener\">Straight to the Tree: Constituency Parsing with Neural Syntactic Distance</a>），通过句法距离就可以还原出句子的句法树了。Reading 模块用来建模上下文，同时还融入了前面时刻预测出来的句法距离信息。Predict 模块用来预测下一个单词是什么，做语言模型。</p> \n<h2 id=\"02\"><a href=\"#02\" class=\"headerlink\" title=\"02\"></a>02</h2>\n<p><a href=\"https://www.aclweb.org/anthology/N19-1116/\" title=\"NAACL19: Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders\" target=\"_blank\" rel=\"noopener\">Unsupervised Latent Tree Induction with Deep Inside-Outside Recursive Autoencoders</a></p> \n<p><img src=\"3.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/iesl/diora\" target=\"_blank\" rel=\"noopener\">https://github.com/iesl/diora</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://godweiyang.com/2019/07/25/diora/\">https://godweiyang.com/2019/07/25/diora/</a></p> \n<p>这篇论文提出了 DIORA 模型，主要使用 inside-outside 算法来计算每个 span 的表示和得分。其中 inside 过程其实就是自底向上计算所有 span 的得分和表示，而 outside 过程自顶向下计算 span 表示。最后目标函数也和其他模型有所不同，一般目标函数不是语言模型就是下游任务，但是这里用 outside 过程得到的所有单词的表示和得分来计算损失函数，也就是最大化每个单词的所有可能的句法树的得分总和。</p> \n<h2 id=\"03\"><a href=\"#03\" class=\"headerlink\" title=\"03\"></a>03</h2>\n<p><a href=\"http://arxiv.org/abs/1904.03746\" title=\"NAACL19: Unsupervised Recurrent Neural Network Grammars\" target=\"_blank\" rel=\"noopener\">Unsupervised Recurrent Neural Network Grammars</a></p> \n<p><img src=\"4.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/harvardnlp/urnng\" target=\"_blank\" rel=\"noopener\">https://github.com/harvardnlp/urnng</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://godweiyang.com/2019/04/20/naacl19-urnng/\">https://godweiyang.com/2019/04/20/naacl19-urnng/</a></p> \n<p>本文提出了 URNNG 模型，用变分方法和 RNNG 来做无监督句法分析。具体实现上是用两个网络，第一个是 inference 网络，来推理出句子对应的隐变量（也就是句法树）的条件概率。然后再用生成网络 RNNG 来建模句子和隐变量的联合概率。最后对这个联合概率求和得到句子的概率，也就是用语言模型来作为目标任务。</p> \n<h2 id=\"04\"><a href=\"#04\" class=\"headerlink\" title=\"04\"></a>04</h2>\n<p><a href=\"http://arxiv.org/abs/1810.09536\" title=\"ICLR19: Ordered Neurons: Integrating Tree Structures into Recurrent Neural Networks\" target=\"_blank\" rel=\"noopener\">Ordered Neurons: Integrating Tree Structures into Recurrent Neural Networks</a></p> \n<p><img src=\"5.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/yikangshen/Ordered-Neurons\" target=\"_blank\" rel=\"noopener\">https://github.com/yikangshen/Ordered-Neurons</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://kexue.fm/archives/6621\" target=\"_blank\" rel=\"noopener\">https://kexue.fm/archives/6621</a></p> \n<p>这篇论文是 ICLR2019 的最佳论文之一，主要思想是赋予 LSTM 的神经元层级信息，对神经元排序（有序神经元），同时引入两个新的门控单元（主遗忘门和主输入门），来建模句子的层级结构信息。模型基于的最主要的指导思想就是：<strong>层级越高，颗粒度越粗，那么它在句子中的跨度就越大</strong>。输入一个单词之后，判断单词的层级和历史层级之间的大小关系，然后看情况更新参数的不同维度，低层保留历史信息，高层直接用输入信息覆盖，中间部分就用普通的 LSTM 更新。</p> \n<h2 id=\"05\"><a href=\"#05\" class=\"headerlink\" title=\"05\"></a>05</h2>\n<p><a href=\"http://arxiv.org/abs/1909.02134\" title=\"EMNLP19: PaLM: A Hybrid Parser and Language Model\" target=\"_blank\" rel=\"noopener\">PaLM: A Hybrid Parser and Language Model</a></p> \n<p><img src=\"7.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/Noahs-ARK/PaLM\" target=\"_blank\" rel=\"noopener\">https://github.com/Noahs-ARK/PaLM</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://godweiyang.com/2020/01/09/emnlp19-palm/\">https://godweiyang.com/2020/01/09/emnlp19-palm/</a></p> \n<p>本文在 LSTM 中融入 attention ，对于每个单词，都计算它和左边所有单词的 attention ，然后利用这个 attention 来融合历史信息，增强当前时刻的上下文表示。在解码句法树的时候，自顶向下解码，对于某个 span ，只需要贪心地找出使右儿子 span 得分最大的那个 split 就行了。至于这个 attention ，有没有句法树监督都是可以的，实际上没有句法树监督的话对语言模型效果更好。</p> \n<h2 id=\"06\"><a href=\"#06\" class=\"headerlink\" title=\"06\"></a>06</h2>\n<p><a href=\"http://arxiv.org/abs/1909.06639\" title=\"EMNLP19: Tree Transformer: Integrating Tree Structures into Self-Attention\" target=\"_blank\" rel=\"noopener\">Tree Transformer: Integrating Tree Structures into Self-Attention</a></p> \n<p><img src=\"6.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/yaushian/Tree-Transformer\" target=\"_blank\" rel=\"noopener\">https://github.com/yaushian/Tree-Transformer</a></p> \n<p><strong>论文解读：</strong><br><a href=\"https://godweiyang.com/2020/01/06/emnlp19-tree-transformer/\">https://godweiyang.com/2020/01/06/emnlp19-tree-transformer/</a></p> \n<p>本文和 Transformer 主要区别就是在每一层的 attention 之外还添加了一个成分 attention ，用来表示两个单词属于同一个短语之内的概率。最后总的 attention 就是原来的 attention 和成分 attention 做元素乘，这样的话同一个短语之间的 attention 就比较大，而不同短语之间的 attention 就很小。最后要想解码句法树的话，就还是用句法距离的算法，自顶向下解码句法树。</p> \n<h2 id=\"07\"><a href=\"#07\" class=\"headerlink\" title=\"07\"></a>07</h2>\n<p><a href=\"http://arxiv.org/abs/1909.02222\" title=\"EMNLP19: Multi-Granularity Self-Attention for Neural Machine Translation\" target=\"_blank\" rel=\"noopener\">Multi-Granularity Self-Attention for Neural Machine Translation</a></p> \n<p><img src=\"10.jpg\" alt></p> \n<p>本文提出了多粒度的 Self-Attention 网络，也就是把原始的 Transformer 中的不同的 head 变成了不同的粒度。将一个句子分成了多个不重叠的短语，然后用 CNN 之类网络得到每个短语的表示，然后把单词当作 query ，短语当作 key ，做 self-attention 得到每个单词的粗粒度上下文表示。不同的短语切分方式对应着不同的粒度，可以用 n-gram 方式切分短语，也可以用句法树的不同层来切分短语。最后把不同粒度的单词表示拼在一起就行了。</p> \n<h2 id=\"08\"><a href=\"#08\" class=\"headerlink\" title=\"08\"></a>08</h2>\n<p><a href=\"https://www.aclweb.org/anthology/P19-1030/\" title=\"ACL19: You Only Need Attention to Traverse Trees\" target=\"_blank\" rel=\"noopener\">You Only Need Attention to Traverse Trees</a></p> \n<p><img src=\"2.jpg\" alt></p> \n<p>这篇论文思想也不复杂，论文目的是要设计一个能够编码句法树的网络，最终得到句子的向量表示，来给下游任务用。对于成分句法树，某个结点的表示可以由它的所有子结点做 self-attention ，然后经过一系列变换得到。对于依存句法树，某个单词的表示可以由它的父亲单词和所有儿子单词做 self-attention ，然后经过一系列变换得到。其实网络结构整体上看和递归神经网络是很像的，只是结点的结合函数借用了 Transformer 中的 self-attention ，模型名字作者也称为了 Tree-Transformer 。</p> \n<h2 id=\"09\"><a href=\"#09\" class=\"headerlink\" title=\"09\"></a>09</h2>\n<p><a href=\"http://arxiv.org/abs/1908.00449\" title=\"CoRR19: Tree-Transformer: A Transformer-Based Method for Correction of Tree-Structured Data\" target=\"_blank\" rel=\"noopener\">Tree-Transformer: A Transformer-Based Method for Correction of Tree-Structured Data</a></p> \n<p><img src=\"9.jpg\" alt></p> \n<p>这篇文章并没有发出来，只是挂在了 arxiv 上，所以写的也是有很多错误的。主要提出了一个 Tree to Tree 的模型（类比 seq to seq 模型），按照 top-down 的顺序对一个句法树（或者代码的语法树等等）进行编码，然后 decoder 再按照 top-down 的顺序生成出一棵句法树。和普通的 Transformer 区别就是把中间的 feed-forward network 替换成了他这里的 tree conv block ，用来结合一个结点、它的父亲结点和所有兄弟结点的表示，如果没有的话就用零向量替代。</p> \n<h2 id=\"10\"><a href=\"#10\" class=\"headerlink\" title=\"10\"></a>10</h2>\n<p><a href=\"https://openreview.net/pdf?id=HJxK5pEYvr\" title=\"ICLR20: Tree-Structured Attention with Hierarchical Accumulation\" target=\"_blank\" rel=\"noopener\">Tree-Structured Attention with Hierarchical Accumulation</a></p> \n<p><img src=\"11.jpg\" alt></p> \n<p><strong>代码地址：</strong><br><a href=\"https://github.com/nxphi47/tree_transformer\" target=\"_blank\" rel=\"noopener\">https://github.com/nxphi47/tree_transformer</a></p> \n<p>这篇论文 reviewer #1 也说了，写的公式符号有点晦涩难懂，不是很清楚。结构复杂，如果不公开源码很难实现。反正我也是看得云里雾里的，一头雾水。大致思想就是用一个矩阵，列数正好就是句子长度，每一行就对应了句法树的一个结点，外加一行叶子结点。矩阵中某一行，如果对应结点子树包含了某个单词，那一列就是有结点的特征向量的，否则就是零向量。然后对矩阵先按行做累和，再按列做加权求和，最后得到每个结点的向量表示。然后就是怎么把它融入到 Transformer 中了，写的是真的晦涩难懂，有兴趣的去看原论文吧。</p> \n<h2 id=\"11\"><a href=\"#11\" class=\"headerlink\" title=\"11\"></a>11</h2>\n<p><a href=\"https://openreview.net/pdf?id=BJgQ4lSFPH\" title=\"ICLR20: StructBERT: Incorporating Language Structures into Pre-training for Deep Language Understanding\" target=\"_blank\" rel=\"noopener\">StructBERT: Incorporating Language Structures into Pre-training for Deep Language Understanding</a></p> \n<p><img src=\"12.jpg\" alt></p> \n<p><strong>论文解读：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/103207343\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/103207343</a></p> \n<p>这是阿里巴巴司罗老师团队改进的一种 BERT 模型，叫做 StructBERT 。主要就是在原本的 BERT 基础上新增加了两个预训练任务。一个是单词级别的，最大化长度为 K 的一段子句的正确词序的概率。一个是句子级别的，分为预测下一个句子、上一个句子和不同文档的随机句子三种。</p>', '2022-04-22 02:31:45', '1.8k', 8, 9708);
INSERT INTO `t_article` VALUES ('241a5bcd746b4e5bac2360593c05eded', '编程算法', 16, '【每日算法Day 102】美团 AI 平台算法工程师面试编程题', 'https://picsum.photos/1920/1080?random&rand=0.15962519371931538', '今天去尝试了一下美团 AI 平台，两次面试连一起。但是两位面试官小哥都是做推荐的，我们互相都不了解对方怎么做的。于是乎就做算法题，讲论文（把不懂的人讲懂确实困难），然后全程小哥给我介绍他们部门情况，我就挂机听着。不管这家拿不拿得到，就当刷', '<blockquote> \n <p>今天去尝试了一下美团 AI 平台，两次面试连一起。但是两位面试官小哥都是做推荐的，我们互相都不了解对方怎么做的。于是乎就做算法题，讲论文（把不懂的人讲懂确实困难），然后全程小哥给我介绍他们部门情况，我就挂机听着。不管这家拿不拿得到，就当刷刷经验吧，也挺不错的。一共三道题目，前两道一个最长上升子序列，一道快速排序，就不讲了，都是原题。</p> \n</blockquote> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p><strong>题目链接：</strong><br><a href=\"https://www.nowcoder.com/questionTerminal/1ea5b4eaeff841a4918931791b000756\" title=\"牛客网：分石子\" target=\"_blank\" rel=\"noopener\">牛客网：分石子</a></p> \n<p>牛牛有 <code>n</code> 堆石子堆，第 <code>i</code> 堆一共有 <code>a[i]</code> 个石子。</p> \n<p>牛牛可以对任意一堆石子数量大于 <code>1</code> 的石子堆进行分裂操作，分裂成两堆新的石子数量都大于等于 <code>1</code> 的石子堆。</p> \n<p>现在牛牛需要通过分裂得到 <code>m</code> 堆石子，他想知道这 <code>m</code> 堆石子的最小值最大可以是多少？</p> \n<p><strong>示例：</strong> </p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n3,5,[3,5,6]\n输出：\n2\n解释：\n把5分裂成2和3\n把6分裂成2和4\n得到五堆石子[3,2,3,2,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>备注：</strong></p> \n<ul> \n <li>$1 \\le n \\le 10^5, n \\le m \\le \\sum{a_i}, 1 \\le a_i \\le 10^9$</li> \n <li>第一个参数 <code>n</code> 代表石子堆的个数</li> \n <li>第二个参数 <code>m</code> 表示需要得到的石子堆数。</li> \n <li>第三个参数 <code>vector a</code> 代表每堆石子堆的石子个数</li> \n</ul> \n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>一拿到这个题目，就看出来这是一道二分答案的题目。</p> \n<p>首先定义上下界 <code>l = 1, r = min{a[i]}</code> ，也就是说，每一堆个数最小值至少为 <code>1</code> ，最多就是初始的时候最小的那堆个数。</p> \n<p>然后对于 <code>mid = (l + r) / 2</code> ，含义就是假设最终最小的那堆有 <code>mid</code> 个。我们求出初始时每一堆最多可以划分出多少个数全部大于等于 <code>mid</code> 的子堆，显然个数是 <code>a[i] / mid</code> 取整，记总堆数为 <code>cnt</code>。</p> \n<p>如果 <code>cnt &lt; m</code> ，那么说明 <code>mid</code> 太大了，你最多也不可能划分成 <code>m</code> 堆，所以更新 <code>r = mid - 1</code> 。如果 <code>cnt &gt; m</code> ，那么说明 <code>mid</code> 太小了，你能划分的堆数大于了 <code>m</code> ，那么更新 <code>l = mid + 1</code> 。最后如果 <code>cnt = m</code> ，你就暂存一下答案，因为这时的 <code>mid</code> 是有可能成为最终答案的。但是 <code>mid</code> 还是可能太小了，因为 <code>mid</code> 稍微大一点 <code>cnt</code> 是不会变的，所以继续更新 <code>l = mid + 1</code> 。</p> \n<p>最终返回暂存的答案 <code>res</code> 即可。注意这题的二分框架和之前做过的有所不同，在等号判断上得特别小心，我一开始没想清楚，错了好多次才通过的。</p> \n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 分石子\n     * @param n int整型 \n     * @param m long长整型 \n     * @param a int整型vector \n     * @return int整型\n     */</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n        ll l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ll mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            ll cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                l <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2019-10-11 22:30:07', '6.1k', 4, 6460);
INSERT INTO `t_article` VALUES ('245af6484b0a467a9d40868376911f4b', '编程算法', 24, 'cuBLAS矩阵乘法性能分析（附代码示例）', 'https://picsum.photos/1920/1080?random&rand=0.37418995349260575', '使用教程矩阵乘法是神经网络中最基础、最重要的一个运算。在用CUDA实现矩阵乘法时，不需要我们手动写，cuBLAS库提供了现成的矩阵乘法算子，例如cublasGemmEx和cublasLtMatmul。其中后者是轻量级版本，API调用更灵活。', '<h2 id=\"使用教程\"><a href=\"#使用教程\" class=\"headerlink\" title=\"使用教程\"></a>使用教程</h2>\n<p>矩阵乘法是神经网络中最基础、最重要的一个运算。在用CUDA实现矩阵乘法时，不需要我们手动写，<code>cuBLAS</code>库提供了现成的矩阵乘法算子，例如<code>cublasGemmEx</code>和<code>cublasLtMatmul</code>。其中后者是轻量级版本，API调用更灵活。例如对于整数乘法，<code>cublasLtMatmul</code>支持int8的输入输出，而<code>cublasGemmEx</code>只支持int8输入，int32输出。</p> \n<p>今天我只给大家讲解<code>cublasGemmEx</code>，主要使用起来相对更简洁一点。</p> \n<p>官方文档地址：<br><a href=\"https://docs.nvidia.com/cuda/cublas/index.html#cublas-GemmEx\" target=\"_blank\" rel=\"noopener\">https://docs.nvidia.com/cuda/cublas/index.html#cublas-GemmEx</a></p> \n<p>经过翻阅网上各种教程，我找到了一篇我认为写的最好的博客。例子举得非常好，写的很详细。地址如下：<br><a href=\"https://www.cnblogs.com/cuancuancuanhao/p/7763256.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/cuancuancuanhao/p/7763256.html</a></p> \n<p>具体的使用方法可以参见上面这篇博客，我这里就不再赘述了。</p> \n<p>今天我主要给大家演示一下，不同数据类型的矩阵乘法，速度和结果上到底有多大的差异？</p> \n<h2 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h2>\n<p>我写了一个简单的测试代码：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cuda_profiler_api.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cublas_v2.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cuda.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cuda_fp16.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cuda_runtime.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n\nint8_t <span class=\"token function\">float2int8</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    int8_t i <span class=\"token operator\">=</span> <span class=\"token function\">int8_t</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> i <span class=\"token operator\">=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> S<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">allocate_memory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span><span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span><span class=\"token operator\">*</span>B<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span><span class=\"token operator\">*</span>C<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cudaMallocManaged</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> m <span class=\"token operator\">*</span> k <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cudaMallocManaged</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> k <span class=\"token operator\">*</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cudaMallocManaged</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">,</span> m <span class=\"token operator\">*</span> n <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> S<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">free_memory</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>B<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span>C<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cudaFree</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cudaFree</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cudaFree</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> S<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">cublas_gemm_ex</span><span class=\"token punctuation\">(</span>cublasHandle_t handle<span class=\"token punctuation\">,</span> cublasOperation_t transA<span class=\"token punctuation\">,</span> cublasOperation_t transB<span class=\"token punctuation\">,</span>\n                   <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>B<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span>C<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lda<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> ldc<span class=\"token punctuation\">,</span>\n                   S <span class=\"token operator\">*</span>alpha<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span>beta<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> algo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cudaDataType_t AType<span class=\"token punctuation\">,</span> BType<span class=\"token punctuation\">,</span> CType<span class=\"token punctuation\">,</span> ComputeType<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>is_same<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        AType <span class=\"token operator\">=</span> BType <span class=\"token operator\">=</span> CType <span class=\"token operator\">=</span> ComputeType <span class=\"token operator\">=</span> CUDA_R_32F<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>is_same<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> __half<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        AType <span class=\"token operator\">=</span> BType <span class=\"token operator\">=</span> CType <span class=\"token operator\">=</span> ComputeType <span class=\"token operator\">=</span> CUDA_R_16F<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>is_same<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> int8_t<span class=\"token operator\">&gt;</span><span class=\"token operator\">::</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        AType <span class=\"token operator\">=</span> BType <span class=\"token operator\">=</span> CUDA_R_8I<span class=\"token punctuation\">;</span>\n        CType <span class=\"token operator\">=</span> ComputeType <span class=\"token operator\">=</span> CUDA_R_32I<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Not supported data type.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cublasStatus_t status<span class=\"token punctuation\">;</span>\n    status <span class=\"token operator\">=</span> <span class=\"token function\">cublasGemmEx</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span>\n                          transA<span class=\"token punctuation\">,</span>\n                          transB<span class=\"token punctuation\">,</span>\n                          m<span class=\"token punctuation\">,</span>\n                          n<span class=\"token punctuation\">,</span>\n                          k<span class=\"token punctuation\">,</span>\n                          alpha<span class=\"token punctuation\">,</span>\n                          A<span class=\"token punctuation\">,</span>\n                          AType<span class=\"token punctuation\">,</span>\n                          lda<span class=\"token punctuation\">,</span>\n                          B<span class=\"token punctuation\">,</span>\n                          BType<span class=\"token punctuation\">,</span>\n                          ldb<span class=\"token punctuation\">,</span>\n                          beta<span class=\"token punctuation\">,</span>\n                          C<span class=\"token punctuation\">,</span>\n                          CType<span class=\"token punctuation\">,</span>\n                          ldc<span class=\"token punctuation\">,</span>\n                          ComputeType<span class=\"token punctuation\">,</span>\n                          <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>cublasGemmAlgo_t<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>algo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> CUBLAS_STATUS_SUCCESS<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> S<span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>cublasHandle_t handle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>A<span class=\"token punctuation\">,</span> T <span class=\"token operator\">*</span>B<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span>C<span class=\"token punctuation\">,</span>\n               S <span class=\"token operator\">*</span>alpha<span class=\"token punctuation\">,</span> S <span class=\"token operator\">*</span>beta<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> algo<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> iteration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> total_time <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> iteration<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> timeval start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cudaDeviceSynchronize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cudaProfilerStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> success <span class=\"token operator\">=</span> <span class=\"token function\">cublas_gemm_ex</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span>\n                                     CUBLAS_OP_N<span class=\"token punctuation\">,</span>\n                                     CUBLAS_OP_N<span class=\"token punctuation\">,</span>\n                                     n<span class=\"token punctuation\">,</span>\n                                     m<span class=\"token punctuation\">,</span>\n                                     k<span class=\"token punctuation\">,</span>\n                                     B<span class=\"token punctuation\">,</span>\n                                     A<span class=\"token punctuation\">,</span>\n                                     C<span class=\"token punctuation\">,</span>\n                                     n<span class=\"token punctuation\">,</span>\n                                     k<span class=\"token punctuation\">,</span>\n                                     n<span class=\"token punctuation\">,</span>\n                                     alpha<span class=\"token punctuation\">,</span>\n                                     beta<span class=\"token punctuation\">,</span>\n                                     <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>cublasGemmAlgo_t<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>algo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cudaDeviceSynchronize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">cudaProfilerStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            total_time <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>total_time <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"algo %d: %.3f ms\\n\"</span><span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> total_time <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>iteration <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shape: (%d, %d) x (%d, %d)\\n\"</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> start_algo <span class=\"token operator\">=</span> CUBLAS_GEMM_DEFAULT<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> end_algo <span class=\"token operator\">=</span> CUBLAS_GEMM_ALGO23<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> start_algo_t_op <span class=\"token operator\">=</span> CUBLAS_GEMM_DEFAULT_TENSOR_OP<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> end_algo_t_op <span class=\"token operator\">=</span> CUBLAS_GEMM_ALGO15_TENSOR_OP<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> iteration <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>fA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fB<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>fC<span class=\"token punctuation\">;</span>\n    __half <span class=\"token operator\">*</span>hA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>hB<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>hC<span class=\"token punctuation\">;</span>\n    int8_t <span class=\"token operator\">*</span>iA<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>iB<span class=\"token punctuation\">;</span> int32_t <span class=\"token operator\">*</span>iC<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> f_alpha <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> f_beta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    __half h_alpha <span class=\"token operator\">=</span> <span class=\"token function\">__float2half_rn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> h_beta <span class=\"token operator\">=</span> <span class=\"token function\">__float2half_rn</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    int32_t i_alpha <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i_beta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">allocate_memory</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">allocate_memory</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>hC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">allocate_memory</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iA<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iB<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">*</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        hA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">__float2half_rn</span><span class=\"token punctuation\">(</span>fA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        iA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">float2int8</span><span class=\"token punctuation\">(</span>fA<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">*</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        fB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">255</span> <span class=\"token operator\">-</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">127</span><span class=\"token punctuation\">;</span>\n        hB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">__float2half_rn</span><span class=\"token punctuation\">(</span>fB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        iB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">float2int8</span><span class=\"token punctuation\">(</span>fB<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cublasHandle_t handle<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cublasCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test fp32 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> fA<span class=\"token punctuation\">,</span> fB<span class=\"token punctuation\">,</span> fC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo_t_op<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo_t_op<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> fA<span class=\"token punctuation\">,</span> fB<span class=\"token punctuation\">,</span> fC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>f_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test fp16 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> hA<span class=\"token punctuation\">,</span> hB<span class=\"token punctuation\">,</span> hC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo_t_op<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo_t_op<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> hA<span class=\"token punctuation\">,</span> hB<span class=\"token punctuation\">,</span> hC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>h_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test int8 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> iA<span class=\"token punctuation\">,</span> iB<span class=\"token punctuation\">,</span> iC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> algo <span class=\"token operator\">=</span> start_algo_t_op<span class=\"token punctuation\">;</span> algo <span class=\"token operator\">&lt;=</span> end_algo_t_op<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>algo<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">test_gemm</span><span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> iA<span class=\"token punctuation\">,</span> iB<span class=\"token punctuation\">,</span> iC<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i_alpha<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>i_beta<span class=\"token punctuation\">,</span> algo<span class=\"token punctuation\">,</span> iteration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare result &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fp32: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5f%c\"</span><span class=\"token punctuation\">,</span> fC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fp16: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5f%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>hC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int8: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5f%c\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>iC<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">127</span><span class=\"token operator\">/</span><span class=\"token number\">127</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">free_memory</span><span class=\"token punctuation\">(</span>iA<span class=\"token punctuation\">,</span> iB<span class=\"token punctuation\">,</span> iC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free_memory</span><span class=\"token punctuation\">(</span>fA<span class=\"token punctuation\">,</span> fB<span class=\"token punctuation\">,</span> fC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free_memory</span><span class=\"token punctuation\">(</span>hA<span class=\"token punctuation\">,</span> hB<span class=\"token punctuation\">,</span> hC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>代码保存为<code>test_gemm.cpp</code>，然后执行下面命令进行编译：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">nvcc test_gemm.cpp -o test_gemm -L/usr/local/cuda/lib64 -lcudart -lcuda -lcublas<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>最后执行<code>./test_gemm</code>运行就行了。</p> \n<p>这里计算的是$C = A \\cdot B$，其中$A$的维度是$(m, k)$，$B$的维度是$(k, n)$，$C$的维度是$(m, n)$。由于在C++和Python中新建的数组默认都是行优先存储，而cuBLAS计算矩阵乘法是默认是列优先存储。所以你新建的矩阵送到cuBLAS矩阵乘法算子后，它默认识别成了列优先存储。因此需要调整一下运算顺序，或者对矩阵进行转置。</p> \n<p>你需要记住一点，<strong>行优先存储的矩阵送到cuBLAS后，相当于做了一次转置，同样计算得到的矩阵$C$也是列优先存储的，你需要转置后再用行优先存储来正常读取。</strong>而根据矩阵的运算法则，我们有：<br>$$<br>C^{\\top} = (A \\cdot B)^{\\top} = B^{\\top} \\cdot A^{\\top}<br>$$<br>所以三个转置后的矩阵就不需要经过任何处理了，直接送到cuBLAS里计算就行了。</p> \n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2>\n<p>我对比了三种数据类型：<code>fp32</code>、<code>fp16</code>和<code>int8</code>，测试环境是V100显卡、CUDA 10.1。由于V100显卡没有int8的tensor core，所以速度并不能达到最快。要想全速进行int8的矩阵乘法，推荐使用<code>sm75</code>及以上的显卡，例如T4、A100等等。此外我还对比了不同的GEMM算法的效果。</p> \n<p>执行上面的运行命令后，会输出如下的结果：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">shape: (4096, 1024) x (1024, 8192)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test fp32 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nalgo -1: 4.831 ms\nalgo 2: 5.293 ms\nalgo 3: 5.406 ms\nalgo 4: 5.297 ms\nalgo 5: 5.098 ms\nalgo 6: 4.874 ms\nalgo 11: 4.870 ms\nalgo 18: 7.219 ms\nalgo 19: 6.061 ms\nalgo 20: 5.631 ms\nalgo 99: 1.110 ms\nalgo 100: 1.159 ms\nalgo 101: 1.688 ms\nalgo 102: 4.944 ms\nalgo 103: 4.744 ms\nalgo 104: 4.700 ms\nalgo 105: 4.679 ms\nalgo 106: 4.679 ms\nalgo 107: 4.675 ms\nalgo 108: 4.676 ms\nalgo 109: 4.677 ms\nalgo 110: 4.676 ms\nalgo 111: 4.676 ms\nalgo 112: 4.678 ms\nalgo 113: 4.675 ms\nalgo 114: 4.676 ms\nalgo 115: 4.689 ms\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test fp16 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nalgo -1: 2.423 ms\nalgo 1: 2.460 ms\nalgo 2: 2.565 ms\nalgo 3: 2.518 ms\nalgo 5: 2.398 ms\nalgo 6: 2.416 ms\nalgo 99: 0.737 ms\nalgo 100: 1.581 ms\nalgo 101: 1.032 ms\nalgo 102: 0.978 ms\nalgo 103: 0.767 ms\nalgo 104: 0.790 ms\nalgo 105: 0.803 ms\nalgo 106: 0.774 ms\nalgo 107: 2.656 ms\nalgo 108: 2.577 ms\nalgo 109: 2.518 ms\nalgo 110: 0.925 ms\nalgo 111: 0.951 ms\nalgo 112: 0.935 ms\nalgo 113: 0.909 ms\nalgo 114: 2.549 ms\nalgo 115: 2.532 ms\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; test int8 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nalgo -1: 1.232 ms\nalgo 0: 7.544 ms\nalgo 1: 1.217 ms\nalgo 2: 1.294 ms\nalgo 3: 2.362 ms\nalgo 99: 1.243 ms\nalgo 100: 1.244 ms\nalgo 101: 1.237 ms\nalgo 102: 1.232 ms\nalgo 103: 1.230 ms\nalgo 104: 1.224 ms\nalgo 105: 1.222 ms\nalgo 106: 1.224 ms\nalgo 107: 1.225 ms\nalgo 108: 1.224 ms\nalgo 109: 1.218 ms\nalgo 110: 1.217 ms\nalgo 111: 1.217 ms\nalgo 112: 1.218 ms\nalgo 113: 1.218 ms\nalgo 114: 1.216 ms\nalgo 115: 1.217 ms\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; compare result &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\nfp32: 52.38629 44.76633 37.65229 31.04420 24.94203 19.34578 14.25543 9.67102 5.59253 2.01996\nfp16: 52.46875 44.84375 37.40625 31.21875 24.95312 19.39062 14.28125 9.69531 5.61328 2.05078\nint8: 52.38626 44.76632 37.65230 31.04421 24.94203 19.34577 14.25544 9.67103 5.59254 2.01996<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里简单解释一下，algo -1到23表示不使用tensor core算法的结果，algo 99到115表示使用tensor core算法的结果。</p> \n<p>可以看到图中缺失了一部分算法的结果，因为那些算法可能不适用于当前的矩阵乘法，因此报错了。</p> \n<p>汇总一下各自最快的结果（不使用vs使用tensor core）：</p> \n<ul> \n <li>fp32: 4.83 1.11</li> \n <li>fp16: 2.41 0.73</li> \n <li>int8: 1.21 1.21</li> \n</ul> \n<p>由于V100显卡没有int8的tensor core，所以int8的两个结果是相同的。结果也符合我们的预期，速度上fp32慢于fp16慢于int8。所以在实际的深度学习应用中，流行使用混合精度，也就是用fp16来进行训练和推理。</p> \n<p>而int8是速度最快的，所以如果训练和推理也都能使用int8的话，速度上将会迈上一个新的台阶。</p> \n<p>那么一个浮点数的矩阵乘法怎么转变为整数的矩阵乘法呢？这里我不会详细讲，后续会出一个详细的量化教程。</p> \n<p>简单来说，对于一个浮点数$f$，假设范围在$[-1, 1]$之间，那我们可以将它表示成一个$[-127, 127]$之间的8位整数$i$，转换关系为：<br>$$<br>f = i / 127<br>$$<br>那么浮点数矩阵乘法$f_3 = f_1 \\cdot f_2$就可以表示为：<br>$$<br>f_3 = f_1 \\cdot f_2 = i_1 \\cdot i_2 / 127^2<br>$$<br>所以只需要计算int8矩阵乘法$i_1 \\cdot i_2$，然后得到int32类型的输出结果之后，除以$127^2$就可以得到原始的浮点数结果了。</p> \n<p>那么由于这里有个类型转换的操作，所以会产生误差。但是在我们的样例中，int8的误差竟然比fp16还要小很多，结果和fp32几乎一模一样。这主要由于是我构造的矩阵数据分布非常均匀有规律，因此计算误差会很小，实际深度网络中int8的误差会较大。</p> \n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2>\n<p>int8甚至更低比特的量化的实际收益非常大，提速可以达到将近2倍。虽然现在有很多现成的自动量化工具，但是效果上或多或少都有一定的损失，速度上也没有达到极致。因此今后量化是一个不错的方向，值得一试。</p>', '2022-04-22 18:53:50', '9.0k', 2, 7209);
INSERT INTO `t_article` VALUES ('24e99f8b523a432d868631a25ada2c97', '编程算法', 5, '【每日算法Day 100】字节跳动 AI Lab 面试编程题（三道）', 'https://picsum.photos/1920/1080?random&rand=0.7619297487366967', '今天连着面了两次字节跳动，勉强撑到了明天三面。一共三道编程题，做的很烂，这里分享一下。 第一题给出一条长度为 L 的线段，除了头和尾两个点以外，上面还有 n 个整数点，需要在上面再放 k 个新的点，使得相邻的两个点之间的最大距离最小，求', '<blockquote> \n <p>今天连着面了两次字节跳动，勉强撑到了明天三面。一共三道编程题，做的很烂，这里分享一下。</p> \n</blockquote> \n<h2 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h2>\n<p>给出一条长度为 <code>L</code> 的线段，除了头和尾两个点以外，上面还有 <code>n</code> 个整数点，需要在上面再放 <code>k</code> 个新的点，使得相邻的两个点之间的最大距离最小，求这个最小的距离。</p> \n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>我当时太紧张了，真是脑抽了，还想着弄个优先队列，划分最大的，然后丢进去，再划分最大的，但是是错的。</p> \n<p>正确解法小姐姐走了我才想起来，二分答案 <code>m</code> ，然后扫描一遍判断将每一段划分成小于等于 <code>m</code> 的一共需要多少次。如果次数大于 <code>k</code> ，说明 <code>m</code> 太短了，否则说明 <code>m</code> 太长了。</p> \n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>L<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    a<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> L<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> l <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h2>\n<p>给出一个数组 <code>A</code>，找到最大的 <code>A[i] - A[j]</code>，要求 <code>i &gt; j</code>。</p> \n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>这题很简单，直接遍历每个 <code>A[i]</code>，维护它前面最小的那个数 <code>minn</code>，然后求出最大的 <code>A[i] - minn</code> 就行了。</p> \n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> minn <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> INT_MIN<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        minn <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>minn<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h2>\n<p>给定一个字符串，对该字符串进行删除操作，保留 <code>k</code> 个字符且相对位置不变，使字典序最小。</p> \n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>这题也脑抽了，想了一堆方法，<code>dp</code> 复杂度太高，线段树太麻烦，最后用 <code>map</code> 勉强写了一下。</p> \n<p>主要思想是这样的，最后要保留 <code>k</code> 个字符，那么第一个字符只能在下标 <code>0 ~ n-k</code> 中寻找，那肯定找最小的啊，如果有多个就找最前面那个，把它的位置记为 <code>pos</code>。</p> \n<p>然后第二个字符肯定得在下标 <code>pos ~ n-k+1</code> 中寻找，还是一样的思路，找到以后更新 <code>pos</code> 位置，依次找下去找到 <code>k</code> 个为止。</p> \n<p>所以我就利用了 <code>map</code> 的特性，把寻找窗口内的字符个数做一下统计，然后取出 <code>map</code> 中的第一个字符就是字典序最小的了，次数减一，如果减到 0 了就删除掉。</p> \n<p>然后从 <code>pos</code> 位置开始遍历，直到第一个等于你刚刚取出的字符为止，更新 <code>pos</code> 位置。</p> \n<p>最终的时间复杂度是 $O(n \\log n + n \\log k)$ ，可以直接看作 $O(n \\log n)$ 。</p> \n<p><strong>最优解：</strong></p> \n<p>最优解当时没想出来，是用单调栈。维护一个递增的单调栈，我们的目标是保留 <code>k</code> 个字符，也就是删除 <code>n-k</code> 个字符。</p> \n<p>那么如果栈顶元素大于当前遍历元素，并且还没删够 <code>n-k</code> 个，就出栈，当作删除了一个元素。否则的话如果删够了，不管大小关系统统入栈，因为你没法删了。</p> \n<p>最后全遍历完了，如果还没删够，那就继续出栈，直到删够为止。最后把栈里的字符拼接成一个字符串就是答案了。</p> \n<p>时间复杂度是 $O(n)$ 的。</p> \n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstring <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">-</span>k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    string res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>first<span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                pos <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> s <span class=\"token operator\">&gt;&gt;</span> k<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>最优解：</strong></p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstring <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    k <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> k<span class=\"token punctuation\">;</span>\n    stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    string res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> k<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> s <span class=\"token operator\">&gt;&gt;</span> k<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-09-07 01:50:00', '7.5k', 11, 6263);
INSERT INTO `t_article` VALUES ('254732ecec04478cb4cecb1b6ec07ff5', '随笔', 1, '每日心情（2020.10.19）', 'https://picsum.photos/1920/1080?random&rand=0.17957781964167396', '没有别的意思，只是又到了网抑云时间了。 每天的生活还是那么重复而又单调。 早上九点半起床，10点多到公司。 工作两小时不到吃午饭，中午看看直播，两点又开始下午的工作。 7点开始吃晚饭，吃完要么回去打游戏，要么有事继续工作到九点十点回去，', '<blockquote> \n <p>没有别的意思，只是又到了网抑云时间了。</p> \n</blockquote> \n<p>每天的生活还是那么重复而又单调。</p> \n<p>早上九点半起床，10点多到公司。</p> \n<p>工作两小时不到吃午饭，中午看看直播，两点又开始下午的工作。</p> \n<p>7点开始吃晚饭，吃完要么回去打游戏，要么有事继续工作到九点十点回去，回去依旧是看直播。</p> \n<p>这么看起来每天确实挺无聊的，每天晚上都盼望着早点回去，但是回去又不知道干什么。</p> \n<p>有时候能约上几个同学打两把游戏，但也总感觉是在虚度光阴，挺无趣的。</p> \n<p>有时候吧干脆就没人打游戏，只能听听歌，看看直播，对着电脑傻傻的发呆，没错，就像现在我这样。</p> \n<p>以前在宿舍吧，还能有人说说话，聊聊八卦扯扯淡，不知不觉也就到了睡觉的时间了。</p> \n<p>现在一个人在外，说话的人也没一个，几千的手机响都不响。</p> \n<p>最近可能要转正答辩了，这两天在忙活做ppt，还得审两篇论文。</p> \n<p>如果要我自己评价一下这五个多月以来自己的工作表现，我只能说问心无愧，学到了很多，虽然还有很多缺憾，但我尽力了。</p> \n<p>其实挺想转正了之后找个女朋友的，但我知道，现实是不会有太大改变的，懒还是懒，现实还是现实。</p> \n<p>工作了圈子小了很多，以后估计找起来难度比在学校大了不少。</p> \n<p>都说很多男生嘴上嚷嚷着要脱单，实际上一点行动都没有，确实。</p> \n<p>年纪大了，很多择偶要求都变了，好看，高学历，体贴，善解人意，不矫情，不异地，现实，都满足是不可能的。</p> \n<p>但归根到底还是想找个能对上眼的，现实，不矫情，不异地，这些还是最重要的，越来越务实了吧。</p> \n<p>又凌晨一点了，每天都想早点睡，每天都忍不住熬夜，不知道怎样才能改变。</p> \n<p>明天依旧是社畜的一天，后面还有毕业论文，还有好多好多。</p> \n<p>写的没有一点逻辑，是我边看直播边写的，想到哪写到哪，心情表达出来了，孤寂，无聊，抑郁。</p> \n<p>很多人开玩笑说我是海王，通讯录里妹子多的是，确实挺多的。</p> \n<p>但谁知道实则却是个寡王，没有置顶，首页都是群消息，偶尔来消息，一看是来请教问题的。</p> \n<p>几年的写博客，搞营销，确实加了不少人，实际作用寥寥无几，名声有了，仅此而已。</p> \n<p>也想过通讯录找个看上眼的，但又太现实，最后都会想到不合适，于我，于她。</p> \n<p>认识新的人不难，了解新的人太累，还是幻想着熟人里成一个多省事，做梦。</p> \n<p>也挺怪的，感情这方面，挺敏锐的，但也只是观察别人，谁谁谁又分分合合了，适合去做狗仔队。</p> \n<p>理论看了一堆，段子听了无数，动起手来唯唯诺诺。</p> \n<p>算了该睡了，最后一把直播，看完一定睡，一定不。</p> \n<p>说是看直播，实际上什么技术都没学到，看的还是一个寂寞。</p> \n<p>晚安。</p>', '2021-02-20 12:01:20', '8.3k', 10, 7458);
INSERT INTO `t_article` VALUES ('2a8a4dbc13304c658e4499396b38fde3', '编程算法', 27, '每日算法系列【LeetCode 829】连续整数求和', 'https://picsum.photos/1920/1080?random&rand=0.354179107110175', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个正整数 N ，试求有多少组连续正整数满足所有数字之和为 N ? 示例1 输入： 5 输出： 2 解释： 5 = 5 = 2 + 3，共有两组连续整数([5],[2,3]', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个正整数 N ，试求有多少组连续正整数满足所有数字之和为 N ?</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n5\n输出：\n2\n解释：\n5 = 5 = 2 + 3，共有两组连续整数([5],[2,3])求和后为 5。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n9\n输出：\n3\n解释：\n9 = 9 = 4 + 5 = 2 + 3 + 4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n15\n输出：\n4\n解释：\n15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= N &lt;= 10^9</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是一道非常经典的数学题，挺基础的，不知道为什么这也能算困难难度的题目？</p> \n<h3 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h3>\n<p>遍历所有的连续数字区间 (i, j) ，然后求和看等不等于 N 。这种方法时间复杂度是 $O(n^2)$ ，显然不可行。</p> \n<h3 id=\"暴力法优化\"><a href=\"#暴力法优化\" class=\"headerlink\" title=\"暴力法优化\"></a>暴力法优化</h3>\n<p>遍历所有的连续数字区间的左端点 i。然后假设区间长度为 n ，那么根据求和公式有 (2i+n-1)n/2=N ，然后只需要看这个方程的解是否是整数就行。时间复杂度可以降到 $O(n)$ ，但还是太高了。</p> \n<h3 id=\"数学方法\"><a href=\"#数学方法\" class=\"headerlink\" title=\"数学方法\"></a>数学方法</h3>\n<p>根据上面的求和公式，对于起点 i 和长度 n ，求和得到 (2i+n-1)n/2=N 。我们可以先粗略推算一下 i 和 n 的范围，起点 i 的范围是 [1, N]毋庸置疑，而区间长度 n 的范围就可以考究一下了，一个出发点是：上面式子可以解出 i=(N-n(n-1)/2)/n ，而 i&gt;=1 ，可以解出 (n+1)n&lt;=2N ，所以 n 的范围其实只有根号 N 级别，可以直接遍历。另一个出发点是最小的 n 个数加起来就是 1 加到 n 等于 n(n+1)/2 ，这个要小于等于 N ，解出来也是 (n+1)n&lt;=2N 。</p> \n<p>所以我们只需要从 1 开始遍历 n ，直到 (n+1)n&gt;2N 为止，然后判断 (N-n(n-1)/2)/n 是否是整数就行了（前面终止条件可以保证 i 一定大于 0 ）。</p> \n<p>最终时间复杂度降到了 $O(\\sqrt(N))$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"数学方法（c-）\"><a href=\"#数学方法（c-）\" class=\"headerlink\" title=\"数学方法（c++）\"></a>数学方法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">consecutiveNumbersSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>N <span class=\"token operator\">-</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数学方法（python）\"><a href=\"#数学方法（python）\" class=\"headerlink\" title=\"数学方法（python）\"></a>数学方法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">consecutiveNumbersSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> N<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> N<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> N<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>N <span class=\"token operator\">-</span> n <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题还可以用质因数分解等方法进一步优化，但是没有必要。</p>', '2021-04-11 14:53:18', '6.7k', 10, 6376);
INSERT INTO `t_article` VALUES ('2af1f9404ec249569540080078afd3be', '编程算法', 13, '【每日算法Day 97】经典面试题：求两个数组最小差', 'https://picsum.photos/1920/1080?random&rand=0.18746324948930604', '题目链接LeetCode 面试题 16.06. 最小差 题目描述给定两个整数数组 a 和 b，计算具有最小差绝对值的一对数值（每个数组中取一个值），并返回该对数值的差。 说明： 1 &lt;= a.length, b.length &lt;', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/smallest-difference-lcci/\" title=\"LeetCode 面试题 16.06. 最小差\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 16.06. 最小差</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定两个整数数组 <code>a</code> 和 <code>b</code>，计算具有最小差绝对值的一对数值（每个数组中取一个值），并返回该对数值的差。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= a.length, b.length &lt;= 100000</code></li> \n <li><code>-2147483648 &lt;= a[i], b[i] &lt;= 2147483647</code></li> \n <li>正确结果在区间 <code>[-2147483648, 2147483647]</code> 内</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n{1, 3, 15, 11, 2}, {23, 127, 235, 19, 8}\n输出:\n3，即数值对(11, 8)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先最暴力的方法就是 $O(n^2)$ 暴力枚举两个数组中的所有数对，然后计算绝对值最小的差值，这样显然是会超时的。</p> \n<p>所以我们先分别对两个数组从小到大进行排序，然后用双指针的方法来计算。</p> \n<ul> \n <li>初始的时候 $i = 0, j = 0$ 分别指着两个数组的第一个元素。</li> \n <li>然后计算 $a[i]-b[j]$ 的绝对值，如果比当前最小值还要小，就更新最小值。</li> \n <li>然后判断 $a[i]$ 和 $b[j]$ 的大小关系。如果 $a[i] &gt; b[j]$ ，那么如果增大 $i$ ，差值只会越来越大，所以只能增大 $j$ 。同理如果 $a[i] &lt; b[j]$ ，那就增大 $i$ 。</li> \n <li>最后如果其中一个数组遍历完了就结束遍历。</li> \n</ul> \n<p>是不是有点类似归并排序的合并数组过程？但是这里有个区别，最后遍历完之后，一定会有某个数组还没遍历完。而那些没遍历的数字其实都大于另一个数组中最大的数，所以没有必要再和另一个数组最大值做差值了。这样差值只会越来越大，没有意义。</p> \n<p>最终的时间复杂度就是 $O(n \\log n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">smallestDifference</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">smallestDifference</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        a<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        b<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2147483647</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">and</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> abs<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> j <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2019-11-26 08:59:29', '8.2k', 10, 4278);
INSERT INTO `t_article` VALUES ('2dae7c58958b4ae2b4f9e717a9dffb0c', '编程算法', 19, '【每日算法Day 76】经典面试题：中序遍历的下一个元素，5大解法汇总！', 'https://picsum.photos/1920/1080?random&rand=0.7207694871050488', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题 04.06. 后继者 题目描述设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。 如果指定节点没有对应的“下一个”节点，则返回', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/successor-lcci/\" title=\"LeetCode 面试题 04.06. 后继者\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 04.06. 后继者</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>设计一个算法，找出二叉搜索树中指定节点的“下一个”节点（也即中序后继）。</p> \n<p>如果指定节点没有对应的“下一个”节点，则返回 null。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nroot = [2,1,3], p = 1\n  2\n / \\\n1   3\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nroot = [5,3,6,2,4,null,null,1], p = 6\n      5\n     / \\\n    3   6\n   / \\\n  2   4\n /   \n1\n输出：\nnull<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"BST-递归\"><a href=\"#BST-递归\" class=\"headerlink\" title=\"BST+递归\"></a>BST+递归</h3>\n<p>首先本题中的二叉树还是个二叉搜索树，也就是中序遍历是单调递增的，所以我们可以利用这个性质来简化查找过程。</p> \n<ul> \n <li>如果结点 <code>p</code> 的值大于等于 <code>root</code> 的值，说明 <code>p</code> 的后继结点在 <code>root</code> 右子树中，那么就递归到右子树中查找。</li> \n <li>如果结点 <code>p</code> 的值小于 <code>root</code> 的值，说明 <code>p</code> 在 <code>root</code> 左子树中，而它的后继结点有两种可能，要么也在左子树中，要么就是 <code>root</code>：\n  <ul> \n   <li>如果左子树中找到了后继结点，那就直接返回答案。</li> \n   <li>如果左子树中没有找到后继结点，那就说明 <code>p</code> 的右儿子为空，那么 <code>root</code> 就是它的后继结点。</li> \n  </ul> </li> \n</ul> \n<h3 id=\"BST-非递归\"><a href=\"#BST-非递归\" class=\"headerlink\" title=\"BST+非递归\"></a>BST+非递归</h3>\n<ul> \n <li>如果 <code>p</code> 有右儿子，那么它的后继结点就是右子树的最左边的儿子。</li> \n <li>如果 <code>p</code> 没有右儿子，那么它的后继结点就是，沿着 <code>p</code> 往上到 <code>root</code> 的路径中，第一个左儿子在路径上的结点。因为这个结点的左子树中 <code>p</code> 是最右边的结点，是最大的，所以它就是 <code>p</code> 的后继结点。因为是二叉搜索树，我们就可以从根结点开始往 <code>p</code> 走，根据结点值的大小决定走的方向。</li> \n</ul> \n<h3 id=\"一般树-递归\"><a href=\"#一般树-递归\" class=\"headerlink\" title=\"一般树+递归\"></a>一般树+递归</h3>\n<p>那如果是一般的二叉树，中序遍历就不满足单调递增了，这时候我们就只能找出中序遍历的结点顺序，然后才能得到 <code>p</code> 的后继结点。</p> \n<p>所以我们直接采用递归来做中序遍历就行了，中序遍历结果保存下来，最后取 <code>p</code> 的下一个结点。</p> \n<h3 id=\"一般树-非递归\"><a href=\"#一般树-非递归\" class=\"headerlink\" title=\"一般树+非递归\"></a>一般树+非递归</h3>\n<p>当然还可以采用栈来做中序遍历，这样就是非递归了。同样结果保存下来，最后取 <code>p</code> 的下一个结点。</p> \n<h3 id=\"一般树-Morris遍历\"><a href=\"#一般树-Morris遍历\" class=\"headerlink\" title=\"一般树+Morris遍历\"></a>一般树+Morris遍历</h3>\n<p>如果看过我前两天的一道关于二叉搜索树的题解：<br><a href=\"https://godweiyang.com/2020/03/18/leetcode-99/\" title=\"【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！\">韦阳的博客：【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！</a></p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/114143194\" title=\"【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！\" target=\"_blank\" rel=\"noopener\">知乎专栏：【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！</a></p> \n<p>那么你一定会知道这个 Morris 遍历算法，用常数空间来解决结点无法访问父结点的问题。这里就不细讲了，请直接看之前的题解。方法是一样的，用 Morris 遍历得到中序遍历，然后遍历一遍找到 <code>p</code> ，输出它的下一个结点就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"BST-递归（c-）\"><a href=\"#BST-递归（c-）\" class=\"headerlink\" title=\"BST+递归（c++）\"></a>BST+递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> p <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val <span class=\"token operator\">&gt;=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            TreeNode<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> left <span class=\"token operator\">?</span> left <span class=\"token operator\">:</span> root<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"BST-非递归（c-）\"><a href=\"#BST-非递归（c-）\" class=\"headerlink\" title=\"BST+非递归（c++）\"></a>BST+非递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            p <span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        TreeNode<span class=\"token operator\">*</span> res <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val <span class=\"token operator\">&lt;</span> p<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"一般树-递归（c-）\"><a href=\"#一般树-递归（c-）\" class=\"headerlink\" title=\"一般树+递归（c++）\"></a>一般树+递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span> <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">inorder</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"一般树-非递归（c-）\"><a href=\"#一般树-非递归（c-）\" class=\"headerlink\" title=\"一般树+非递归（c++）\"></a>一般树+非递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            root <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"一般树-Morris遍历（c-）\"><a href=\"#一般树-Morris遍历（c-）\" class=\"headerlink\" title=\"一般树+Morris遍历（c++）\"></a>一般树+Morris遍历（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    TreeNode<span class=\"token operator\">*</span> <span class=\"token function\">inorderSuccessor</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">,</span> TreeNode<span class=\"token operator\">*</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        TreeNode <span class=\"token operator\">*</span>rightmost <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rightmost <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">&amp;&amp;</span> rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rightmost <span class=\"token operator\">=</span> rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">!=</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    rightmost<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n                    root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                root <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 11:11:48', '6.8k', 4, 1164);
INSERT INTO `t_article` VALUES ('2ddc0e247e37454fb40866fa627cd65c', '深度学习', 2, '论文赏析【EMNLP19】多粒度自注意力机制（MG-SA）', 'https://picsum.photos/1920/1080?random&rand=0.28416198338474663', '关注公众号【算法码上来】，每日算法干货马上就来！ 论文地址Multi-Granularity Self-Attention for Neural Machine Translation 介绍现在主流的机器翻译模型基本都是采用多头注意力', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"论文地址\"><a href=\"#论文地址\" class=\"headerlink\" title=\"论文地址\"></a>论文地址</h2>\n<p><a href=\"http://arxiv.org/abs/1909.02222\" title=\"Multi-Granularity Self-Attention for Neural Machine Translation\" target=\"_blank\" rel=\"noopener\">Multi-Granularity Self-Attention for Neural Machine Translation</a></p> \n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>\n<p>现在主流的机器翻译模型基本都是采用多头注意力机制来对句子进行编码解码，但是有一些研究表明，这么多 head 其实并不是都有用的，有些 head 的信息是冗余的，所以本文就想充分利用一下这些冗余的 head 。</p> \n<p>此外，统计机器翻译的研究也表明了，对短语的翻译效果可能要好于对单个单词的翻译，所以本文将一些 head 用来建模短语（比如 2-gram 或者 3-gram）。</p> \n<p>最后本文在两个翻译任务（WMT14 英译德和 NIST 中译英）上做了实验，效果都要好于普通的 Transformer ，但是运行速度上慢了许多。</p> \n<h2 id=\"多粒度自注意力机制（MG-SA）\"><a href=\"#多粒度自注意力机制（MG-SA）\" class=\"headerlink\" title=\"多粒度自注意力机制（MG-SA）\"></a>多粒度自注意力机制（MG-SA）</h2>\n<h3 id=\"整体框架\"><a href=\"#整体框架\" class=\"headerlink\" title=\"整体框架\"></a>整体框架</h3>\n<p>首先将单词级别的输入 $H = h_1, \\ldots, h_n \\in \\mathbb{R}^{n \\times d}$ 映射为短语级别的表示 $H_g \\in \\mathbb{R}^{p \\times d_g}$：<br>$$<br>H_g = F_h(H)<br>$$<br>其中 $F_h$ 是第 $h$ 个 head 对应的映射函数，针对不同的短语粒度有不同的映射函数。而 $p$ 是短语的个数，不同粒度个数也是不同的。</p> \n<p>然后对于第 $h$ 个 head 来说，将 $H, H_g, H_g$ 分别做线性变换，得到自注意力机制的 query、key 和 value：<br>$$<br>Q^h, K^h, V^h = HW^h_Q, H_gW^h_K, H_gW^h_V<br>$$<br>这样三种向量都被映射到了相同的维度：$Q_h \\in \\mathbb{R}^{n \\times d_h}, K_h \\in \\mathbb{R}^{p \\times d_h}, V_h \\in \\mathbb{R}^{p \\times d_h}$ 。</p> \n<p>接着做 self-attention 得到每个单词的输出：<br>$$<br>O^h = \\text{ATT}(Q^h, K^h)V^h<br>$$<br>最后将 $N$ 个 head 输出拼接起来得到了最后的输出：<br>$$<br>\\text{MG-SA}(H) = [O^1, \\ldots, O^N]<br>$$</p> \n<h3 id=\"短语划分\"><a href=\"#短语划分\" class=\"headerlink\" title=\"短语划分\"></a>短语划分</h3>\n<p>短语划分有两种方式，一种是 n-gram ，一种是根据句法树划分。n-gram 划分方式就是将句子 $x$ 等分为 $M$ 个短语得到 $P_x = (p_1, \\ldots. p_M)$ 。而句法树划分就是按照句法树的不同层次得到不同粒度的短语，如下图所示：<br><img src=\"1.png\" alt><br>绿色框是第一层，有 2 个短语，粒度比较大。红色框是第二层，有 4 个短语，粒度小一点。</p> \n<h3 id=\"短语组合\"><a href=\"#短语组合\" class=\"headerlink\" title=\"短语组合\"></a>短语组合</h3>\n<p>每个短语 $p_m$ 的表示可以用不同的网络来得到：<br>$$<br>g_m = \\text{COM}(p_m)<br>$$<br>这里 $\\text{COM}$ 函数可以用 CNN、LSTM 或者自注意力网络（SAN）。</p> \n<p>最后所有短语的表示记为 $G_x = (g_1, \\ldots, g_M)$ 。</p> \n<h3 id=\"短语交互\"><a href=\"#短语交互\" class=\"headerlink\" title=\"短语交互\"></a>短语交互</h3>\n<p>这些短语之间也像单词一样做一下上下文表示，效果可能会更好：<br>$$<br>H_g = \\text{REC}(G_x)<br>$$<br>这里 $\\text{REC}$ 可以选择 LSTM 或者编码结构能力好的 <a href=\"http://arxiv.org/abs/1810.09536\" title=\"Ordered Neurons: Integrating Tree Structures into Recurrent Neural Networks\" target=\"_blank\" rel=\"noopener\">ON-LSTM</a> 。</p> \n<p>最后如下图所示，通过<strong>短语划分</strong>、<strong>短语组合</strong>、<strong>短语交互</strong>，模型得到了不同粒度的各个短语表示：<br><img src=\"2.png\" alt></p> \n<h3 id=\"损失函数\"><a href=\"#损失函数\" class=\"headerlink\" title=\"损失函数\"></a>损失函数</h3>\n<p>这里添加了一个辅助任务用来增强效果：短语标签预测。也就是对于 $G_x = (g_1, \\ldots, g_M)$ 而言，在句法树中对应着 $M$ 个短语标签 $T_x = (t_1, \\ldots, t_M)$ 。然后用一个线性变换接 softmax 来预测标签的概率：<br>$$<br>p = softmax(W_t g_i + b_t)<br>$$<br>最后标签预测的损失函数就是：<br>$$<br>\\mathcal{L}_{tag} = -\\sum_{i=1}^M{t_i \\log p(t_i)}<br>$$</p> \n<p>最终的损失函数还得再加上机器翻译的损失：<br>$$<br>\\mathcal{L} = -\\sum_{i=1}^L{y_i \\log P(y_i)} + \\lambda \\mathcal{L}_{tag}<br>$$<br>这里的 $y_i$ 就是机器翻译的输出单词，$\\lambda$ 在实验中设置为了 $0.001$。</p> \n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2>\n<p>模型是在 Transformer 基础上修改的，把四分之一的 head 还用来做单词级别的 self-attention 。对于 n-gram 划分来说，四分之三的 head 分别用来做 2-gram、3-gram 和 4-gram 短语的 self-attention 。对于句法树短语划分来说，四分之三的 head 正好对应了最高的三层短语的 self-attention 。</p> \n<p>实验主要得出了三点结论，如果不想看细节的，可以只看结论了：</p> \n<ul> \n <li>融入了 MG-SA 的 Transformer 的确提高了机器翻译的 BLUE 得分。</li> \n <li>MG-SA 确实可以促进目标短语的生成。</li> \n <li>MG-SA 确实可以捕捉到不同粒度的短语信息。</li> \n</ul> \n<h3 id=\"不同短语组合策略\"><a href=\"#不同短语组合策略\" class=\"headerlink\" title=\"不同短语组合策略\"></a>不同短语组合策略</h3>\n<p><img src=\"3.jpg\" alt><br>可以看出三种策略效果都比普通的 Transformer 好，SAN 的效果最好，所以后面实验都用 SAN 。</p> \n<h3 id=\"不同-encoder-层\"><a href=\"#不同-encoder-层\" class=\"headerlink\" title=\"不同 encoder 层\"></a>不同 encoder 层</h3>\n<p><img src=\"4.jpg\" alt><br>MG-SA 用的层数越低效果越好，只用在最低层上效果最好（可能是因为直接和单词表示接触，对短语建模更有利），所以后面实验都只用到最低层上。</p> \n<h3 id=\"短语划分、标签监督和短语交互策略影响\"><a href=\"#短语划分、标签监督和短语交互策略影响\" class=\"headerlink\" title=\"短语划分、标签监督和短语交互策略影响\"></a>短语划分、标签监督和短语交互策略影响</h3>\n<p><img src=\"5.jpg\" alt><br>这个也不用过多解释，说明了句法树划分短语比 n-gram 划分短语效果好，短语标签预测辅助任务确实有用，用 ON-LSTM 融合短语确实要更好。</p> \n<h3 id=\"输出-n-gram-性能提升\"><a href=\"#输出-n-gram-性能提升\" class=\"headerlink\" title=\"输出 n-gram 性能提升\"></a>输出 n-gram 性能提升</h3>\n<p><img src=\"6.jpg\" alt><br>通过对翻译结果的 n-gram 的 BLEU 得分进行分析，可以看出几种 MG-SA 的变体效果都是好于普通的 Transformer 的，说明了确实可以促进目标短语的生成。</p> \n<h3 id=\"主要结果\"><a href=\"#主要结果\" class=\"headerlink\" title=\"主要结果\"></a>主要结果</h3>\n<p><img src=\"7.jpg\" alt><br>无论是 Transformer 的 base 还是 large 版本，加上 MG-SA 之后效果都有较大提升，base 版本加上去之后效果甚至逼近了 large 版本，同时参数量并没有多太多。</p> \n<h3 id=\"attention-可视化\"><a href=\"#attention-可视化\" class=\"headerlink\" title=\"attention 可视化\"></a>attention 可视化</h3>\n<p><img src=\"8.jpg\" alt><br>可以看出，普通的 Transformer（左边）每个词主要聚焦于前后一个词和句子结束标记，而 MG-SA 则大多聚焦于句子的关键词“三峡工程”和“首要任务”。</p> \n<h3 id=\"多粒度标签预测任务\"><a href=\"#多粒度标签预测任务\" class=\"headerlink\" title=\"多粒度标签预测任务\"></a>多粒度标签预测任务</h3>\n<p><img src=\"9.jpg\" alt><br>做了 5 个探测任务：Voice（主动被动）、Tense（时态）、TSS（根结点下层标签序列预测）、SPC（单词的最小包含短语标签）和 POS（词性标注）。</p> \n<p>模型就是在 MG-SA 的 encoder 上面接了一个 MLP ，然后做分类。encoder 分为两种，一种是固定参数，用 NMT 训练好的 encoder ，一种是重新训练 encoder 。</p> \n<p>主要得到以下几点结论：</p> \n<ul> \n <li>重新训练 encoder 结果比直接用 NMT 的 encoder 效果提升大（除了 SPC 和 POS）。</li> \n <li>用句法树划分短语效果比 n-gram 划分短语效果好。</li> \n <li>用 NMT 的 encoder 时，只有 SPC 和 POS 效果提升大（主要这两个任务粒度小，都是单词级别的，任务很简单）。</li> \n <li>重新训练 encoder 时前三个任务有提升（因为粒度比较大，而后两个仅靠 MLP 就能学的很好了）。</li> \n</ul> \n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2>\n<p>本文提出了一种多粒度的自注意力机制，将其加入到了 Transformer 的 encoder 中。不仅仅是机器翻译任务，其他许多任务例如阅读理解、语言推理、情感分类等都可以用上这种方法，更好的融入短语结构信息。</p> \n<p>其实这篇和 <a href=\"http://arxiv.org/abs/1909.06639\" title=\"Tree Transformer: Integrating Tree Structures into Self-Attention\" target=\"_blank\" rel=\"noopener\">Tree Transformer: Integrating Tree Structures into Self-Attention</a> 挺类似的，都是在 Transformer 的 self-attention 上面做了手脚，加入了一些结构上的信息，增强 encoder 的编码能力。</p>', '2022-04-22 12:16:30', '7.1k', 2, 5534);
INSERT INTO `t_article` VALUES ('2df15ac15b54417eb77be98126175dc3', '随笔', 10, '字节还有打游戏、听音乐这种神仙工作？', 'https://picsum.photos/1920/1080?random&rand=0.5352338570753401', '有很多同（xue）学（mei）想来字节，但是也不知道投什么岗位，于是就乱投一通，最后大多数都倒在了简历筛选阶段。 那么怎么增大过简历关的概率，拿到面试机会呢？ 首先这个岗位hc得充足，也就是有足够的招人名额，或者说很缺人；其次就是和你的方', '<p>有很多同（xue）学（mei）想来字节，但是也不知道投什么岗位，于是就乱投一通，最后大多数都倒在了简历筛选阶段。</p> \n<p><img src=\"1.jpeg\" alt></p> \n<p>那么怎么增大过简历关的概率，拿到面试机会呢？</p> \n<p>首先这个岗位hc得充足，也就是有足够的招人名额，或者说很缺人；其次就是和你的方向契合度要高。</p> \n<p>从字节情况来看，热门的部门竞争一定很激烈，很多同学可能投了简历就石沉大海。</p> \n<p>但是很多新兴的部门，其实处在上升期，非常缺人；我们内部也在积极组织内推，寻找合适的同学。</p> \n<p>目前字节比较缺人的业务部门有<strong>教育、游戏、客户端</strong>等等，我这里挑了几个非常非常缺人的部门，给大家内推一下。</p> \n<p><img src=\"2.jpeg\" alt></p> \n<h2 id=\"朝夕光年（游戏）\"><a href=\"#朝夕光年（游戏）\" class=\"headerlink\" title=\"朝夕光年（游戏）\"></a>朝夕光年（游戏）</h2>\n<p>朝夕光年，是字节跳动旗下游戏业务集团品牌，面向全球用户与开发者开展游戏研发与发行业务。通过提供顶级游戏和打造玩家社群，朝夕光年致力于服务全球玩家，为每位玩家带来有趣和激励人心的体验。</p> \n<h3 id=\"在招岗位\"><a href=\"#在招岗位\" class=\"headerlink\" title=\"在招岗位\"></a>在招岗位</h3>\n<p>美术（原画/技术美术/ UE/UI/动作/特效/3D）<br>技术（前端/后端/服务端/测试/引擎）<br>运营（运营管理/市场用户/评测）<br>策划 （系统/剧情/数值）<br>数据分析<br>音频设计<br>市场营销</p> \n<h3 id=\"投递地址\"><a href=\"#投递地址\" class=\"headerlink\" title=\"投递地址\"></a>投递地址</h3>\n<p><a href=\"http://nxw.so/54Ouo\" target=\"_blank\" rel=\"noopener\">http://nxw.so/54Ouo</a></p> \n<h2 id=\"美术专属岗位（游戏）\"><a href=\"#美术专属岗位（游戏）\" class=\"headerlink\" title=\"美术专属岗位（游戏）\"></a>美术专属岗位（游戏）</h2>\n<h3 id=\"在招岗位-1\"><a href=\"#在招岗位-1\" class=\"headerlink\" title=\"在招岗位\"></a>在招岗位</h3>\n<p><strong>正式岗位</strong><br>游戏场景原画，游戏角色原画，游戏技术美术（美术向），游戏动作设计师，游戏交互设计师， 游戏特效设计师，游戏3D美术设计师，游戏UE设计师， 游戏UI设计师，游戏GUI设计师<br><strong>实习岗位</strong><br>游戏动作设计，游戏交互设计， 游戏特效设计，游戏3D美术设计，游戏UE设计， 游戏UI设计，GUI设计，平面设计，视频设计</p> \n<h3 id=\"投递地址-1\"><a href=\"#投递地址-1\" class=\"headerlink\" title=\"投递地址\"></a>投递地址</h3>\n<p><a href=\"http://nxw.so/59qWf\" target=\"_blank\" rel=\"noopener\">http://nxw.so/59qWf</a></p> \n<h2 id=\"抖音音乐客户端\"><a href=\"#抖音音乐客户端\" class=\"headerlink\" title=\"抖音音乐客户端\"></a>抖音音乐客户端</h2>\n<p><strong>详细介绍：</strong><br><a href=\"https://bytedance.feishu.cn/docs/doccnnMwOVoO09kXAt1ONmofL9i\" target=\"_blank\" rel=\"noopener\">https://bytedance.feishu.cn/docs/doccnnMwOVoO09kXAt1ONmofL9i</a></p> \n<h3 id=\"在招岗位-2\"><a href=\"#在招岗位-2\" class=\"headerlink\" title=\"在招岗位\"></a>在招岗位</h3>\n<p>iOS开发（高级）工程师 - 抖音音乐（上海）<br>iOS开发（高级）工程师 - 抖音音乐（深圳）<br>Android开发（高级）工程师 - 抖音音乐（上海）<br>Android开发（高级）工程师 - 抖音音乐（深圳）<br>等等</p> \n<h3 id=\"投递地址-2\"><a href=\"#投递地址-2\" class=\"headerlink\" title=\"投递地址\"></a>投递地址</h3>\n<p><a href=\"http://nxw.so/5e5Zo\" target=\"_blank\" rel=\"noopener\">http://nxw.so/5e5Zo</a></p> \n<h2 id=\"一定要记得填上我的内推码！！！\"><a href=\"#一定要记得填上我的内推码！！！\" class=\"headerlink\" title=\"一定要记得填上我的内推码！！！\"></a>一定要记得填上我的内推码！！！</h2>\n<blockquote> \n <p>一定要记得填上我的内推码！！！<br>一定要记得填上我的内推码！！！<br>一定要记得填上我的内推码！！！</p> \n</blockquote> \n<p>重要的事情说三遍，还是有很多同学网上随便找个内推码，或者干脆不填。然后跑来让我查进度，这样我是没有办法知道进度的，也没办法帮你联系hr！</p> \n<p><strong>我的内推码是：</strong><br><strong>A7FSJMK</strong></p> \n<p>在我的公众号【算法码上来】后台回复【内推】，还可以进内推群，加我联系方式，随时咨询进度！</p>', '2022-04-22 01:02:22', '5.9k', 11, 7077);
INSERT INTO `t_article` VALUES ('32193a5a453f4cb0b73dcbdd8e432dac', '编程算法', 1, '【每日算法Day 75】字节跳动面试题：手撕困难题，看过我Day 71的人都会做了！', 'https://picsum.photos/1920/1080?random&rand=0.40597234176354247', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 41. 缺失的第一个正数 题目描述给定一个未排序的整数数组，找出其中没有出现的最小的正整数。 示例1 输入： [1,2,0] 输出： 3 示例2 输入： [3', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/first-missing-positive/\" title=\"LeetCode 41. 缺失的第一个正数\" target=\"_blank\" rel=\"noopener\">LeetCode 41. 缺失的第一个正数</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个未排序的整数数组，找出其中没有出现的最小的正整数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,0]\n输出：\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,4,-1,1]\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[7,8,9,11,12]\n输出：\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong> </p> \n<ul> \n <li>你的算法的时间复杂度应为 $O(n)$，并且只能使用常数级别的空间。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>如果之前一直坚持看我题解的同学，应该前几天刚看过下面这道题：<br><a href=\"https://godweiyang.com/2020/03/16/leetcode-interview-17-19/\" title=\"韦阳的博客：【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法\">韦阳的博客：【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法</a></p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/113534188\" title=\"知乎专栏：【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法\" target=\"_blank\" rel=\"noopener\">知乎专栏：【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法</a></p> \n<p>那道题是要求 $1$ 到 $n$ 中缺失的两个数，于是我们开辟一个大小为 $n$ 的数组，将所有数字放到下标对应的位置，然后看哪两个位置是空着的。为了使用原地算法，我们直接在原数组上进行操作。</p> \n<p>回到本题，我们要寻找的是第一个缺失的正整数。其实问题的本质是一样的，如果数组的长度是 $n$ ，那么最多只能填充 $1$ 到 $n$ 这 $n$ 个正整数，所以缺失的正整数一定小于等于 $n+1$ 。</p> \n<p>那么我们把小于等于 $0$ 或者大于 $n$ 的数全部赋值为 $-1$ ，因为它们是多少不要紧，不影响最后的结果。然后和上面题目方法一样，用原地算法，把每个数字放入对应下标的位置。最后从左到右扫描一遍数组，如果发现有位置是 $-1$ ，那么第一个缺失的正数就是它了。如果扫描完 $1$ 到 $n$ 发现全都在，那么第一个缺失的就是 $n+1$ 了。当然可能缺失很多正数，所以扫描到第一个缺失正数之后，就要直接返回结果了。</p> \n<p>因为我们要保存 $1$ 到 $n$ 之间的数，所以数组长度不够，要在后面扩充一个才行。</p> \n<p>时间复杂度是 $O(n)$ ，空间复杂度是 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">firstMissingPositive</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2019-11-20 10:15:49', '8.2k', 10, 1459);
INSERT INTO `t_article` VALUES ('323dc06fea084c918ca4be57cdb9df90', '编程算法', 20, '【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法', 'https://picsum.photos/1920/1080?random&rand=0.8955396584911518', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题 17.19. 消失的两个数字 题目描述给定一个数组，包含从 $1$ 到 $N$ 所有的整数，但其中缺了两个数字。你能在 $O(N)$ 时间内只用 $O', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/missing-two-lcci/\" title=\"LeetCode 面试题 17.19. 消失的两个数字\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 17.19. 消失的两个数字</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组，包含从 $1$ 到 $N$ 所有的整数，但其中缺了两个数字。你能在 $O(N)$ 时间内只用 $O(1)$ 的空间找到它们吗？</p> \n<p>以任意顺序返回这两个数字均可。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1]\n输出：\n[2,3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,3]\n输出：\n[1,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示：</strong></p> \n<ul> \n <li>$nums.length \\le 30000$</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3>\n<p>首先将数组里的数再加上 $1$ 到 $n$ 中所有的数构成一个更大的集合，那么问题就变成了<strong>一个数组里有两个数只出现了一次，其余数都出现了两次，求这两个数是多少？</strong></p> \n<p>是不是很熟悉？这其实就是 LeetCode 另一道位运算题目：<br><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/\" title=\"LeetCode 面试题56 - I. 数组中数字出现的次数\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题56 - I. 数组中数字出现的次数</a></p> \n<p>首先还是常规套路，把所有的数异或起来，得到的值 $x$ 一定就是出现一次的两个数的异或值。</p> \n<p>那么再回顾一道最基本的位运算题：<br><a href=\"https://leetcode-cn.com/problems/single-number/\" title=\"LeetCode 136. 只出现一次的数字\" target=\"_blank\" rel=\"noopener\">LeetCode 136. 只出现一次的数字</a></p> \n<p>也就是<strong>一个数组里有一个数只出现了一次，其余数都出现了两次，求这个数是多少？</strong>这就很简单了，只需要全部异或起来就是这个数的值了。</p> \n<p>那么回到本题，有没有办法将这 $2n-2$ 个数拆分成两个集合，每个集合都满足上面这种最简单的条件（只有一个数出现了一次）呢？</p> \n<p>刚刚得到了两个只出现一次数字的异或值 $x$ ，那么 $x$ 中的 $1$ 就表示了这两个数那一位是不同的。那就很简单了啊，我们把所有 $2n-2$ 个数那一位是 $0$ 的归为一个集合，那一位是 $1$ 的归为一个集合，那么这两个只出现一次的数一定会分属两个不同的集合。而其他出现了两次的数，每个数字都会在同一个集合里。</p> \n<p>最后对两个集合分别求异或值，就得到了两个出现一次数的值了。</p> \n<p>这里有个关键点，就是按照 $x$ 某一位为 $1$ 来划分两个集合，其实取任意一位是 $1$ 的位都是可以的。但是最简单的方法就是取最低位 $1$ ，因为这样可以采用位运算 $x \\&amp; (-x)$ 直接得到。</p> \n<p>位运算系列还有一个进阶版：<br><a href=\"https://leetcode-cn.com/problems/single-number-ii/\" title=\"LeetCode 137. 只出现一次的数字 II\" target=\"_blank\" rel=\"noopener\">LeetCode 137. 只出现一次的数字 II</a></p> \n<p>这题就与本题无关了，我们留着下次继续讲。</p> \n<h3 id=\"数学法\"><a href=\"#数学法\" class=\"headerlink\" title=\"数学法\"></a>数学法</h3>\n<p>首先假设缺失的两个数字为 $x, y$ 。</p> \n<p>令 $S_1$ 为 $nums$ 数组中的元素和，$S_2$ 为 $nums$ 数组中的元素平方和。</p> \n<p>再用 $1$ 到 $n$ 的元素和减去 $S_1$ 就得到了 $x+y$ 的值，记为 $a$。用 $1$ 到 $n$ 的元素平方和减去 $S_2$ 就得到了 $x^2+y^2$ 的值，记为 $b$。</p> \n<p>最后只要解出下面这个二元二次方程组就行了：<br>$$<br>\\begin{aligned}<br>&amp;x + y = a \\\\<br>&amp;x^2 + y^2 = b<br>\\end{aligned}<br>$$<br>用求根公式可以解出两个解是：<br>$$<br>\\frac{a \\pm \\sqrt{2b-a^2}}{2}<br>$$<br>其中：<br>$$<br>\\begin{aligned}<br>&amp;a = \\sum_{i=1}^n{i} - \\sum_{i=0}^{n-3}{nums[i]} = \\frac{n(n+1)}{2} - \\sum_{x \\in nums}{x} \\\\<br>&amp;b = \\sum_{i=1}^n{i^2} - \\sum_{i=0}^{n-3}{(nums[i])^2} = \\frac{n(n+1)(2n+1)}{6} - \\sum_{x \\in nums}{x^2}<br>\\end{aligned}<br>$$</p> \n<h3 id=\"下标哈希\"><a href=\"#下标哈希\" class=\"headerlink\" title=\"下标哈希\"></a>下标哈希</h3>\n<p>一个很直觉的方法就是，我新开辟一个大小为 $n+1$ 的数组，然后把 $nums$ 数组中的元素都放在新数组中下标对应的位置，最后看哪两个位置没有数就行了。但是现在要用原地算法，不允许新开辟空间，那我们就只能直接放在原数组里面了。</p> \n<p>首先我们还是得把原数组扩展到大小为 $n+1$，也就是在末尾增加 $3$ 个空间，数字就放 $-1$。</p> \n<p>然后遍历数组，对于 $nums[i]$ 来说，它的位置上最后放的应该是数字 $i$ 才对，而 $nums[i]$ 应该被放在下标为 $nums[i]$ 的位置。所以我们把 $nums[i]$ 移动到下标为 $nums[i]$ 的位置上去，但是 $nums[i]$ 位置上的数字怎么办呢？不能直接覆盖，不然就再也无法访问了，所以我们把它移动到下标 $i$ 的位置就行了。也就是说交换下标 $i$ 和 $nums[i]$ 位置上的两个数。</p> \n<p>那么问题接着来了，位置 $nums[i]$ 上面的数对了，但是位置 $i$ 上面的数还是错的啊。那么只要继续重复交换操作，直到位置 $i$ 位置上面的数是 $i$ ，或者是 $-1$ 就行了。</p> \n<p>最后所有数都摆回正确位置了，再扫描一遍数组，如果 $nums[i] = -1$ ，就说明 $i$ 这个数不在数组里。</p> \n<p>这个方法理论上适合缺任意 $k$ 个数，只需要一开始在数组后面补上 $k+1$ 个 $-1$ 就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"位运算（c-）\"><a href=\"#位运算（c-）\" class=\"headerlink\" title=\"位运算（c++）\"></a>位运算（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">missingTwo</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> x <span class=\"token operator\">^</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> x <span class=\"token operator\">^</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> lb <span class=\"token operator\">=</span> x <span class=\"token operator\">&amp;</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span>lb<span class=\"token punctuation\">)</span> y <span class=\"token operator\">^</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span>lb<span class=\"token punctuation\">)</span> y <span class=\"token operator\">^</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>y<span class=\"token punctuation\">,</span> y<span class=\"token operator\">^</span>x<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数学法（c-）\"><a href=\"#数学法（c-）\" class=\"headerlink\" title=\"数学法（c++）\"></a>数学法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">missingTwo</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> S1 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> S2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> S2 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> a <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>S1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> b <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token operator\">-</span>S2<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>b<span class=\"token operator\">-</span>a<span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>b<span class=\"token operator\">-</span>a<span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"下标哈希（c-）\"><a href=\"#下标哈希（c-）\" class=\"headerlink\" title=\"下标哈希（c++）\"></a>下标哈希（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">missingTwo</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-12-09 16:04:10', '4.3k', 11, 4283);
INSERT INTO `t_article` VALUES ('34630f1bd31347208f4b724191cb4188', '编程算法', 27, '【每日算法Day 90】5种方法：求解数组中出现次数超过一半的那个数', 'https://picsum.photos/1920/1080?random&rand=0.10721773959829961', '题目链接LeetCode 面试题39. 数组中出现次数超过一半的数字 题目描述数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。 你可以假设数组是非空的，并且给定的数组总是存在多数元素。 说明： 1 &lt;= 数组长度 &amp;', '<p><img src=\"1.jpg\" alt=\"论文中了，非常感谢各位的支持！\"></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-chu-xian-ci-shu-chao-guo-yi-ban-de-shu-zi-lcof/\" title=\"LeetCode 面试题39. 数组中出现次数超过一半的数字\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题39. 数组中出现次数超过一半的数字</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p> \n<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>1 &lt;= 数组长度 &lt;= 50000</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1, 2, 3, 2, 2, 2, 5, 4, 2]\n输出:\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3>\n<p>这个方法最简单，用哈希表记录每个数字出现的次数，最后看哪个数字次数超过一半就行了。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3>\n<p>对数组从小到大进行排序，那么众数一定在 <code>nums[n/2]</code> 处。为什么呢？</p> \n<p>因为排序后相同的数都连续了，所以众数最左端的极限情况就是从下标 <code>0</code> 开始往后排，那么因为超过了一半，所以尾部下标一定会超过 <code>n/2</code> 。而最右端的极限情况就是从下标 <code>n-1</code> 往前排，因为超过了一半，所以头部下标也会在 <code>n/2</code> 之前。</p> \n<p>综上，众数所在的区间一定会包含下标 <code>n/2</code> 。</p> \n<p>时间复杂度 $O(n \\log n)$ ，空间复杂度 $O(\\log n)$ 。</p> \n<h3 id=\"随机采样\"><a href=\"#随机采样\" class=\"headerlink\" title=\"随机采样\"></a>随机采样</h3>\n<p>其实我第一个想到的方法反而是这个反常规的随机采样方法。因为众数超过了一半，所以采样大概率会采到这个众数。</p> \n<p>那么我们随机采样一个数，然后遍历一遍数组看它的个数。如果个数超过了一半就是它了，否则继续采样，直到采到众数。</p> \n<p>平均时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ 。</p> \n<h3 id=\"分治\"><a href=\"#分治\" class=\"headerlink\" title=\"分治\"></a>分治</h3>\n<p>如果把区间 <code>[0, n-1]</code> 平均分成两半，那么我们可以证明，原来的众数在某一半区间里依然是众数。</p> \n<p>为什么呢？反证法，假设两半区间的众数都不是原来的众数，那么在左半区间原来的众数一定小于一半，右半区间也是的。加起来之后总数一定小于一半的，和条件是矛盾的。</p> \n<p>所以我们递归求解两半区间的众数，然后看哪个数出现次数较多，众数就是它了。</p> \n<p>时间复杂度 $O(n \\log n)$ ，空间复杂度 $O(\\log n)$ 。</p> \n<h3 id=\"摩尔投票\"><a href=\"#摩尔投票\" class=\"headerlink\" title=\"摩尔投票\"></a>摩尔投票</h3>\n<p>这个方法我一开始也想到了，但是没有想到这竟然有理论解释，而且是大名鼎鼎的摩尔投票算法。</p> \n<p>它的主要步骤是这样的：</p> \n<ul> \n <li>初始化两个变量， <code>cand</code> 表示候选人，<code>cnt</code> 表示赞同它的票数。</li> \n <li>如果 <code>cnt = 0</code>，那么 <code>cand</code> 就设置为当前的数字。</li> \n <li>如果 <code>cand</code> 等于当前数字，那么票数 <code>cnt</code> 加一，否则票数减一。</li> \n <li>最后 <code>cand</code> 就是得票超过一半的众数。</li> \n</ul> \n<p>严格证明比较复杂，是一篇论文，这里说个比较好理解的思路：</p> \n<ul> \n <li>如果当前候选人是众数，那么其他的众数会支持自己，其他的数反对自己。但是因为众数超过了一半，所以众数最后一定会当选。</li> \n <li>如果当前候选人不是众数，那么就惨了，其他的数和众数全都会反对他。那反对票远远超过一半了，肯定会下台，然后换候选人。</li> \n <li>上面两种情况会在 <code>cnt = 0</code> 的时刻进行转换，也就是换候选人。</li> \n</ul> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"哈希表（c-）\"><a href=\"#哈希表（c-）\" class=\"headerlink\" title=\"哈希表（c++）\"></a>哈希表（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> mp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序（c-）\"><a href=\"#排序（c-）\" class=\"headerlink\" title=\"排序（c++）\"></a>排序（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"随机采样（c-）\"><a href=\"#随机采样（c-）\" class=\"headerlink\" title=\"随机采样（c++）\"></a>随机采样（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"分治（c-）\"><a href=\"#分治（c-）\" class=\"headerlink\" title=\"分治（c++）\"></a>分治（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numCount</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findMajority</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ml <span class=\"token operator\">=</span> <span class=\"token function\">findMajority</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mr <span class=\"token operator\">=</span> <span class=\"token function\">findMajority</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ml <span class=\"token operator\">==</span> mr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> ml<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cl <span class=\"token operator\">=</span> <span class=\"token function\">numCount</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> ml<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cr <span class=\"token operator\">=</span> <span class=\"token function\">numCount</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> mr<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cl <span class=\"token operator\">&lt;</span> cr <span class=\"token operator\">?</span> mr <span class=\"token operator\">:</span> ml<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">findMajority</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"摩尔投票（c-）\"><a href=\"#摩尔投票（c-）\" class=\"headerlink\" title=\"摩尔投票（c++）\"></a>摩尔投票（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cand <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt<span class=\"token punctuation\">)</span> cand <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> cand<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cand<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"哈希表（python）\"><a href=\"#哈希表（python）\" class=\"headerlink\" title=\"哈希表（python）\"></a>哈希表（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        counts <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>Counter<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">(</span>counts<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token operator\">=</span>counts<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序（python）\"><a href=\"#排序（python）\" class=\"headerlink\" title=\"排序（python）\"></a>排序（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"随机采样（python）\"><a href=\"#随机采样（python）\" class=\"headerlink\" title=\"随机采样（python）\"></a>随机采样（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        majority_count <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            candidate <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> elem <span class=\"token keyword\">in</span> nums <span class=\"token keyword\">if</span> elem <span class=\"token operator\">==</span> candidate<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> majority_count<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> candidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"分治（python）\"><a href=\"#分治（python）\" class=\"headerlink\" title=\"分治（python）\"></a>分治（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">,</span> lo<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hi<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">majority_element_rec</span><span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> lo <span class=\"token operator\">==</span> hi<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span>\n            mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hi<span class=\"token operator\">-</span>lo<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>lo\n            left <span class=\"token operator\">=</span> majority_element_rec<span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> mid<span class=\"token punctuation\">)</span>\n            right <span class=\"token operator\">=</span> majority_element_rec<span class=\"token punctuation\">(</span>mid<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> left\n            left_count <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> hi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span>\n            right_count <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>lo<span class=\"token punctuation\">,</span> hi<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> left <span class=\"token keyword\">if</span> left_count <span class=\"token operator\">&gt;</span> right_count <span class=\"token keyword\">else</span> right\n        <span class=\"token keyword\">return</span> majority_element_rec<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"摩尔投票（python）\"><a href=\"#摩尔投票（python）\" class=\"headerlink\" title=\"摩尔投票（python）\"></a>摩尔投票（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        count <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        candidate <span class=\"token operator\">=</span> None\n        <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                candidate <span class=\"token operator\">=</span> num\n            count <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> num <span class=\"token operator\">==</span> candidate <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> candidate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 18:33:29', '9.4k', 3, 4626);
INSERT INTO `t_article` VALUES ('3498124533cf48f7ac4970da930d5035', '深度学习', 23, '最全攻略：利用LightSeq加速你的深度学习模型', 'https://picsum.photos/1920/1080?random&rand=0.7023889484453382', '前言LightSeq是字节跳动火山翻译团队开源的一款Transformer系列模型加速引擎，分为训练和推理两个部分。其中推理加速引擎早在2019年12月就已经开源，而训练加速引擎也在2021年6月开源。项目地址：https://github', '<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>LightSeq是字节跳动火山翻译团队开源的一款Transformer系列模型加速引擎，分为训练和推理两个部分。其中推理加速引擎早在2019年12月就已经开源，而训练加速引擎也在2021年6月开源。<br><strong>项目地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p>LightSeq主要采用了CUDA算子融合、显存优化、参数连续化、层级式解码策略等技术，感兴趣的小伙伴可以阅读此前的文章：<br><strong>训练引擎：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/383657837\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/383657837</a><br><strong>推理引擎：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/269478459\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/269478459</a></p> \n<p>本文详细讲解一下如何使用LightSeq来改造你的PyTorch模型，实现1.5-3倍的训练加速和5-10倍的推理加速。至于TensorFlow模型的加速，目前也已经支持，这里不会详细讲解，可以参考下面NeurST的代码：<br><a href=\"https://github.com/bytedance/neurst/tree/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/neurst/tree/lightseq</a></p> \n<h2 id=\"整体流程\"><a href=\"#整体流程\" class=\"headerlink\" title=\"整体流程\"></a>整体流程</h2>\n<p>使用LightSeq进行加速的整体流程依次为：</p> \n<ol> \n <li>接入训练引擎进行模型训练，并保存模型参数。</li> \n <li>加载模型参数，使用训练引擎的前向传播部分进行模型推理。</li> \n <li>为了更快的推理速度，还可以将模型参数导出为protobuf或者hdf5格式。</li> \n <li>使用推理引擎解析第3步中导出的模型，并进行模型推理。</li> \n</ol> \n<h2 id=\"模型训练\"><a href=\"#模型训练\" class=\"headerlink\" title=\"模型训练\"></a>模型训练</h2>\n<p>LightSeq提供了封装好的embedding、encoder、decoder、cross entropy和adam类，可以接入到你自己的模型中替换原有的模型。</p> \n<p>LightSeq还提供了现成的Fairseq、Hugging Face、DeepSpeed<br>DeepSpeed可以用于大规模训练Speed、NeurST等样例。如果你用这几个训练库的话，就可以直接使用。如果你是自己的模型，那也可以手动接入LightSeq。这几个样例代码都在<code>examples/training</code>目录下。</p> \n<h3 id=\"自定义模型\"><a href=\"#自定义模型\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h3>\n<p>首先引入所有可能用到的头文件：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    LSTransformer<span class=\"token punctuation\">,</span>\n    LSTransformerEmbeddingLayer<span class=\"token punctuation\">,</span>\n    LSTransformerEncoderLayer<span class=\"token punctuation\">,</span>\n    LSTransformerDecoderLayer<span class=\"token punctuation\">,</span>\n    LSCrossEntropyLayer<span class=\"token punctuation\">,</span>\n    LSAdam<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>以新建encoder层为例，主要分为两个步骤：</p> \n<ol> \n <li>使用<code>LSTransformerEncoderLayer.get_config</code>函数新建config。</li> \n <li>新建LightSeq的encoder层，即<code>LSTransformerEncoderLayer</code>类，使用config来初始化。</li> \n</ol> \n<p>一个典型的例子如下：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">config <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n    model<span class=\"token operator\">=</span><span class=\"token string\">\"bert-base\"</span><span class=\"token punctuation\">,</span>\n    max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n    fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\nlayer <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>其中<code>max_batch_tokens</code>指定了训练过程中一个batch最大可能的单词数，<code>max_seq_len</code>指定了句子的最长长度。<code>model</code>提供了四种现成的模型配置：<code>transformer-base</code>、<code>transformer-big</code>、<code>bert-base</code>和<code>bert-big</code>。</p> \n<p>当然如果你想用自己的模型配置，也可以手动补全所有的参数：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">config <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n    max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n    hidden_size<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n    intermediate_size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    nhead<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n    attn_prob_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n    activation_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n    hidden_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n    pre_layer_norm<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n    activation_fn<span class=\"token operator\">=</span><span class=\"token string\">\"gelu\"</span><span class=\"token punctuation\">,</span>\n    fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\nlayer <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>除了encoder以外，embedding、decoder、cross entropy和adam也可以用同样的方法新建，最后和你自己写的模型一样进行训练即可。</p> \n<p>此外LightSeq还提供了完整的Transformer类<code>LSTransformer</code>，可以直接新建一整个Transformer：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">config <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n    model<span class=\"token operator\">=</span><span class=\"token string\">\"transformer-base\"</span><span class=\"token punctuation\">,</span>\n    max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span>\n    vocab_size<span class=\"token operator\">=</span><span class=\"token number\">32000</span><span class=\"token punctuation\">,</span>\n    padding_idx<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    num_encoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    num_decoder_layer<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n    fp16<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n    local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> LSTransformer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>示例代码在<code>examples/training/custom</code>中，可以直接运行<code>python run.py</code>查看效果。</p> \n<h3 id=\"Hugging-Face\"><a href=\"#Hugging-Face\" class=\"headerlink\" title=\"Hugging Face\"></a>Hugging Face</h3>\n<p>以Hugging Face官方提供的<code>run_glue.py</code>为例，一般首先都是用<code>AutoModel.from_pretrained</code>函数新建模型model，然后进行训练。</p> \n<p>为了接入LightSeq，需要将model中的所有encoder层替换为LightSeq版本的encoder层。替换过程分为三个步骤：</p> \n<ol> \n <li>使用<code>LSTransformerEncoderLayer.get_config</code>函数新建config。</li> \n <li>获取Hugging Face预训练好的BERT参数。</li> \n <li>新建LightSeq的encoder层，即<code>LSTransformerEncoderLayer</code>类，使用config和预训练好的参数来初始化。</li> \n</ol> \n<p>新建encoder层代码参见上一小节。注意在Hugging Face这个例子里，额外给<code>LSTransformerEncoderLayer</code>封装了一层<code>LSHFTransformerEncoderLayer</code>，主要是为了兼容原来的encoder输入形状。</p> \n<p>示例代码在<code>examples/training/huggingface</code>中，运行<code>sh run_glue.sh</code>和<code>sh run_ner.sh</code>分别可以查看LightSeq在GLUE和NER任务上的加速效果。</p> \n<p>注意Hugging Face BERT的fine-tune任务很不稳定，经常会不收敛，这时候可以尝试修改运行脚本中的<code>--seed</code>参数。</p> \n<h3 id=\"Fairseq\"><a href=\"#Fairseq\" class=\"headerlink\" title=\"Fairseq\"></a>Fairseq</h3>\n<p>Fairseq主要用于一些生成任务，使用LightSeq加速的原理是一样的，都是需要将各自组件替换为LightSeq对应的组件。</p> \n<p>LightSeq对Fairseq做了非常完整的替换，将embedding、encoder、decoder、cross entropy和adam全部替换为了LightSeq对应的部分，来达到极致的加速效果。</p> \n<p>示例代码在<code>examples/training/fairseq</code>目录下，其中<code>fs_cli</code>目录存放着三个启动入口：<code>train</code>、<code>validate</code>和<code>generate</code>，<code>fs_modules</code>目录存放着用LightSeq封装好的几个Transformer组件。</p> \n<p>直接运行<code>sh ls_fairseq_wmt14en2de.sh</code>即可自动下载数据并运行WMT14英德机器翻译任务。脚本中主要的运行命令如下：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">lightseq-train /tmp/wmt14_en_de/ \\\n    --task translation \\\n    --arch ls_transformer_wmt_en_de_big_t2t --share-decoder-input-output-embed \\\n    --optimizer ls_adam --adam-betas \'(0.9, 0.98)\' --clip-norm 0.0 \\\n    --lr 5e-4 --lr-scheduler inverse_sqrt --warmup-updates 4000 --weight-decay 0.0001 \\\n    --criterion ls_label_smoothed_cross_entropy --label-smoothing 0.1 \\\n    --max-tokens 8192 \\\n    --eval-bleu --eval-bleu-args \'{\"beam\": 5, \"max_len_a\": 1.2, \"max_len_b\": 10}\' \\\n    --eval-bleu-detok moses --eval-bleu-remove-bpe --eval-bleu-print-samples \\\n    --best-checkpoint-metric bleu \\\n    --maximize-best-checkpoint-metric --fp16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>注意到和一般运行Fairseq的命令不同的地方有这么几个：</p> \n<ol> \n <li>启动入口从<code>fairseq-train</code>替换为了<code>lightseq-train</code>，这是因为在根目录<code>setup.py</code>里封装了<code>--user-dir</code>用户模块目录。如果还想继续用<code>fairseq-train</code>的话，就需要手动指定<code>--user-dir fs_modules</code>参数。</li> \n <li>模型结构<code>--arch</code>需要在原来的基础上加上前缀<code>ls_</code>，用来指定使用LightSeq提供的Transformer模型。</li> \n <li>优化器<code>--optimizer</code>和损失函数<code>--criterion</code>都需要在原来的基础上加上前缀<code>ls_</code>，指定使用LightSeq对应的组件。</li> \n</ol> \n<h3 id=\"DeepSpeed\"><a href=\"#DeepSpeed\" class=\"headerlink\" title=\"DeepSpeed\"></a>DeepSpeed</h3>\n<p>DeepSpeed主要用于大规模训练，也提供了Transformer的encoder层CUDA实现，不过效率没有LightSeq高。</p> \n<p>LightSeq提供了Fairseq+DeepSpeed分布式训练的使用样例，将启动器替换成了<code>deepspeed</code>，手动指定<code>--user-dir</code>目录，还需要指定DeepSpeed的配置文件<code>deepspeed_config</code>，其它参数和上一节Fairseq样例一模一样。</p> \n<p>使用时运行<code>sh ds_fairseq_wmt14en2de.sh</code>即可，和上一小节一样都是用Fairseq运行WMT14英德机器翻译任务。</p> \n<h2 id=\"模型导出\"><a href=\"#模型导出\" class=\"headerlink\" title=\"模型导出\"></a>模型导出</h2>\n<p>在模型训练完之后，直接load保存的checkpoint就可以继续fine-tune或者推理。但是这样调用的是训练引擎的推理部分，也就是模型的前向传播。这部分代码需要频繁在python和c++之间切换，并且前向过程中计算了很多反向传播才需要用到的变量。因此速度不如纯粹的推理引擎快。</p> \n<p>而要想使用LightSeq的推理引擎，就必须先将checkpoint转变为protobuf或者hdf5的格式。</p> \n<p>LightSeq提供了每个组件的导出接口，如果你使用了LightSeq的模型组件，那么导出将变得非常容易。只需要引入下面的头文件即可：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    export_ls_config<span class=\"token punctuation\">,</span>\n    export_ls_embedding<span class=\"token punctuation\">,</span>\n    export_ls_encoder<span class=\"token punctuation\">,</span>\n    export_ls_decoder<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这四个函数分别可以导出推理引擎所需要的配置信息、embedding参数、encoder参数和decoder参数。而如果有其他部分的参数没包括在这里面（例如输出到词表的映射矩阵），则需要自己进行导出，详见下面的教程。</p> \n<p>LightSeq对Hugging Face的BERT、BART、GPT2三种模型，以及Fairseq+LightSeq、LightSeq的Transformer模型都提供了模型导出的样例，代码在<code>examples/inference/python/export</code>目录下。其中Hugging Face的模型都是没有采用LightSeq加速训练的预训练模型参数，所以导出更为复杂一些。</p> \n<p>模型导出的核心思想就是：</p> \n<ol> \n <li>首先创建一个protobuf对象<code>Transformer</code>或者hdf5的文件对象。</li> \n <li>然后在checkpoint中提取出参数值，将其赋值给<code>Transformer</code>或者hdf5文件对象中对应的参数。</li> \n</ol> \n<p>这个过程麻烦的就是提取并且对应赋值的过程，LightSeq提供了一系列方便的操作函数。</p> \n<h3 id=\"Fairseq-1\"><a href=\"#Fairseq-1\" class=\"headerlink\" title=\"Fairseq\"></a>Fairseq</h3>\n<p>执行<code>python ls_fs_transformer_export.py</code>可以导出上一章节中Fairseq+LightSeq训练样例得到的模型。</p> \n<p>以protobuf导出为例，观察代码可以看到主体部分如下（省略了部分参数）：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">file <span class=\"token operator\">=</span> Transformer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nencoder_state_dict<span class=\"token punctuation\">,</span> decoder_state_dict <span class=\"token operator\">=</span> _extract_weight<span class=\"token punctuation\">(</span>state_dict<span class=\"token punctuation\">)</span>\nexport_ls_embedding<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> encoder_state_dict<span class=\"token punctuation\">,</span> is_encoder<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\nexport_ls_embedding<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> decoder_state_dict<span class=\"token punctuation\">,</span> is_encoder<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\nexport_ls_encoder<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> encoder_state_dict<span class=\"token punctuation\">)</span>\nexport_ls_decoder<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> decoder_state_dict<span class=\"token punctuation\">)</span>\nexport_fs_weights<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> state_dict<span class=\"token punctuation\">)</span>\nexport_ls_config<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>首先需要用户自己将state_dict拆分成encoder和decoder两部分，这主要是因为设计时考虑到有些用户只会用到encoder的导出（例如BERT）。并且LightSeq无法知道用户模型的最外层参数名叫啥，万一不叫encoder，而叫enc之类的呢？所以交给用户自己拆分更加合理。</p> \n<p>然后分别导出encoder的embedding、decoder的embedding、encoder和decoder参数，这几部分都直接调用LightSeq提供的接口就行了。LightSeq会自动帮你把解析出来的参数导出到定义的<code>Transformer</code>类里。</p> \n<p>接着需要处理一下Fairseq中与LightSeq无关的一些参数，例如encoder和decoder的layer norm参数等等。<code>export_fs_weights</code>函数需要用户自己实现，核心思想就是找到state_dict中的参数名，将其赋值给<code>Transformer</code>类里对应的变量就行了。</p> \n<p>最后设置一下<code>Transformer</code>类里所有的配置参数就行了。</p> \n<p>hdf5的用法类似，LightSeq都将其封装在同样的函数里了，只需要指定<code>save_pb=False</code>即可。</p> \n<h3 id=\"Hugging-Face-1\"><a href=\"#Hugging-Face-1\" class=\"headerlink\" title=\"Hugging Face\"></a>Hugging Face</h3>\n<p>执行<code>python hf_bert_export.py</code>、<code>python hf_bart_export.py</code>和<code>python hf_gpt2_export.py</code>三个文件分别可以导出BERT、BART和GPT2的预训练模型。</p> \n<p>因为Hugging Face的模型参数都是预训练得到的，所以LightSeq无法识别参数名是什么样的，只能用户自己编写导出规则，具体参考上面三个导出样例即可。</p> \n<h3 id=\"LightSeq-Transformer\"><a href=\"#LightSeq-Transformer\" class=\"headerlink\" title=\"LightSeq Transformer\"></a>LightSeq Transformer</h3>\n<p>使用LightSeq提供的Transformer进行训练的话，参数名LightSeq都知道的一清二楚，因此可以直接使用LightSeq提供的导出接口进行转换。过程和上面的Fairseq+LightSeq类似。</p> \n<p>具体样例可以执行<code>python ls_transformer_export.py</code>，同时得到protobuf和hdf5格式的模型导出文件，并且对比两者生成的结果。这里的checkpoint可以使用上一章节中<code>自定义模型</code>小节中训练得到的模型。</p> \n<h3 id=\"自定义模型-1\"><a href=\"#自定义模型-1\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h3>\n<p>因为自定义的模型参数LightSeq无法识别参数名，所以需要用户自己编写转换规则。</p> \n<p>举一个简单的例子，假设用户模型中有个encoder的输出部分的layer norm参数，state_dict中的参数名叫做<code>encoder.layer_norm.weight</code>。那么可以按如下方式进行转换：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">transformer <span class=\"token operator\">=</span> Transformer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nenc_norm_w <span class=\"token operator\">=</span> state_dict<span class=\"token punctuation\">[</span><span class=\"token string\">\"encoder.layer_norm.weight\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tolist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntransformer<span class=\"token punctuation\">.</span>src_embedding<span class=\"token punctuation\">.</span>norm_scale<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> enc_norm_w<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"模型推理\"><a href=\"#模型推理\" class=\"headerlink\" title=\"模型推理\"></a>模型推理</h2>\n<p>得到导出的protobuf或者hdf5模型后，推理就变得十分简单，核心代码就三行：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> lightseq<span class=\"token punctuation\">.</span>inference <span class=\"token keyword\">as</span> lsi\nmodel <span class=\"token operator\">=</span> lsi<span class=\"token punctuation\">.</span>Transformer<span class=\"token punctuation\">(</span><span class=\"token string\">\"transformer.pb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\noutput <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>infer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>首先定义一个<code>Transformer</code>类用来加载模型参数，指定load的protobuf文路径和batch_size大小。</p> \n<p>然后调用<code>infer</code>函数进行推理，传入的输入参数必须是list或者numpy类型，且必须是二维。</p> \n<p>LightSeq在<code>examples/inference/python/test</code>目录下提供了三个Hugging Face模型推理的样例，此外上一小节中<code>examples/inference/python/export</code>中的<code>ls_transformer_export.py</code>代码也包含了导出后推理的过程。</p> \n<h2 id=\"最佳实践\"><a href=\"#最佳实践\" class=\"headerlink\" title=\"最佳实践\"></a>最佳实践</h2>\n<p>总结一下，使用LightSeq加速你的深度学习模型，最佳方式无外乎三步：</p> \n<ol> \n <li>接入LightSeq训练引擎的模型组件，构建模型，进行训练，保存checkpoint。</li> \n <li>将checkpoint转换为protobuf或者hdf5格式，LightSeq的组件可以调用现成的转换接口，其它的需要自己手写转换规则。</li> \n <li>调用LightSeq推理引擎，加载上一步中导出的模型，进行快速推理。</li> \n</ol> \n<p>目前LightSeq已经被广泛应用在字节跳动公司内外各项业务和学术研究上，支持了标准的Transformer、BERT、BART、GPT2、ViT等多种Transformer系列模型。只要你的模型中包含有Transformer的部分组件，例如encoder层，就可以直接调用LightSeq进行加速。</p> \n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2>\n<p>如果在使用中遇到任何问题，或者有任何需求和建议，都可以在github issue中提出，或者加入LightSeq的飞书用户群：<br><a href=\"https://applink.feishu.cn/client/chat/chatter/add_by_link?link_token=936uf19e-966f-43f6-8401-269ab93ec38d\" target=\"_blank\" rel=\"noopener\">https://applink.feishu.cn/client/chat/chatter/add_by_link?link_token=936uf19e-966f-43f6-8401-269ab93ec38d</a></p> \n<p><img src=\"1.png\" alt></p>', '2022-02-11 21:43:56', '6.1k', 9, 3232);
INSERT INTO `t_article` VALUES ('3c584e7a034947dab9198bc218544ef9', '编程算法', 10, '【每日算法Day 106】打家劫舍系列最后一弹，撑住你就赢了！', 'https://picsum.photos/1920/1080?random&rand=0.048818325575434085', '题目链接LeetCode 337. 打家劫舍 III 往期回顾：打家劫舍 I ：【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！ 往期回顾：打家劫舍 II ：【每日算法Day 105】打家劫舍第二弹：看好你的电', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/house-robber-iii/\" title=\"LeetCode 337. 打家劫舍 III\" target=\"_blank\" rel=\"noopener\">LeetCode 337. 打家劫舍 III</a></p> \n<p><strong>往期回顾：打家劫舍 I ：</strong><br><a href=\"https://godweiyang.com/2020/04/18/leetcode-198/\" title=\"【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！\">【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！</a></p> \n<p><strong>往期回顾：打家劫舍 II ：</strong><br><a href=\"https://godweiyang.com/2020/04/19/leetcode-213/\" title=\"【每日算法Day 105】打家劫舍第二弹：看好你的电瓶车！\">【每日算法Day 105】打家劫舍第二弹：看好你的电瓶车！</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为<strong>根</strong>。 除了<strong>根</strong>之外，每栋房子有且只有一个<strong>父</strong>房子与之相连。一番侦察之后，聪明的小偷意识到<strong>这个地方的所有房屋的排列类似于一棵二叉树</strong>。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p> \n<p>计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,3,null,3,null,1]\n     3\n    / \\\n   2   3\n    \\   \\ \n     3   1\n输出:\n7\n解释：\n小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,4,5,1,3,null,1]\n     3\n    / \\\n   4   5\n  / \\   \\ \n 1   3   1\n输出:\n9\n解释：\n小偷一晚能够盗取的最高金额 = 4 + 5 = 9.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这次是在一棵树上偷窃了，做法还是一样。对于结点 <code>r</code> 来说，我们还是分为偷和不偷两种情况。</p> \n<p>如果偷的话，它的左右儿子就不能偷了，所以最大价值就是左儿子<strong>不偷</strong>的最大价值，加上右儿子<strong>不偷</strong>的最大价值，再加上 <code>r</code> 的价值。</p> \n<p>而如果不偷的话，最大价值就是左儿子<strong>偷或不偷</strong>的最大价值，加上右儿子<strong>偷或不偷</strong>的最大价值。</p> \n<p>因为需要用到儿子结点偷和不偷两个价值，所以需要在 <code>dfs</code> 时返回两个值，用来表示偷和不偷两个最大价值，具体实现时用 <code>pair</code> 来表示。</p> \n<p>可能有人会用另一种实现方式，用 <code>dfs0</code> 表示不偷的最大价值，<code>dfs1</code> 表示偷的最大价值，然后两个函数互相调用。注意这样理论上是可行的，但是会产生很多重复计算，最终会超时。所以这种方法需要记忆化搜索，比较麻烦，需要用 <code>map&lt;TreeNode*, int&gt;</code> 来保存每个结点的答案。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"复杂实现方式（c-）\"><a href=\"#复杂实现方式（c-）\" class=\"headerlink\" title=\"复杂实现方式（c++）\"></a>复杂实现方式（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    unordered_map<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> dp0<span class=\"token punctuation\">,</span> dp1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> dp0<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp0<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dp0<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> dp1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp1<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dp1<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        dp0<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token function\">dfs0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dfs1</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"精简实现方式（c-）\"><a href=\"#精简实现方式（c-）\" class=\"headerlink\" title=\"精简实现方式（c++）\"></a>精简实现方式（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pii<span class=\"token punctuation\">;</span>\n\n    pii <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        pii l <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pii r <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r0 <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> r1 <span class=\"token operator\">=</span> l<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> r<span class=\"token punctuation\">.</span>first <span class=\"token operator\">+</span> root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>r0<span class=\"token punctuation\">,</span> r1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        pii res <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 22:58:20', '6.4k', 2, 2675);
INSERT INTO `t_article` VALUES ('3e1fdedf1ef04b39ba3ce964f0068d60', '随笔', 11, '【NLP 算法岗】提前批暑期实习面（试）经（历）', 'https://picsum.photos/1920/1080?random&rand=0.9196766477964698', '首先申明，这是一份面试【经历】，而【不是】经验，所以基本上对大家没有什么帮助，看个乐子就好，最后结果是来了心心念念的字节啦。 基本情况某不知名末流 985 本硕，三无 FW ：无实习经历，无比赛经历，无项目经历。本科水过一段时间 ACM', '<blockquote> \n <p>首先申明，这是一份面试【经历】，而【不是】经验，所以基本上对大家没有什么帮助，看个乐子就好，最后结果是来了心心念念的字节啦。</p> \n</blockquote> \n<h2 id=\"基本情况\"><a href=\"#基本情况\" class=\"headerlink\" title=\"基本情况\"></a>基本情况</h2>\n<p>某不知名末流 985 本硕，三无 FW ：无实习经历，无比赛经历，无项目经历。本科水过一段时间 ACM ，4 月份侥幸中了一篇 ACL ，方向很基础、很冷门，对下游任务最多只是了解。</p> \n<p>这次一共面了 4 家，投递顺序是达摩院、头条 AI Lab、腾讯 WXG、美团 AI 平台。结果到发稿为止，美团最先出结果被我拒了，字节接受了 offer ，腾讯 HR 面结束一周多依然没结果，达摩院二面结束一周多依然没结果。</p> \n<h2 id=\"达摩院\"><a href=\"#达摩院\" class=\"headerlink\" title=\"达摩院\"></a>达摩院</h2>\n<h3 id=\"一面（4-6）\"><a href=\"#一面（4-6）\" class=\"headerlink\" title=\"一面（4.6）\"></a>一面（4.6）</h3>\n<p>一面面试官是实验室师兄介绍认识的，第二天就直接打电话给我了，我还啥都没复习呢？？？</p> \n<p>小哥哥刚毕业没两年吧，水平太太太高了，而且非常了解我这方向，问的广度和深度都很了得。从我论文工作出发，问到传统方法 PCFG、HMM，又问了许多经典论文 Neural CRF Parsing、RNNG、URNNG 等等，幸亏前一晚回顾了一下大致思想，还记得个大概。然后又拓展到强化学习、隐变量等等，幸亏组会也讲过，回顾了一些。</p> \n<p>主要还是靠我师兄前一晚传授了这位面试师兄擅长的领域，针对性的看了些东西。所谓知己知彼，才能百战不殆嘛。最后聊了一个小时。</p> \n<h3 id=\"二面（4-18）\"><a href=\"#二面（4-18）\" class=\"headerlink\" title=\"二面（4.18）\"></a>二面（4.18）</h3>\n<p>不得不说达摩院速度真是太慢了，二面一直等到 12 天后才打来电话。</p> \n<p>二面面试官就不是很懂我这个方向了，但是认真听完了我的论文介绍，因为不是很懂基础，所以我很详细的用例子给他解释了原理。过程中聊得挺开心的，我也基本没有压力（主要原因是美团已经拿到保底了，身上没啥压力）。除了论文以外，其他基础知识就没咋问了，就问了个序列标注咋做。然后就愉快的结束了，一共也聊了一个小时。</p> \n<p>到现在（4.26）又过了 8 天了，还是没任何消息，还是我太菜了。</p> \n<h2 id=\"美团\"><a href=\"#美团\" class=\"headerlink\" title=\"美团\"></a>美团</h2>\n<h3 id=\"笔试（4-9）\"><a href=\"#笔试（4-9）\" class=\"headerlink\" title=\"笔试（4.9）\"></a>笔试（4.9）</h3>\n<p>美团提前批笔试还是挺简单的（相比之下前天帮学妹做的正式批笔试可真难），一共 5 道题，一个小时就做完了，没啥可说的。</p> \n<h3 id=\"一面（4-16）\"><a href=\"#一面（4-16）\" class=\"headerlink\" title=\"一面（4.16）\"></a>一面（4.16）</h3>\n<p>美团面试也挺放松的吧，主要去的意愿没有其他几家那么大。</p> \n<p>小哥哥是做推荐的，不懂我的句法，我也不懂他的推荐，所以就没啥可聊的。我给他讲了一遍我的论文，他再随意问了两个 Transformer 和 LSTM 的基础细节问题，然后做了两道编程题，就直接结束了。一共也才 40 分钟吧。</p> \n<h3 id=\"二面（4-16）\"><a href=\"#二面（4-16）\" class=\"headerlink\" title=\"二面（4.16）\"></a>二面（4.16）</h3>\n<p>紧接着就直接是二面了，跟一面没啥区别，小哥哥还是做推荐的，还是相看两懵逼。讲了论文，做了两道算法题，然后他给我介绍了 10 分钟他们部门的业务方向，全程我都插不上话。</p> \n<h3 id=\"HR-面（4-18）\"><a href=\"#HR-面（4-18）\" class=\"headerlink\" title=\"HR 面（4.18）\"></a>HR 面（4.18）</h3>\n<p>就这样，HR 小哥直接就打电话给我了，啥也不问直接让我一周内给个回复去不去。</p> \n<p>不过我最后还是拒掉了，讲道理小哥们态度都挺好的吧，也花了这么多时间面试我，挺惭愧的。</p> \n<h2 id=\"腾讯\"><a href=\"#腾讯\" class=\"headerlink\" title=\"腾讯\"></a>腾讯</h2>\n<h3 id=\"一面（4-9）\"><a href=\"#一面（4-9）\" class=\"headerlink\" title=\"一面（4.9）\"></a>一面（4.9）</h3>\n<p>上来就给我整了 2 道算法题，都是 LeetCode Easy 难度，第一道题太紧张了还想了一会儿。第二道题嘴贱说了句做过，然后就给我加了一道水题。他会问你能否再优化，直到最优，幸亏都答出来了。</p> \n<p>然后问了论文贡献点。Dependency Parsing是怎么做的？SOTA 是什么？强化学习了解吗？解释了一下策略梯度。Skip-Gram 知道吗？是怎么做的？传统方法 SVM、Boosting 了解吗？（不了解，然后就没问）</p> \n<p>总体来说，除了最后一个传统方法直接说不了解之外，其他都答上来了。自打这开始，我连着复习（预习）了四五天的传统方法，知乎刷了个遍。</p> \n<h3 id=\"二面（4-13）\"><a href=\"#二面（4-13）\" class=\"headerlink\" title=\"二面（4.13）\"></a>二面（4.13）</h3>\n<p>面试官人在美国，手机信号很差听不清，面了 30 分钟就结束了。</p> \n<p>上来先自我介绍，然后介绍了论文。然后对下一步工作有啥想法？最后介绍了他们部门主要做对话和推荐，可能用不上句法。</p> \n<h3 id=\"HR-面（4-16）\"><a href=\"#HR-面（4-16）\" class=\"headerlink\" title=\"HR 面（4.16）\"></a>HR 面（4.16）</h3>\n<p>腾讯 HR 姐姐问的特别特别细，当然问题我都提前网上看过了，就那么些套路。有没有谈恋爱啦，家住哪儿啦，为什么读 NLP 啦，以后想定居哪儿啦等等。聊了半个多小时愉快结束了。</p> \n<p>到现在（4.26）过了 10 天了，还是没任何消息，说好的 5.1 前通知是否被录取呢？不过确实还没到时间哦？</p> \n<h2 id=\"字节\"><a href=\"#字节\" class=\"headerlink\" title=\"字节\"></a>字节</h2>\n<h3 id=\"一面（4-14）\"><a href=\"#一面（4-14）\" class=\"headerlink\" title=\"一面（4.14）\"></a>一面（4.14）</h3>\n<p>一面是个小姐姐，上来先让我自我介绍，然后就是讲论文。因为她不是做这个的，给她讲了各种以往方法以及我的方法。最后做了一道算法题，太紧张了，当场没做出来，一面结束立刻想起来怎么做了，太难顶了。</p> \n<h3 id=\"二面（4-14）\"><a href=\"#二面（4-14）\" class=\"headerlink\" title=\"二面（4.14）\"></a>二面（4.14）</h3>\n<p>紧接着就是二面了。二面小哥哥一看就是个 ACM 大佬，上来先让我自我介绍。但是没讲论文，他应该很懂，直入主题，问我各种论文细节问题，太强了。</p> \n<p>算法题环节，小哥哥先问了句“哟金牌啊”，我立刻感到不妙，是个大佬，赶紧回了句不不不邀请赛，太水了。然后给了两道题目，第一道很水，第二道没写出最优解，整了很久给了两种方法，但都不是最优的。还问我线段树细节，我赶紧回应许久不写了，早已生疏了，太强了，溜了溜了。</p> \n<h3 id=\"三面（4-15）\"><a href=\"#三面（4-15）\" class=\"headerlink\" title=\"三面（4.15）\"></a>三面（4.15）</h3>\n<p>别人都二面啊，咋就给我加了一面，给我慌的。</p> \n<p>上来还是自我介绍。然后小哥哥是做机器翻译的，我说句法可以用注入到机器翻译模型中去。但是他对我这个方向不怎么看好，说句法信息用了效果不是很好。确实，我也表示非常赞同。然后聊了聊以后想做的方向，我是不会再做纯句法方向了，还是下游任务实际一点。最后问我有啥想问的，接着又整了一道算法题。</p> \n<h3 id=\"HR-面（4-21）\"><a href=\"#HR-面（4-21）\" class=\"headerlink\" title=\"HR 面（4.21）\"></a>HR 面（4.21）</h3>\n<p>之前联系的 HR 都是一位小哥哥，没想到视频一开换人了，是个超级好看的小姐姐。也没有什么套路，问了问实习计划之类的。问到租房问题时，我说学校到公司要 20 分钟，她当即反驳我要 25 分钟，我立马断定这小姐姐一定也是我校的（果不其然）。</p> \n<p>最后一直等到今天（4.26），小姐姐终于给我打电话发 offer 啦。心情非常激动，终于不用提心吊胆了，找个实习太难了，菜还是原罪。</p> \n<p>其实一开始只投了达摩院一家的，但是太慢了。后来我就只想去字节了，确实很喜欢它的氛围，那种年轻与活力。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>实在不好意思，浪费大家这么多时间，看完后应该啥有用的都没看到。和网上面经不大一样，没有考手推 SVM，没有考 Glove 算法，基本就没考什么基础知识。所以我开头就说了嘛，没啥参考价值，大家散了吧。</p> \n<p>也祝大家论文发到手软，offer 吃到饱啦。</p> \n<p>哦对了，以后可能很少更新 LeetCode 题解了，实习了更没空了，也写的累了。如果大家平时做题过程中遇到什么困难，还是可以找我交流啦！</p>', '2021-04-24 22:50:35', '6.0k', 2, 1960);
INSERT INTO `t_article` VALUES ('45b89028ff1b433aae0566d24b7e26de', '编程算法', 27, '【每日算法Day 77】LeetCode 第 181 场周赛题解', 'https://picsum.photos/1920/1080?random&rand=0.5189681954106856', '关注公众号【算法码上来】，每日算法干货马上就来！ 周赛链接https://leetcode-cn.com/contest/weekly-contest-181 LeetCode 5364. 按既定顺序创建目标数组题目链接https:/', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"周赛链接\"><a href=\"#周赛链接\" class=\"headerlink\" title=\"周赛链接\"></a>周赛链接</h2>\n<p><a href=\"https://leetcode-cn.com/contest/weekly-contest-181\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/contest/weekly-contest-181</a></p> \n<h2 id=\"LeetCode-5364-按既定顺序创建目标数组\"><a href=\"#LeetCode-5364-按既定顺序创建目标数组\" class=\"headerlink\" title=\"LeetCode 5364. 按既定顺序创建目标数组\"></a>LeetCode 5364. 按既定顺序创建目标数组</h2>\n<h3 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/create-target-array-in-the-given-order/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/create-target-array-in-the-given-order/</a></p> \n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>c++ <code>vector</code> 自带 <code>insert</code> 函数，直接用就行了。</p> \n<h3 id=\"代码（c-）\"><a href=\"#代码（c-）\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">createTargetArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            target<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5178-四因数\"><a href=\"#LeetCode-5178-四因数\" class=\"headerlink\" title=\"LeetCode 5178. 四因数\"></a>LeetCode 5178. 四因数</h2>\n<h3 id=\"题目链接-1\"><a href=\"#题目链接-1\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/four-divisors/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/four-divisors/</a></p> \n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>直接求出每个数因数个数就行了，对于每个数 $x$，只需要枚举到 $\\sqrt{x}$ 就行了，另外如果因子个数已经大于 $4$ 了，就直接退出。</p> \n<h3 id=\"代码（c-）-1\"><a href=\"#代码（c-）-1\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumFourDivisors</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">*</span>i <span class=\"token operator\">&lt;=</span> x<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>i <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">%</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n                    sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> x<span class=\"token operator\">/</span>i<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&gt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5366-检查网格中是否存在有效路径\"><a href=\"#LeetCode-5366-检查网格中是否存在有效路径\" class=\"headerlink\" title=\"LeetCode 5366. 检查网格中是否存在有效路径\"></a>LeetCode 5366. 检查网格中是否存在有效路径</h2>\n<h3 id=\"题目链接-2\"><a href=\"#题目链接-2\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/check-if-there-is-a-valid-path-in-a-grid/</a></p> \n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>可以用 bfs 或者 dfs ，我这里采用的是 bfs 。</p> \n<p>整体框架和普通的 bfs 完全一模一样，那么问题就在于如何判断两个格子能否相连。在代码中体现为 <code>link</code> 函数，我们给它传了三个参数：$a$，$b$ 表示两个格子的街道标号（题面里解释了），$d$ 表示两个格子的位置关系（$0$：左右，$1$：右左，$2$：上下，$3$：下上）。</p> \n<p>其中 $d=1$ 和 $d=3$ 都可以通过交换 $a$ 和 $b$ 的顺序，来分别转换成 $d=0$ 和 $d=2$ 。</p> \n<p>对于 $d=0$ 来说，左右能连接的情况，只有<strong>右边有出口</strong>的格子（$a=1,4,6$）接上<strong>左边有入口</strong>的格子（$b=1,3,5$）。</p> \n<p>对于 $d=2$ 来说，上下能连接的情况，只有<strong>下边有出口</strong>的格子（$a=2,3,4$）接上<strong>上边有入口</strong>的格子（$b=2,5,6$）。</p> \n<p>其他情况全部无法连接。</p> \n<p>这样最后 bfs 遍历到了 $(n-1,m-1)$ 就能到达终点，否则就无法到达。</p> \n<h3 id=\"代码（c-）-2\"><a href=\"#代码（c-）-2\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> d <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            d<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">||</span>b<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token operator\">||</span>b<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token operator\">||</span>a<span class=\"token operator\">==</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token operator\">||</span>b<span class=\"token operator\">==</span><span class=\"token number\">5</span><span class=\"token operator\">||</span>b<span class=\"token operator\">==</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">hasValidPath</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> Q<span class=\"token punctuation\">;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vis<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> p <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> n<span class=\"token number\">-1</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> nx <span class=\"token operator\">&amp;&amp;</span> nx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ny <span class=\"token operator\">&amp;&amp;</span> ny <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">link</span><span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    vis<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5367-最长快乐前缀\"><a href=\"#LeetCode-5367-最长快乐前缀\" class=\"headerlink\" title=\"LeetCode 5367. 最长快乐前缀\"></a>LeetCode 5367. 最长快乐前缀</h2>\n<h3 id=\"题目链接-3\"><a href=\"#题目链接-3\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/longest-happy-prefix/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/longest-happy-prefix/</a></p> \n<h3 id=\"题解-3\"><a href=\"#题解-3\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>kmp 模板题，细节就不说了，网上教程漫天铺地都是的。就一个函数，是个模板直接用就行了。最后求出来的 $next[i]$ 就表示了 $s[0]$ 到 $s[i]$ 子串的最长相同前缀后缀的长度，所以答案就是 $next[n-1]$ 。</p> \n<h3 id=\"代码（c-）-3\"><a href=\"#代码（c-）-3\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        next<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> q <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                k <span class=\"token operator\">=</span> next<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            next<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    string <span class=\"token function\">longestPrefix</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">getNext</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 10:57:06', '9.1k', 3, 6537);
INSERT INTO `t_article` VALUES ('4792a2b64fe64137bb8efb494b6f2d21', '编程算法', 28, 'Python常用画图代码（折线图、柱状图、饼图）', 'https://picsum.photos/1920/1080?random&rand=0.8214449523434085', '简单记录一下最简单常用的三种论文插图的python画图代码，以作备忘。 有很多很牛b的作图教程，我也学不来，就扔给大家自己学吧： 如何在论文中画出漂亮的插图？ 折线图代码import numpy as np import matpl', '<blockquote> \n <p>简单记录一下最简单常用的三种论文插图的python画图代码，以作备忘。</p> \n</blockquote> \n<p>有很多很牛b的作图教程，我也学不来，就扔给大家自己学吧：</p> \n<ul> \n <li><a href=\"https://www.zhihu.com/question/21664179\" title=\"如何在论文中画出漂亮的插图？\" target=\"_blank\" rel=\"noopener\">如何在论文中画出漂亮的插图？</a></li> \n</ul> \n<h2 id=\"折线图\"><a href=\"#折线图\" class=\"headerlink\" title=\"折线图\"></a>折线图</h2>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token comment\" spellcheck=\"true\"># x轴刻度标签</span>\nx_ticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'b\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'c\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'d\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'e\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'f\'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># x轴范围（0, 1, ..., len(x_ticks)-1）</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>x_ticks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第1条折线数据</span>\ny1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第2条折线数据</span>\ny2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 设置画布大小</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 画第1条折线，参数看名字就懂，还可以自定义数据点样式等等。</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'#FF0000\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'label1\'</span><span class=\"token punctuation\">,</span> linewidth<span class=\"token operator\">=</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 画第2条折线</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'#00FF00\'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'label2\'</span><span class=\"token punctuation\">,</span> linewidth<span class=\"token operator\">=</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 给第1条折线数据点加上数值，前两个参数是坐标，第三个是数值，ha和va分别是水平和垂直位置（数据点相对数值）。</span>\n<span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\'%d\'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">,</span> ha<span class=\"token operator\">=</span><span class=\"token string\">\'center\'</span><span class=\"token punctuation\">,</span> va<span class=\"token operator\">=</span> <span class=\"token string\">\'bottom\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 给第2条折线数据点加上数值</span>\n<span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\'%d\'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">,</span> ha<span class=\"token operator\">=</span><span class=\"token string\">\'center\'</span><span class=\"token punctuation\">,</span> va<span class=\"token operator\">=</span> <span class=\"token string\">\'bottom\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 画水平横线，参数分别表示在y=3，x=0~len(x)-1处画直线。</span>\nplt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> colors <span class=\"token operator\">=</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> linestyles <span class=\"token operator\">=</span> <span class=\"token string\">\"dashed\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 添加x轴和y轴刻度标签</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x_ticks<span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> rotation<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 添加x轴和y轴标签</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'x_label\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'y_label\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 标题</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'Title\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 图例</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 保存图片</span>\nplt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\'./figure.pdf\'</span><span class=\"token punctuation\">,</span> bbox_inches<span class=\"token operator\">=</span><span class=\"token string\">\'tight\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 显示图片</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3>\n<p><img src=\"1.png\" alt></p> \n<h2 id=\"柱状图\"><a href=\"#柱状图\" class=\"headerlink\" title=\"柱状图\"></a>柱状图</h2>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token comment\" spellcheck=\"true\"># x轴刻度标签</span>\nx_ticks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'b\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'c\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'d\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'e\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'f\'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 柱的宽度</span>\nbarWidth <span class=\"token operator\">=</span> <span class=\"token number\">0.25</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第1个柱的x轴范围（每个柱子的中点）（0, 1, ..., len(x_ticks)-1）</span>\nx1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>x_ticks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第2个柱的x轴范围（每个柱子的中点）</span>\nx2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> barWidth <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> x1<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第1个柱数据</span>\ny1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 第2个柱数据</span>\ny2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 设置画布大小</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 画第1个柱</span>\nplt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'#FF0000\'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span>barWidth<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'label1\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 画第2个柱</span>\nplt<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">,</span> color<span class=\"token operator\">=</span><span class=\"token string\">\'#00FF00\'</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">=</span>barWidth<span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">\'label2\'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 给第1个柱数据点加上数值，前两个参数是坐标，第三个是数值，ha和va分别是水平和垂直位置（数据点相对数值）。</span>\n<span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\'%d\'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">,</span> ha<span class=\"token operator\">=</span><span class=\"token string\">\'center\'</span><span class=\"token punctuation\">,</span> va<span class=\"token operator\">=</span> <span class=\"token string\">\'bottom\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 给第2个柱数据点加上数值</span>\n<span class=\"token keyword\">for</span> a<span class=\"token punctuation\">,</span> b <span class=\"token keyword\">in</span> zip<span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span> y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    plt<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">\'%d\'</span><span class=\"token operator\">%</span>b<span class=\"token punctuation\">,</span> ha<span class=\"token operator\">=</span><span class=\"token string\">\'center\'</span><span class=\"token punctuation\">,</span> va<span class=\"token operator\">=</span> <span class=\"token string\">\'bottom\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 画水平横线</span>\nplt<span class=\"token punctuation\">.</span>hlines<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>x_ticks<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>barWidth<span class=\"token punctuation\">,</span> colors <span class=\"token operator\">=</span> <span class=\"token string\">\"#000000\"</span><span class=\"token punctuation\">,</span> linestyles <span class=\"token operator\">=</span> <span class=\"token string\">\"dashed\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 添加x轴和y轴刻度标签</span>\nplt<span class=\"token punctuation\">.</span>xticks<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>r <span class=\"token operator\">+</span> barWidth<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> x1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> x_ticks<span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>yticks<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 添加x轴和y轴标签</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'x_label\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'y_label\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 标题</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'Title\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 图例</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 保存图片</span>\nplt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\'./figure.pdf\'</span><span class=\"token punctuation\">,</span> bbox_inches<span class=\"token operator\">=</span><span class=\"token string\">\'tight\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 显示图片</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"效果-1\"><a href=\"#效果-1\" class=\"headerlink\" title=\"效果\"></a>效果</h3>\n<p><img src=\"2.png\" alt></p> \n<h2 id=\"饼图\"><a href=\"#饼图\" class=\"headerlink\" title=\"饼图\"></a>饼图</h2>\n<h3 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n\n<span class=\"token comment\" spellcheck=\"true\"># 设置画布大小</span>\nplt<span class=\"token punctuation\">.</span>figure<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 设置每块区域的标签</span>\nlabels <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'b\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'c\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'d\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'e\'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 设置每块区域离圆心的距离，这里a区域凸出一点点</span>\nexplode <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.01</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 设置每块区域的值</span>\nvalues <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 设置每块区域的颜色</span>\ncolors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'#F5DEB3\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'#87CEFA\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'#FFB6C1\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'#90EE90\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'#D3D3D3\'</span><span class=\"token punctuation\">]</span>\n\n_<span class=\"token punctuation\">,</span> l_text<span class=\"token punctuation\">,</span> p_text <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>pie<span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> explode<span class=\"token operator\">=</span>explode<span class=\"token punctuation\">,</span> labels<span class=\"token operator\">=</span>labels<span class=\"token punctuation\">,</span> autopct<span class=\"token operator\">=</span><span class=\"token string\">\'%1.1f%%\'</span><span class=\"token punctuation\">,</span> colors<span class=\"token operator\">=</span>colors<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 设置标签字体大小</span>\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> l_text<span class=\"token punctuation\">:</span>\n    t<span class=\"token punctuation\">.</span>set_size<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 设置数值字体大小</span>\n<span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> p_text<span class=\"token punctuation\">:</span>\n    t<span class=\"token punctuation\">.</span>set_size<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 标题</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span>u<span class=\"token string\">\'Title\'</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 图例</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>fontsize<span class=\"token operator\">=</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 保存图片</span>\nplt<span class=\"token punctuation\">.</span>savefig<span class=\"token punctuation\">(</span><span class=\"token string\">\'./figure.pdf\'</span><span class=\"token punctuation\">,</span> bbox_inches<span class=\"token operator\">=</span><span class=\"token string\">\'tight\'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 显示图片</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"效果-2\"><a href=\"#效果-2\" class=\"headerlink\" title=\"效果\"></a>效果</h3>\n<p><img src=\"3.png\" alt></p>', '2020-09-16 02:17:04', '7.5k', 8, 6701);
INSERT INTO `t_article` VALUES ('47c0c223e6cd4e5fa9af7c162b4f135d', '编程算法', 22, '每日算法系列【LeetCode 825】适龄的朋友', 'https://picsum.photos/1920/1080?random&rand=0.4178902242615242', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，ages[i] 表示第 i 个人的年龄。 当满足以下条件时，A 不能给 B（A、B不为同一人）发送好友请求： age', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>人们会互相发送好友请求，现在给定一个包含有他们年龄的数组，ages[i] 表示第 i 个人的年龄。</p> \n<p>当满足以下条件时，A 不能给 B（A、B不为同一人）发送好友请求：</p> \n<ul> \n <li>age[B] &lt;= 0.5 * age[A] + 7</li> \n <li>age[B] &gt; age[A]</li> \n <li>age[B] &gt; 100 &amp;&amp; age[A] &lt; 100</li> \n</ul> \n<p>否则，A 可以给 B 发送好友请求。</p> \n<p>注意如果 A 向 B 发出了请求，不等于 B 也一定会向 A 发出请求。而且，人们不会给自己发送好友请求。 </p> \n<p>求总共会发出多少份好友请求?</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[16,16]\n输出：\n2\n解释：\n二人可以互发好友申请。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[16,17,18]\n输出：\n2\n解释：\n好友请求可产生于 17 -&gt; 16, 18 -&gt; 17.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[20,30,100,110,120]\n输出：\n3\n解释：\n好友请求可产生于 110 -&gt; 100, 120 -&gt; 110, 120 -&gt; 100.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= ages.length &lt;= 20000.</li> \n <li>1 &lt;= ages[i] &lt;= 120.</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>仔细观察一下这三个条件，我们把 $age[A]$ 简写为 a ，把 $age[B]$ 简写为 b ，那么如果 a 可以向 b 发送邀请的话，必须同时满足下面三个条件：</p> \n<ul> \n <li>$a \\le 2b-15$</li> \n <li>$a \\ge b$</li> \n <li>$a \\ge 100 || b \\le 100$</li> \n</ul> \n<p>可以发现，如果满足了条件 2 ，那么一定会满足条件 3 ，所以最终只需要满足 $b \\le a \\le 2b-15$ 就行了。</p> \n<h3 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h3>\n<p>这题最暴力的方法显然就是遍历任意数对 a 和 b ，看两个数是否符合这个条件，但是时间复杂度太高，不可行。</p> \n<h3 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h3>\n<p>另一个方法是先对数组进行排序，然后遍历每一个数作为 b ，然后二分寻找 $2b-15$ 在哪就行了，中间的数字都可以作为 a ，这样最终的时间复杂度是 $O(n \\log n)$ 。</p> \n<h3 id=\"计数法\"><a href=\"#计数法\" class=\"headerlink\" title=\"计数法\"></a>计数法</h3>\n<p>有没有更好的办法呢？注意到年龄的范围最大只有 120 ，那么我们可以统计每个年龄出现的人数，用 $c[i]$ 来表示 i 岁的人数。那么 b 岁的人数就有 $c[b]$ 个，而符合条件的 a 在 $[b, 2b-15]$ 之间。其中 $a = b$ 需要单独讨论，因为包含了自己邀请自己的情况，这种情况邀请的数量是 $c[b] \\cdot (c[b] - 1)$ 。而 a 在 $[b+1, 2b-15]$ 范围内的话，数量是 $\\sum_{b+1 \\le a \\le 2b-15}{c[b] \\cdot c[a]}$ 。所以最终的总数量就是：<br>$$<br>\\begin{aligned}<br>S_b &amp;= \\sum_{b+1 \\le a \\le 2b-15}{c[b] \\cdot c[a]} + c[b] \\cdot (c[b] - 1) \\\\<br>&amp;= c[b] \\cdot (\\sum_{b \\le a \\le 2b-15}{c[a]} - 1)<br>\\end{aligned}<br>$$<br>如果用前缀和 $sum$ 来预处理 $c$ 数组的话，可以进一步简化为：<br>$$<br>S_b = c[b] \\cdot (sum[2b-15] - sum[b-1] - 1)<br>$$<br>考虑到 $2b-15$ 可能会大于数组中年龄的最大值，所以我们设置一个阈值来截断它。最终的总数量就是 $\\sum_{b}{S_b}$ ，这里 b 的取值范围是有讲究的。因为不等式需要满足 $b \\le 2b-15$ ，所以 $b \\ge 15$ 。这样最终的时间复杂度降到了 $O(MA)$ ，其中 MA 表示年龄的最大值。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numFriendRequests</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> ages<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MA <span class=\"token operator\">=</span> <span class=\"token number\">120</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> ages<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>ages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> MA<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">15</span><span class=\"token punctuation\">;</span> b <span class=\"token operator\">&lt;=</span> MA<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">[</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>MA<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>b<span class=\"token number\">-15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> sum<span class=\"token punctuation\">[</span>b<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numFriendRequests</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ages<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        MA <span class=\"token operator\">=</span> <span class=\"token number\">120</span>\n        count<span class=\"token punctuation\">,</span> S <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        n<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>ages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> age <span class=\"token keyword\">in</span> ages<span class=\"token punctuation\">:</span>\n            count<span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> S<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> b <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> MA<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>min<span class=\"token punctuation\">(</span>MA<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>b<span class=\"token number\">-15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> S<span class=\"token punctuation\">[</span>b<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 21:17:23', '6.9k', 5, 8896);
INSERT INTO `t_article` VALUES ('4a7c5755723545c7b852a0c7acb7b005', '编程算法', 17, '【每日算法Day 98】慈善赌神godweiyang教你算骰子点数概率！', 'https://picsum.photos/1920/1080?random&rand=0.30217058877248204', '题目链接LeetCode 面试题60. n个骰子的点数 题目描述把 n 个骰子扔在地上，所有骰子朝上一面的点数之和为 s。输入 n，打印出 s 的所有可能的值出现的概率。 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof/\" title=\"LeetCode 面试题60. n个骰子的点数\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题60. n个骰子的点数</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>把 <code>n</code> 个骰子扔在地上，所有骰子朝上一面的点数之和为 <code>s</code>。输入 <code>n</code>，打印出 <code>s</code> 的所有可能的值出现的概率。</p> \n<p>你需要用一个浮点数数组返回答案，其中第 <code>i</code> 个元素代表这 <code>n</code> 个骰子所能掷出的点数集合中第 <code>i</code> 小的那个的概率。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= n &lt;= 11</code></li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n1\n输出:\n[0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n2\n输出:\n[0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>令 $dp[n][s]$ 表示投掷 $n$ 个骰子，点数为 $s$ 的方法数。那么可以根据最后一个骰子的点数情况（$1$ 到 $6$），递归进行计算：<br>$$<br>dp[n][s] = \\sum_{i=1}^{6}{dp[n-1][s-i]}<br>$$<br>当然还得加一些约束，例如 $n-1$ 个骰子的点数范围是 $[n-1, 6(n-1)]$ ，所以一定有 $n-1 \\le s-i \\le 6(n-1)$ ，即 $s-6(n-1) \\le i \\le s-(n-1)$。所以综上 $i$ 的范围是 $\\max{\\{1, s-6(n-1)\\}} \\le i \\le \\min{\\{6, s-(n-1)\\}}$，最后的转移方程就是：<br>$$<br>dp[n][s] = \\sum_{i=\\max{\\{1, s-6(n-1)\\}}}^{\\min{\\{6, s-(n-1)\\}}}{dp[n-1][s-i]}<br>$$<br>但是，考虑到在计算 $n-1$ 个骰子时，如果 $i &lt; s-6(n-1)$ ，那么 $s-i &gt; 6(n-1)$ ，也就是 $dp[n-1][s-i]$ 是根本不会被计算的。所以初始化的时候如果都是 $0$ ，那么就不用管这个下界了，也就是转移方程为：<br>$$<br>dp[n][s] = \\sum_{i=1}^{\\min{\\{6, s-(n-1)\\}}}{dp[n-1][s-i]}<br>$$<br>此外，因为每次计算只会用到 $n-1$ 个骰子的方法数，所以第一个维度可以省去。但是注意计算的时候 $s$ 就得逆序遍历了，这样才不会覆盖掉 $n-1$ 个骰子的方案数，造成后面的计算错误。</p> \n<p>最后答案就是 $\\frac{dp[n][s]}{6^n}$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"动态规划-空间优化（c-）\"><a href=\"#动态规划-空间优化（c-）\" class=\"headerlink\" title=\"动态规划+空间优化（c++）\"></a>动态规划+空间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token operator\">*</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span> s <span class=\"token operator\">&gt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">double</span> total <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token operator\">*</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-02-08 16:22:03', '3.7k', 11, 5212);
INSERT INTO `t_article` VALUES ('4a9f509446be4a3eb5da6816c2ba52e4', '编程算法', 32, '只用几行代码，我让模型『训练』加速了3倍以上！', 'https://picsum.photos/1920/1080?random&rand=0.7172179687589348', '最近总有学妹问我，论文要截稿了，模型来不及跑怎么办？ 还有学妹问我，有好多idea，验证一个就要跑一周怎么办？ 这时候我想起了下面这张图，我想这句话反映了大多数从事人工智能的科研工作者们目前的状态。 于是我告诉学妹，想要快，找我就对了，我', '<p>最近总有学妹问我，论文要截稿了，模型来不及跑怎么办？</p> \n<p>还有学妹问我，有好多idea，验证一个就要跑一周怎么办？</p> \n<p>这时候我想起了下面这张图，我想这句话反映了大多数从事人工智能的科研工作者们目前的状态。</p> \n<p><img src=\"1.png\" alt></p> \n<p>于是我告诉学妹，想要快，找我就对了，我教你怎样让你的模型训练加速3倍以上！</p> \n<p>这里我们需要用到的就是字节跳动AI Lab最近开源的训练加速引擎——LightSeq。</p> \n<p><img src=\"2.png\" alt></p> \n<p>具体的原理这里就不做过多介绍了，另一篇文章里写的很详细：<a href=\"https://bytedance.feishu.cn/docs/doccn9w7UdOYcEOD99FjFVpdFzf#\" target=\"_blank\" rel=\"noopener\">训练加速3倍！字节跳动推出业界首个NLP模型全流程加速引擎</a>。今天我来教大家如何使用LightSeq。</p> \n<h2 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h2>\n<p>LightSeq依赖第三方库Ninja对CUDA进行编译，所以先装它：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install ninja<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<h3 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h3>\n<p>你可以从源码进行安装，使用如下命令：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">git clone https://github.com/bytedance/lightseq.git\ncd lightseq\npip install -e .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>如果你想执行LightSeq提供的现成样例，或者使用它的单元测试工具，那最好从源码安装。</p> \n<h3 id=\"pip安装\"><a href=\"#pip安装\" class=\"headerlink\" title=\"pip安装\"></a>pip安装</h3>\n<p>当然如果你想直接调用LightSeq的接口，不需要它的样例或者单元测试工具，我更推荐你用下面pip的方式安装，更加方便：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install lightseq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<h2 id=\"使用教程\"><a href=\"#使用教程\" class=\"headerlink\" title=\"使用教程\"></a>使用教程</h2>\n<p>这次讲解的所有样例都放在了<code>lightseq/training/examples</code>目录下，推荐大家采用上面源码安装的方式安装LightSeq，这样可以直接运行样例。</p> \n<h3 id=\"Hugging-Face\"><a href=\"#Hugging-Face\" class=\"headerlink\" title=\"Hugging Face\"></a>Hugging Face</h3>\n<p>Hugging Face是目前用的最多的预训练模型库了吧，主要是用起来太方便了，模型也很全。直接<code>pip install transformers</code>安装即可。</p> \n<p>以BERT在NER任务上微调为例，直接运行LightSeq提供的脚本就行：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sh lightseq/training/examples/huggingface/run_ner.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<h3 id=\"Fairseq\"><a href=\"#Fairseq\" class=\"headerlink\" title=\"Fairseq\"></a>Fairseq</h3>\n<p>Fairseq是目前最主流的序列生成库之一，用来做机器翻译、文本生成等任务都是非常方便的。安装的话也很简单，直接<code>pip install fairseq</code>即可。</p> \n<p>LightSeq同样提供了现成的运行脚本，如果想运行LightSeq加速后的模型，执行如下命令：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">sh lightseq/training/examples/fairseq/ls_fairseq_wmt14en2de.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>再来看看细节，一般如果我们想用Fairseq来训练一个机器翻译模型，通常首先会准备好数据集，然后执行如下命令：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">fairseq-train DATA_DIR \\\n    --arch transformer_wmt_en_de_big_t2t \\\n    --optimizer adam \\\n    --criterion label_smoothed_cross_entropy \\\n    ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>注意这里我们只列出了同LightSeq有关的三个参数：<code>--arch</code>、<code>--optimizer</code>和<code>--criterion</code>，分别指定了模型结构、参数优化器和损失函数。</p> \n<p>如果想用LightSeq进行加速，直接将上面的运行命令改为下面这样：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">lightseq-train DATA_DIR \\\n    --arch ls_transformer_wmt_en_de_big_t2t \\\n    --optimizer ls_adam \\\n    --criterion ls_label_smoothed_cross_entropy \\\n    ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>注意改动的地方有4个。<code>fairseq-train</code>改成<code>lightseq-train</code>，这是为了导入LightSeq的目录。<code>--arch</code>、<code>--optimizer</code>和<code>--criterion</code>都加上了<code>ls_</code>前缀，这样就快速替换为了LightSeq的组件。</p> \n<h3 id=\"自定义模型\"><a href=\"#自定义模型\" class=\"headerlink\" title=\"自定义模型\"></a>自定义模型</h3>\n<p>当然绝大多数时候你可能只是想自己搭建一个Transformer模型，然后用来做自己的事情。</p> \n<p>以编码层为例，你只需要为每一层创建一个配置对象，然后用它创建LightSeq的编码层即可。</p> \n<p>我写了一份完整的训练代码，非常浅显易懂，看注释就行了：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>pytorch<span class=\"token punctuation\">.</span>transformer_encoder_layer <span class=\"token keyword\">import</span> LSTransformerEncoderLayer\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    inputs <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> masks<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    opt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        opt<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        outputs <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span>\n        loss <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        opt<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> epoch <span class=\"token operator\">%</span> <span class=\"token number\">200</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoch {:&gt;3d}: loss = {:&gt;5.3f}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 定义LightSeq配置</span>\n    config <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n        hidden_size<span class=\"token operator\">=</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span>\n        intermediate_size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        nhead<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>\n        attn_prob_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        activation_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        hidden_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        pre_layer_norm<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span><span class=\"token number\">0</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 随机生成输入</span>\n    bsz<span class=\"token punctuation\">,</span> sl <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span>\n    inputs <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>bsz<span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">)</span>\n    masks <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>bsz<span class=\"token punctuation\">,</span> sl<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 定义LightSeq编码层并进行训练</span>\n    model <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span>\n    train<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> inputs<span class=\"token punctuation\">,</span> masks<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"训练速度\"><a href=\"#训练速度\" class=\"headerlink\" title=\"训练速度\"></a>训练速度</h2>\n<p>说了这么多，实际速度到底怎么样？我用Fairseq测了一下训练的总耗时：</p> \n<p><img src=\"4.png\" alt></p> \n<p>不同模型大小、不同批处理大小、不同显卡上加速效果都是有区别的，但总体上都能缩短一半左右的训练时间。</p> \n<p>如果你的显卡比较老旧（我相信大多数学校实验室都是这样的），显存又比较小，那么批处理大小只能设置的很小，那加速比甚至能达到3倍以上。</p> \n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2>\n<p>学妹试了直叫好，让我下次别再这么快了。</p> \n<p><img src=\"6.png\" alt></p> \n<p>你也别忘了点个star，让更多的人享受到极速的快乐。</p> \n<p><img src=\"7.png\" alt></p> \n<p><strong>LightSeq地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p><img src=\"5.png\" alt></p>', '2022-04-22 17:54:26', '7.8k', 8, 8544);
INSERT INTO `t_article` VALUES ('4b2339b0715740248e7cb9af0723a8d0', '随笔', 9, '5W2H | 关于写博客的七点反思', 'https://picsum.photos/1920/1080?random&rand=0.3514564735004013', '关注公众号【算法码上来】，每日算法干货马上就来！ When？什么时候开始写的？第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"When？什么时候开始写的？\"><a href=\"#When？什么时候开始写的？\" class=\"headerlink\" title=\"When？什么时候开始写的？\"></a>When？什么时候开始写的？</h2>\n<p>第一次写博客是 2015 年了，在 CSDN 和博客园上面，当时写文章是为了记录 ACM 竞赛的题解，陆陆续续写了几十篇。但是最后还是没有坚持下去，主要还是因为 CSDN 和博客园的体验太差了，写起文章来很难受，又丑又慢。另一个原因是， CSDN 发个文章还需要审核，定制主题自由度也太差。</p> \n<p>第二次就是 2017 年暑假了，当时自己建了个人博客，域名是：<a href=\"https://godweiyang.com/\">godweiyang.com</a>。当时的想法是，个人博客好好看，有各种主题，如果会点前端知识，还能自己魔改。个人博客主要更新的就是自然语言处理的知识了，主要都是些论文的阅读赏析。另外还更新一些计算机相关的基础知识，主要考虑到绝大多数人并不会对枯燥又专业的自然语言处理感兴趣。算法题解的话最近也开始更新起来了，主要写一些 LeetCode上面的题解。</p> \n<p>最后就是知乎专栏和微信公众号了，这两个平台是最近才搞的，主要把个人博客的文章同步更新过去，内容都差不多。微信公众号本来不想搞的，不支持 markdown ，写起来挺麻烦的。但是考虑到以后的发展，以及可能会有一些变现的操作，还是重操旧业了（其实我公众号两年前就注册过了，只是一直没有更新）。</p> \n<h2 id=\"Why？为什么会想起来写博客？\"><a href=\"#Why？为什么会想起来写博客？\" class=\"headerlink\" title=\"Why？为什么会想起来写博客？\"></a>Why？为什么会想起来写博客？</h2>\n<p>其实刚开始写博客，主要还是为了记录自己平时学到的一些东西，以后可能还能翻出来复习复习。但是现在看来，基本不会再去翻以前写的东西了。</p> \n<p>另一个目的，也是我写博客最主要的目的，还是想分享我知道的一些东西，能够让更多的人因此受益。因为写博客，其实还是认识了不少天南地北的朋友的，有各个高校甚至初高中的学生，也有工作了很多年想学习学习编程的，也有国外一些名校的学生。不管是谁，我觉得都可以扩展我的人脉，现在微信好友人数上限扩展到了 5000 人了，而我才用了十分之一多一点，什么时候能达到上限也算是圆满了。</p> \n<p>最后，有句话叫做：“不以盈利为目的的博客最后都死亡了”。因为如果不能因此获得任何的收入的话，极少有人有这个毅力坚持更新博客。虽然我也想因此获利，但是暂时我并不想因此改变了初衷，去写一些刻意迎合大众的水文，从而获得粉丝。</p> \n<h2 id=\"What？都写一些什么主题的博客？\"><a href=\"#What？都写一些什么主题的博客？\" class=\"headerlink\" title=\"What？都写一些什么主题的博客？\"></a>What？都写一些什么主题的博客？</h2>\n<p>主要都是与我相关的一些计算机相关知识。最主要的就是深度学习和自然语言处理了，但是因为我是做句法分析的，这个方向受众比较小，如果纯粹写这个方向的内容的话，看的人可能会很少。而如果写深度学习和自然语言处理的入门普及或者综合一点热门一点的方向的话，看得人应该会很多。但是这样又有一个弊端，非常的浪费我时间，因为过于基础的知识对我的提升微乎其微，只适合以后我面试前看看补补基础。而主要我现在重心还在发论文，继续搞学术，所以只能写一些结合我最近所学知识的文章。</p> \n<p>还会写一些算法题解，现在主要在做 LeetCode 上面的中等和困难题目，然后每日一更。尽管网上各种 LeetCode 的题解已经太多了，但是我觉得，大多数的题解都非常的模糊，讲解的很不清楚，抄来抄去的有什么意思？而他们的代码风格，更是让我看不下去，最基本的美观都做不到，代码的简洁精炼就更不用谈了。所以我的目的还是尽量用美观精炼的代码来让更多人的算法思想和代码能力得到提升。</p> \n<p>偶尔，我还会分享一些计算机基础知识，比如怎么搭博客（这是我阅读量最高的一篇博客了）、好用的软件、常用的一些软件的安装配置等等。其实讲道理，我是不愿意写这一类文章的，因为非常的费时费力，需要自己动手模拟一遍，确保能够正确完成才能写进文章。不然就会像很多网上的教程那样，抄来抄去一堆错误，根本没有自己动手实践过。但是这种文章其实对很多人帮助还挺大的，大家也乐意去看，如果你在知乎发的话，你会发现这类文章收藏量都挺高的。如果我以后用空了，我还是会经常把我平时的一些经验分享给大家的，比如 LaTeX 常用写作技巧之类的。</p> \n<p>那么其他火的博客都写些什么呢？我觉得当代人闲暇时候、上厕所刷手机的时候，那些碎片时间是没办法好好学习一些知识的，最爱看的还是有趣的故事，例如 99 行代码做出冰雪奇缘特效、程序员脱发、程序员单身狗啦之类的。这些故事背后的技术可能是很深奥的，但是大多数人并不会去关心，只是会看完惊叹一句“卧槽”而已。其他的吸引人的内容还有资料下载、课程学习（当然基本都是广告）等等。不过我个人目前并不想写这些东西，首先这些新闻类的文章很多地方都有了，写来写去就那么些东西，同质化严重。而资料下载确实是个不错的主意，可以分享好东西给大家，但是我个人最近也没有太多值得珍藏的好资料，况且大多数网上都有现成的，我不赞同为了增加粉丝而不放出链接，把资料放在公众号后台的行为。</p> \n<p>总之，不忘初心，粉丝什么的随缘吧。我非常佛系，即使没人看我也会日常更新，就当记日记不是吗？</p> \n<h2 id=\"Who？写出来的博客都是给谁看的？\"><a href=\"#Who？写出来的博客都是给谁看的？\" class=\"headerlink\" title=\"Who？写出来的博客都是给谁看的？\"></a>Who？写出来的博客都是给谁看的？</h2>\n<p>大多数看我博客的都是自然语言处理相关的学生。就拿我在知乎专栏的粉丝来看，大多数人是来看我的论文赏析的，而少部分人是看到了那篇博客搭建教程来的。至于算法题解，貌似并没有很多人看，可能这一类文章网上实在是太多了，没有什么独特的吸引力。而公众号粉丝，目前为止还很少，绝大多数还都是好友粉丝。主要原因还是公众号太封闭了，很难让好友之外的人知道并且关注你。一个方法可以在知乎等平台引流，但是现在这属于违规操作，最好还是不要干了。</p> \n<p>其实我目标的受众群体还是包括但不仅限于计算机系的学生，像一些计算机基础知识，就算你是个小白，也可以从这里学到很多东西。甚至还有很多考研的学生来咨询我问题，虽然我是保研的，但是很多导师选取、学习方面的问题我还是愿意给出我自己的建议的。我这个人向来喜欢分享，也喜欢倾听，如果别人来问我问题，我基本是会耐心回答的。曾经有啥都不会的小白来问我怎么搭建博客，我得从最基本的命令行教他，讲道理这其实很烦，我都不想教，但我还是会尽量把关键点都告诉他。有人会觉得，我这样最后会得到什么呢？是的，也不赚钱，最多偶尔有些朋友会打赏个红包，我还浪费了大把时间（其实还好，白天工作的时候我都简单回复，晚上一般会详细点），但是认识的人多了，许多人还是多少知道我这个名字的，虽然没啥用，但是也算是种隐形财富吧，以后有什么用再说。</p> \n<h2 id=\"Where？都在什么平台写博客呢？\"><a href=\"#Where？都在什么平台写博客呢？\" class=\"headerlink\" title=\"Where？都在什么平台写博客呢？\"></a>Where？都在什么平台写博客呢？</h2>\n<p>这个其实上面都说过了，我现在文章主要更新在个人博客、知乎专栏、微信公众号和 CSDN 上面，我简要说一些这些平台的优缺点吧。</p> \n<p>个人博客可以个性化定制主题，想怎么好看就怎么好看，还不用发文章审核，想发什么就发什么。但是缺点就是发文章麻烦一点的，步骤略多，并且搜索引擎收录很慢的。</p> \n<p>知乎专栏是我比较喜欢的一个平台，主要是它支持markdown，还可以把公式变成矢量图片，还是挺不错的。但是发知乎文章要注意千万别带着营销、引流等内容，不然容易被人举报被删除甚至禁言。</p> \n<p>微信公众号是我最近才开始运营的，相对而言，它的编辑界面是最不友好的一个，只支持富文本编辑，连markdown都没有。但是也有解决方法，比如我现在用<a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">mdnice.com</a>这个网站，把markdown转换成微信公众号的富文本格式，还是非常好用的。公众号还有个缺点，太封闭了，很难宣传出去，刚开始只能亲朋好友关注关注，但是如果你真的做大了知名度，还是可以借助微信的优势，赚得不少广告钱的。</p> \n<p>CSDN因为几年前被永久封过号，然后现在不知道为什么又被解封了，所以用的不是特别多，主要都是通过知乎专栏自动同步文章过去的。CSDN 好处就是流量大，很多人都在上面搜东西，百度搜出来也基本都是 CSDN ，但是排版是真的真的烂，不过现在好多了，也支持 markdown 了。但是还是谈不上喜欢，广告什么的都太多了，除非迫不得已，我一般不去 CSDN 看技术文章，我一般都是个人博客或者知乎看论文解读之类的。</p> \n<h2 id=\"How？按照什么流程来写博客？\"><a href=\"#How？按照什么流程来写博客？\" class=\"headerlink\" title=\"How？按照什么流程来写博客？\"></a>How？按照什么流程来写博客？</h2>\n<p>其实同时维护好几个平台还是挺累的，你得找到一个最佳的顺序来发布文章，这样才能事半功倍。我一般都是先在个人博客上写好 markdown 文章，然后发布完之后，打开<a href=\"https://mdnice.com/\" target=\"_blank\" rel=\"noopener\">mdnice.com</a>在线编辑网站，把 markdown 粘贴进去，转成微信公众号和知乎专栏的格式，最后分别发布在两个地方就行了。 CSDN 就不用管了，它会每天自动同步知乎专栏的文章的，倒是为我省了不少事。markdown 写作也挺轻松的，完全不用管排版之类的问题，安安心心写内容就行了。</p> \n<p>微信公众号现在设置的是每天早上 8:05 推送，其实稍微晚一点比较好，这样别人的都推送完了，你的就会置顶在最上面。而知乎专栏和个人博客我就随性发布了，想什么时候发就什么时候发，经常会前一天就写好内容，早早的发布出去了。</p> \n<p>我个人现在来看，写一篇博客最累的是敲公式和找图片，当然像我这篇就一个公式和图都没有，是最最轻松的了。我这个人有强迫症，公式一定要手打 LaTeX 公式，然后转成矢量图才行，这样看着又清楚又舒服。遇到复杂的矩阵公式，能把我敲的头晕。这也是我为什么不喜欢 CSDN 的一个原因，上面很多文章公式全是截图，看的我头都大了。</p> \n<h2 id=\"How-much？要花多少时间和金钱来运营维护？\"><a href=\"#How-much？要花多少时间和金钱来运营维护？\" class=\"headerlink\" title=\"How much？要花多少时间和金钱来运营维护？\"></a>How much？要花多少时间和金钱来运营维护？</h2>\n<p>写博客挺花时间的，特别是现在还在为发论文而忙活的时候，可能论文截稿前那段时间甚至我会停更好久哈哈。不过现在放假了，还算比较闲，有功夫搞搞这些。我个人是倾向于白天还是老老实实学习吧，晚上把部分的游戏时间抽出来写会儿文章，更新一波。这样也不算太浪费时间，毕竟就算不写，时间也都用来打游戏了，游戏输了还坏了心情（我的亚索怎么会输？）。</p> \n<p>那什么时候做 LeetCode 呢？我一般都是白天吃饭时，或者走在路上时，手机 app 上随机选一道题，然后吃个饭的时间就能想出个解法，回到实验室后敲一顿代码通过了就行了。这样看来也节约了不少时间嘛，还能和室友一起讨论讨论，帮他提高一波算法能力。</p> \n<p>金钱的话就基本没有花销了，除了开了个素材设计网站的会员（我是真的睿智，用 PS 不就行了嘛，脑子瓦特了充钱了）以外，其他不需要啥了，偶尔还能吃点打赏钱，粉丝太少了，没有广告。</p> \n<p>因为写文章这上面花时间比较多，写出好的文章、不水文章的话花的时间更多，所以很容易坚持不下去。而又要迎合大众的口味，众口难调嘛，又要坚持自己的初心，尽量写对自己提升大的内容，还是比较难以平衡的。特别是粉丝特别少，没有什么人看的时候，你会很想放弃。</p> \n<p>但是，总会有人在你坚持不下去的时候，给你鼓励的目光，支持你继续走下去的。</p>', '2022-04-22 08:08:24', '5.6k', 5, 4268);
INSERT INTO `t_article` VALUES ('4c04262dcc8f4e348cfc6728879301a1', '编程算法', 27, '【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！', 'https://picsum.photos/1920/1080?random&rand=0.06590150047550014', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题62. 圆圈中最后剩下的数字 题目描述$0,1,\\ldots,n-1$ 这 $n$ 个数字排成一个圆圈，从数字 $0$ 开始，每次从这个圆圈里删除第 $', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/\" title=\"LeetCode 面试题62. 圆圈中最后剩下的数字\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题62. 圆圈中最后剩下的数字</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>$0,1,\\ldots,n-1$ 这 $n$ 个数字排成一个圆圈，从数字 $0$ 开始，每次从这个圆圈里删除第 $m$ 个数字。求出这个圆圈里剩下的最后一个数字。</p> \n<p>例如，$0,1,2,3,4$ 这 $5$ 个数字组成一个圆圈，从数字 $0$ 开始每次删除第 $3$ 个数字，则删除的前 $4$ 个数字依次是 $2,0,4,1$，因此最后剩下的数字是 $3$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 5, m = 3\n输出：\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 10, m = 17\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong> </p> \n<ul> \n <li>$1 \\le n \\le 10^5$</li> \n <li>$1 \\le m \\le 10^6$</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h3>\n<p>用一个循环链表按顺序存储 $0$ 到 $n-1$ 中的数，然后每 $m$ 个数删除掉链表中的一个结点，最后剩下的数就是答案了。</p> \n<p>这种方法时间复杂度是 $O(nm)$ ，显然太高了，所以这里也不会给大家实现代码。</p> \n<h3 id=\"递推法\"><a href=\"#递推法\" class=\"headerlink\" title=\"递推法\"></a>递推法</h3>\n<p>首先 $n$ 个人的编号依次是 $0,1,\\ldots,n-1$ ，然后踢掉了编号为 $k = (m-1)\\%n$ 的人，这时候剩下的人编号为 $0,1,\\ldots,k-1,k+1, \\ldots,n-1$ 。</p> \n<p>下一个踢掉的人就要从 $k+1$ 开始数了，所以我们把剩下的人编号从 $k+1$ 开始重新排个序，变成 $k+1, \\ldots, n-1,0,\\ldots,k-1$ 。这样编号又变成连续的了，而问题规模缩减成了 $n-1$ 个人。</p> \n<p>剩下的这 $n-1$ 个人的编号我们做一下映射，映射成 $0,1,\\ldots,n-2$ ，这样就能递推下去求解了。映射的公式就是，映射后的编号为 $x$ ，那么映射之前的编号就是 $(x+k+1)\\%n = (x+m)\\%n$ 。</p> \n<p>也就是说，如果我们求出了 $n-1$ 个人最后剩下的人编号 $x$ ，那么 $n$ 个人最后剩下的人编号就是 $(x+m)\\%n$ 。</p> \n<p>用 $f(n)$ 表示 $n$ 个人最后剩下的人编号，那么就有：<br>$$<br>f(n) = (f(n-1) + m) \\% n<br>$$</p> \n<p>这样的话时间复杂度就降到了 $O(n)$ 。</p> \n<blockquote> \n <p>对于本题这个方法已经够用了，但是如果 $n$ 非常大，比如 $n \\le 10^{12}$ ，但是 $m$ 不是很大，比如 $m \\le 1000$ ，那么这时候这种方法就会超时了。具体的题目请自行百度 HDU 3089 。</p> \n</blockquote> \n<h3 id=\"递推法加速\"><a href=\"#递推法加速\" class=\"headerlink\" title=\"递推法加速\"></a>递推法加速</h3>\n<p>注意观察上面的递推式 $f(n) = (f(n-1) + m) \\% n$ ，如果 $m$ 很小，而 $n$ 很大的话，递推到后面要加很多次 $m$ 才会对 $n$ 求余。所以我们可以直接一下子加很多次 $m$ ，然后再求余，这样就能加速了。</p> \n<p>加了 $t$ 次 $m$ 之后，递推式变成了：<br>$$<br>f(n+t-1) = (f(n-1)+tm)\\%(n+t-1)<br>$$</p> \n<p>假设加了 $t$ 次 $m$ 之后才产生了取余，那么就有 $f(n-1) + tm \\ge n+t-1$ ，即 $t \\ge \\frac{n-f(n-1)-1}{m-1}$ 。所以每次都可以加 $\\left\\lceil \\frac{n-f(n-1)-1}{m-1} \\right\\rceil$ 个 $m$ ，代码实现时用下取整，也就是 $\\left\\lfloor \\frac{n-f(n-1)+m-3}{m-1} \\right\\rfloor$ 。</p> \n<p>此外还需要注意，如果发现 $i-1+t &gt; n$ ，也就是后面都不需要取余了，那么就直接一步加到底，退出循环得到答案。</p> \n<p>这个方法时间复杂度不是很好分析，但应该也是对数级别的。</p> \n<h3 id=\"数学法\"><a href=\"#数学法\" class=\"headerlink\" title=\"数学法\"></a>数学法</h3>\n<p>这个方法在我之前的文章中已经讲过了：<br><a href=\"https://godweiyang.com/2018/04/16/concrete-math-8/\" title=\"韦阳的博客：具体数学-第8课（取整进阶）\">韦阳的博客：具体数学-第8课（取整进阶）</a></p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/35820332\" title=\"知乎专栏：具体数学-第8课（取整进阶）\" target=\"_blank\" rel=\"noopener\">知乎专栏：具体数学-第8课（取整进阶）</a></p> \n<p>知乎高赞回答也整理过了一遍：<br><a href=\"https://www.zhihu.com/question/358255792/answer/974983270\" title=\"世界上有哪些代码量很少，但很牛逼很经典的算法或项目案例？\" target=\"_blank\" rel=\"noopener\">世界上有哪些代码量很少，但很牛逼很经典的算法或项目案例？</a></p> \n<p>大致思想也是重新编号，做编号映射，但是和上面递推法不同的是复杂度降到了对数级别。</p> \n<p>这里就不详细讲了，大家可以去看上面的文章，这里直接给出伪代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">D <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> D <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span>n<span class=\"token punctuation\">:</span>\n    D <span class=\"token operator\">=</span> k\nans <span class=\"token operator\">=</span> mn<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>D<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>其中 $k = \\left\\lceil \\frac{m}{m-1}D \\right\\rceil$ 。</p> \n<p>不过这个这里的编号是 $1$ 到 $n$ ，所以最后答案要减去 $1$ 。</p> \n<p>这种方法将时间复杂度降到了 $O(\\log_{\\frac{m}{m-1}}{(m-1)n})$ ，用对数换底公式后得到 $O(\\frac{\\ln{(m-1)}+\\ln{(n)}}{\\ln{(m)}-\\ln{(m-1)}})$ 。</p> \n<p>可以看出，这种方法适用于 $n$ 特别大，但是 $m$ 特别小的情况。否则的话如果 $m$ 很大，分母会非常小，导致复杂度非常高。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"递推法（c-）\"><a href=\"#递推法（c-）\" class=\"headerlink\" title=\"递推法（c++）\"></a>递推法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>last <span class=\"token operator\">+</span><span class=\"token operator\">=</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> last<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"递推法加速（c-）\"><a href=\"#递推法加速（c-）\" class=\"headerlink\" title=\"递推法加速（c++）\"></a>递推法加速（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span>last<span class=\"token operator\">+</span>m<span class=\"token number\">-3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>t<span class=\"token number\">-1</span> <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                last <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">(</span>last <span class=\"token operator\">+</span><span class=\"token operator\">=</span> t<span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>t<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> last<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数学法（c-）\"><a href=\"#数学法（c-）\" class=\"headerlink\" title=\"数学法（c++）\"></a>数学法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> D <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>D <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            D <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">*</span>D<span class=\"token operator\">+</span>m<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>n<span class=\"token operator\">*</span>m<span class=\"token operator\">-</span>D<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 17:17:08', '4.2k', 5, 7133);
INSERT INTO `t_article` VALUES ('4ce2645471944a9f8b7ecd8277f75af2', '编程算法', 17, '【每日算法Day 87】今天我脱单了，所以大家不用做题了！', 'https://picsum.photos/1920/1080?random&rand=0.11924965247347097', '关注公众号【算法码上来】，每日算法干货马上就来！ 想啥呢，我哪来的女朋友？今天是愚人节，还是给我老老实实做题吧。 题目链接LeetCode 1111. 有效括号的嵌套深度 题目描述 题面太长晦涩不想看，请直接跳到最后一段。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<div align=\"center\">\n <audio controls=\"controls\" height=\"100\" width=\"100\" autoplay=\"autoplay\" loop=\"loop\">\n  <source src=\"zhejiushiaima.mp3\" type=\"audio/mp3\">\n </audio>\n</div> \n<blockquote> \n <p>想啥呢，我哪来的女朋友？今天是愚人节，还是给我老老实实做题吧。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/\" title=\"LeetCode 1111. 有效括号的嵌套深度\" target=\"_blank\" rel=\"noopener\">LeetCode 1111. 有效括号的嵌套深度</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<blockquote> \n <p>题面太长晦涩不想看，请直接跳到最后一段。</p> \n</blockquote> \n<p><strong>有效括号字符串</strong> 仅由 <code>\"(\"</code> 和 <code>\")\"</code> 构成，并符合下述几个条件之一：</p> \n<ul> \n <li>空字符串</li> \n <li>连接，可以记作 <code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li> \n <li>嵌套，可以记作 <code>(A)</code>，其中 A 是有效括号字符串</li> \n</ul> \n<p>类似地，我们可以定义任意有效括号字符串 <code>s</code> 的 <strong>嵌套深度</strong> <code>depth(s)</code>：</p> \n<ul> \n <li><code>s</code> 为空时，<code>depth(\"\") = 0</code></li> \n <li><code>s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li> \n <li><code>s</code> 为嵌套情况，<code>depth(\"(\" + A + \")\") = 1 + depth(A)</code>，其中 <code>A</code> 是有效括号字符串</li> \n</ul> \n<p>例如：<code>\"\"</code>，<code>\"()()\"</code>，和 <code>\"()(()())\"</code> 都是有效括号字符串，嵌套深度分别为 <code>0</code>，<code>1</code>，<code>2</code>，而 <code>\")(\"</code> 和 <code>\"(()\"</code> 都不是有效括号字符串。</p> \n<p>给你一个有效括号字符串 <code>seq</code>，将其分成两个不相交的子序列 <code>A</code> 和 <code>B</code>，且 <code>A</code> 和 <code>B</code> 满足有效括号字符串的定义（注意：<code>A.length + B.length = seq.length</code>）。</p> \n<p>现在，你需要从中选出 <strong>任意</strong> 一组有效括号字符串 <code>A</code> 和 <code>B</code>，使 <code>max(depth(A), depth(B))</code> 的可能取值最小。</p> \n<p>返回长度为 <code>seq.length</code> 答案数组 <code>answer</code> ，选择 <code>A</code> 还是 <code>B</code> 的编码规则是：如果 <code>seq[i]</code> 是 <code>A</code> 的一部分，那么 <code>answer[i] = 0</code>。否则，<code>answer[i] = 1</code>。即便有多个满足要求的答案存在，你也只需返回 <strong>一个</strong>。</p> \n<blockquote> \n <p>不是我吹牛，我估计一大部分人看完都不知道题目什么意思。一句话概括就是，给你一个合法的括号序列，你需要将其拆分成两个合法的子序列（不连续），使得两个子序列的括号嵌套深度较大者尽量的小。</p> \n</blockquote> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nseq = \"(()())\"\n输出:\n[0,1,1,1,1,0]\n解释：\n拆成 \"()\" 和 \"()()\" ，最大嵌套深度为 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nseq = \"()(())()\"\n输出:\n[0,0,0,1,1,0,1,1]\n解释：\n拆成 \"()()\" 和 \"()()\" ，最大嵌套深度为 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= text.size &lt;= 10000</code></li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>既然想要两个子序列的嵌套深度中较大者尽量小，那么我们最好能够让两个子序列的嵌套深度相同。</p> \n<p>再考虑任意一个原序列中嵌套深度为 $d$ 的合法子序列，我们要想办法把它拆成两半。那么最优的方法肯定是一半嵌套深度为 $\\lfloor d/2 \\rfloor$ ，一半是 $d - \\lfloor d/2 \\rfloor$ 。这样两个子序列中嵌套深度较大值就是 $\\lceil d/2 \\rceil$，而其它任何分法都会导致较大值大于它。</p> \n<p>那么怎么样才能对半分呢？这个其实随意了，但是最为方便的方法就是，嵌套深度为奇数的作为一个子序列，偶数的作为另一个子序列，这样就对半分了，代码还好写。</p> \n<p>具体实现上，我们用一个变量 $cnt$ 来表示当前括号的嵌套深度，那么遇到左括号就深度加一，遇到右括号嵌套深度就是当前的 $cnt$ ，但是遍历完这个括号之后，深度要减一，然后嵌套深度为奇数的括号位置处标记为 1 就行了。</p> \n<p>伪代码也就是：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">if c = \'(\'\n    cnt := cnt + 1\n    mask := cnt&amp;1\nelse\n    mask := cnt&amp;1\n    cnt := cnt - 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"简化\"><a href=\"#简化\" class=\"headerlink\" title=\"简化\"></a>简化</h3>\n<p>其实我们可以注意到，不管是加一还是减一，奇偶性的变化都是一致的，也就是减一之后的奇偶性和加一之后是相同的。</p> \n<p>所以我们把减一也变成加一，那么不管遇到什么括号，都是 $cnt$ 加一了，那不就变成了下标 $i$ 了吗？</p> \n<p>我们把上面的伪代码按照这种思路改变一下：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">if c = \'(\'\n    cnt := cnt + 1\n    mask := cnt&amp;1\nelse\n    mask := cnt&amp;1\n    cnt := cnt + 1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>然后用下标 $i$ 替换掉 $cnt$ :</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">if c = \'(\'\n    mask := (i+1)&amp;1\nelse\n    mask := i&amp;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>继续改写一下，让形式统一一点：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">if c = \'(\'\n    mask := ~(i&amp;1)\nelse\n    mask := i&amp;1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>那么最后就可以把这两种情况合并了，也就是标记值直接就等于 <code>(i&amp;1)^(c=\'(\')</code> 。</p> \n<p>当然我是从代码的角度，从奇偶性推过来的，官方题解是直接严格证明了正确性：</p> \n<p><a href=\"https://leetcode-cn.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/solution/you-xiao-gua-hao-de-qian-tao-shen-du-by-leetcode-s/\" title=\"官方题解：LeetCode 1111. 有效括号的嵌套深度\" target=\"_blank\" rel=\"noopener\">官方题解：LeetCode 1111. 有效括号的嵌套深度</a></p> \n<p><img src=\"1.jpg\" alt></p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxDepthAfterSplit</span><span class=\"token punctuation\">(</span>string seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">\'(\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxDepthAfterSplit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seq<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> seq<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> c <span class=\"token operator\">==</span> <span class=\"token string\">\'(\'</span><span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                cnt <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"简化（c-）\"><a href=\"#简化（c-）\" class=\"headerlink\" title=\"简化（c++）\"></a>简化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxDepthAfterSplit</span><span class=\"token punctuation\">(</span>string seq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> seq<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\'(\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"简化（python）\"><a href=\"#简化（python）\" class=\"headerlink\" title=\"简化（python）\"></a>简化（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxDepthAfterSplit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> seq<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> c <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">^</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">==</span><span class=\"token string\">\'(\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 16:06:58', '1.8k', 11, 1498);
INSERT INTO `t_article` VALUES ('50e1e43d53e54ccfa40ad2622242d017', '编程算法', 10, '【每日算法Day 105】打家劫舍第二弹：看好你的电瓶车！', 'https://picsum.photos/1920/1080?random&rand=0.7502445391798087', '题目链接LeetCode 213. 打家劫舍 II 往期回顾：打家劫舍 I ：【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！ 题目描述你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/house-robber-ii/\" title=\"LeetCode 213. 打家劫舍 II\" target=\"_blank\" rel=\"noopener\">LeetCode 213. 打家劫舍 II</a></p> \n<p><strong>往期回顾：打家劫舍 I ：</strong><br><a href=\"https://godweiyang.com/2020/04/18/leetcode-198/\" title=\"【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！\">【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p> \n<p>给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,3,2]\n输出:\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,1]\n输出:\n4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题和上一题唯一区别就是首尾只能选一个偷，那么我们可以分为两种情况。</p> \n<p>如果不偷第一个，那么问题就变成了在后 $n-1$ 个里面偷取的最大价值。</p> \n<p>如果不偷最后一个，那么问题就变成了在前 $n-1$ 个里面偷取的最大价值。</p> \n<p>而这两个转化后的问题就没有首尾连接的约束了，可以直接采用上一题的解法求解，转移方程还是：<br>$$<br>dp[i] = \\max{\\{dp[i-1], dp[i-2]+p[i]\\}}<br>$$</p> \n<p>最终取两种情况的较大值就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rob1</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> prepre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            now <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> prepre<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            prepre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">rob1</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">rob1</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 15:51:01', '5.1k', 4, 3442);
INSERT INTO `t_article` VALUES ('53a6da5a9e42452ab80b02bdac95fdcc', '编程算法', 9, '【每日算法Day 107】面试必考：良心推荐，一题三解，不看后悔一辈子', 'https://picsum.photos/1920/1080?random&rand=0.007628618908686269', '可能有些同学只会写 python ，看不懂 c++。但是一个是因为我懒，多解时不想再写一遍 python 了，一个是理解算法最重要，语言不重要。今天学妹发来一张图，我觉得说的很好。 题目链接LeetCode 1248. 统计「优美子数', '<blockquote> \n <p>可能有些同学只会写 <code>python</code> ，看不懂 <code>c++</code>。但是一个是因为我懒，多解时不想再写一遍 <code>python</code> 了，一个是理解算法最重要，语言不重要。今天学妹发来一张图，我觉得说的很好。</p> \n</blockquote> \n<p><img src=\"1.jpg\" alt=\"院长大大如是说\"></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/count-number-of-nice-subarrays/\" title=\"LeetCode 1248. 统计「优美子数组」\" target=\"_blank\" rel=\"noopener\">LeetCode 1248. 统计「优美子数组」</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code>。</p> \n<p>如果某个<strong>连续</strong>子数组中恰好有 <code>k</code> 个奇数数字，我们就认为这个子数组是「优美子数组」。</p> \n<p>请返回这个数组中「优美子数组」的数目。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,1,2,1,1], k = 3\n输出:\n2\n解释：\n包含 3 个奇数的子数组是 [1,1,2,1] 和 [1,2,1,1] 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [2,4,6], k = 1\n输出:\n0\n解释：\n数列中不包含任何奇数，所以不存在优美子数组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [2,2,2,1,2,2,1,2,2,2], k = 2\n输出:\n16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p><strong>为了方便表示，我们下面统一将奇数变为 <code>1</code> ，偶数变为 <code>0</code> ，不难发现这是等价于原来题意的。</strong></p> \n<h3 id=\"统计奇数位置\"><a href=\"#统计奇数位置\" class=\"headerlink\" title=\"统计奇数位置\"></a>统计奇数位置</h3>\n<p>我们发现，如果两个 <code>1</code> 之间（包含自身）一共包含了 <code>k</code> 个 <code>1</code> ，那么这 <code>k</code> 个 <code>1</code> 可以构成的连续子数组个数就是 <strong>左边 <code>0</code> 的个数加一</strong> 乘上 <strong>右边 <code>0</code> 的个数加一</strong>。</p> \n<p>那么如何统计每个 <code>1</code> 前后 <code>0</code> 的个数呢？其实只需要记录一下每个 <code>1</code> 的位置，然后直接用相邻两个 <code>1</code> 的位置相减就可以得到中间 <code>0</code> 的个数加一了。</p> \n<p>所以直接记录每个 <code>1</code> 的位置，为了处理边界，我们还需要在最开始添加上虚拟位置 <code>-1</code> ，在最后添加虚拟位置 <code>n</code> 。</p> \n<p>然后对于第 $i$ 个 <code>1</code> 来说，如果将它作为子数组第一个 <code>1</code> ，那么最后一个 <code>1</code> 应该是第 $i+k-1$ 个 <code>1</code> 。所以直接计算两边 <code>0</code> 的数量，再加一相乘就行了：<br>$$<br>(pos[i] - pos[i-1])\\cdot(pos[i+k] - pos[i+k-1])<br>$$</p> \n<p>最后遍历所有的 <code>i</code> ，将第 $i$ 个 <code>1</code> 作为起点，然后累加答案就行了。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h3>\n<p>主要思想还是跟上面方法一样，但是不用直接计算 <strong>左边 <code>0</code> 的个数加一</strong> 乘上 <strong>右边 <code>0</code> 的个数加一</strong>。只需要计算 <strong>左边 <code>0</code> 的个数加一</strong> ，然后右指针如果指着 <code>0</code> ，就加上这个值，一直加到右指针为 <code>1</code> 为止。</p> \n<p>所以只需要用常数个变量就行了，<code>even</code> 记录子数组前面有多少个 <code>0</code> ，<code>cnt</code> 记录当前子数组有多少个 <code>1</code> 。用 <code>l</code> 指向子数组开头，<code>r</code> 指向子数组结尾。</p> \n<p>如果 <code>cnt = k</code> ，那就说明子数组中正好有 <code>k</code> 个 <code>1</code> 。那就右移 <code>l</code> ，直到遇到 <code>1</code> 为止，这样就能统计出左边有多少个 <code>0</code> ，记录在 <code>even</code> 中。然后 <code>l</code> 右移跳过这个 <code>1</code> ，同时 <code>cnt</code> 减一。</p> \n<p>如果 <code>cnt &lt; k</code> ，那就说明 <code>1</code> 的数量不够，<code>r</code> 继续右移就行了。同时每移动一次，答案都要加上 <code>even</code> 值，因为你之前 <code>cnt = k</code> 时记录了一下左边 <code>0</code> 的数量，现在右边每一个 <code>0</code> 都得加上它。其实除了初始阶段，其余时候 <code>cnt</code> 都是等于 <code>k-1</code> 的。而初始阶段 <code>even = 0</code> ，所以加上也没事，可以合并写。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ 。</p> \n<h3 id=\"前缀和\"><a href=\"#前缀和\" class=\"headerlink\" title=\"前缀和\"></a>前缀和</h3>\n<p>遍历原数组中每个位置 $i$，如果 $i$ 之前（包含自身） <code>1</code> 的个数一共 <code>odd</code> 个（也就是前缀和），那么我们只需要看有多少个位置 $j &lt; i$ 满足 <code>1</code> 的前缀和等于 <code>odd-k</code> ，那么 $[j+1, i]$ 就是正好包含 <code>k</code> 个 <code>1</code> 的子数组。</p> \n<p>所以我们只需要用一个计数数组来记录一下前缀和对应的出现次数就行了，然后每次取出 <code>odd-k</code> 的次数加到答案里就行了。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"统计奇数位置（c-）\"><a href=\"#统计奇数位置（c-）\" class=\"headerlink\" title=\"统计奇数位置（c++）\"></a>统计奇数位置（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfSubarrays</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> pos<span class=\"token punctuation\">;</span>\n        pos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        pos<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span>k <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"双指针（c-）\"><a href=\"#双指针（c-）\" class=\"headerlink\" title=\"双指针（c++）\"></a>双指针（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfSubarrays</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> even <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&lt;</span> k <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                even <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> even<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                cnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> even<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"前缀和（c-）\"><a href=\"#前缀和（c-）\" class=\"headerlink\" title=\"前缀和（c++）\"></a>前缀和（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numberOfSubarrays</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        count<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> odd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            odd <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>odd <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>odd<span class=\"token operator\">-</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">[</span>odd<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-09-14 12:07:19', '1.9k', 4, 4685);
INSERT INTO `t_article` VALUES ('54a3460ac01e41f8aafea9b12e31ebd0', '编程算法', 4, '【每日算法Day 101】字节跳动 AI Lab 精选面试编程题', 'https://picsum.photos/1920/1080?random&rand=0.966595735091356', '今天字节三面结束了，超越妹妹保佑我通过吧！今天更新两道同学之前面试 AI Lab 时遇到的题。 0-1 背包问题（浮点数）0-1 背包问题，一共 n &lt; 20 个物品，每个物品价格 p[i] （浮点数），重量 w[i] （浮点数）', '<blockquote> \n <p>今天字节三面结束了，超越妹妹保佑我通过吧！今天更新两道同学之前面试 AI Lab 时遇到的题。</p> \n</blockquote> \n<h2 id=\"0-1-背包问题（浮点数）\"><a href=\"#0-1-背包问题（浮点数）\" class=\"headerlink\" title=\"0-1 背包问题（浮点数）\"></a>0-1 背包问题（浮点数）</h2>\n<p>0-1 背包问题，一共 <code>n &lt; 20</code> 个物品，每个物品价格 <code>p[i]</code> （浮点数），重量 <code>w[i]</code> （浮点数），背包容量 <code>M</code> （浮点数）。求最大能装的价值是多少？</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n20 678.91\n23.56 51.56\n31.45 23.56\n62.54 45.62\n15.32 42.23\n12.32 65.32\n65.12 32.45\n15.65 45.78\n62.15 98.32\n32.15 45.62\n15.44 95.32\n45.65 99.45\n32.15 22.48\n23.56 51.56\n31.45 23.56\n62.54 45.62\n15.32 42.23\n12.32 65.32\n65.12 32.45\n15.65 45.78\n62.15 98.32\n输出：\n1050.07<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>因为这里全部都是浮点数，所以没有办法直接用普通的动态规划来做，这里我提供几个思路。</p> \n<p><strong>方法1：</strong><br>如果小数点只有两位的话，很简单，所有数字统一乘以 100 ，那么就都变成整数了。然后就可以直接用普通的 0-1 背包方法来做。</p> \n<p><strong>方法2：</strong><br>因为 <code>n &lt; 20</code> ，所以直接二进制枚举所有物品可能，然后取出重量小于背包容量，且价格最高的那一种就行了。时间复杂度 $O(n 2^n)$ ，勉强可以接受。</p> \n<p><strong>方法3：</strong><br>将 <code>n</code> 个物品平均分成两份，对每一份做二进制枚举，然后保存所有可能的总重量和对应的总价格。保存在两个数组中，记为 <code>a</code> 和 <code>b</code> ，分别表示两份的所有可能情况。</p> \n<p>预处理出 <code>b</code> 中重量小于等于 <code>b[j].w</code> 的最大价格，保存在 <code>maxp[j]</code> 中。</p> \n<p>分别按照 <code>w</code> 排序，然后用双指针，从重量小的开始遍历 <code>a</code> 中每个元素 <code>a[i]</code> ，在 <code>b</code> 中找出重量最高的那个满足 <code>a[i].w + b[j].w</code> 不超过背包容量的 <code>j</code> 。</p> \n<p>然后 <code>i</code> 移动到 <code>i+1</code> ，也就是重量增加了，那么 <code>j</code> 只能减小了，直到减小到 <code>a[i].w + b[j].w</code> 再次不超过背包容量。然后直接取预处理好的 <code>maxp[j]+a[i].p</code> 和最优答案比较就行了。</p> \n<p>最终时间复杂度是 $(n/2)2^{n/2} + n \\log (n/2)$ ，相比上面直接二进制枚举所有情况，大大降低了呀。</p> \n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">22</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> node <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> w<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> w <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> M<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">w</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lf%lf\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ca <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cb <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> tot_w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tot_p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tot_w <span class=\"token operator\">+</span><span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                tot_p <span class=\"token operator\">+</span><span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tot_w <span class=\"token operator\">&gt;</span> M<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tot_w <span class=\"token operator\">&lt;=</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span>ca<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> tot_w<span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>ca<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> tot_p<span class=\"token punctuation\">;</span>\n            ca<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> tot_w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tot_p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                tot_w <span class=\"token operator\">+</span><span class=\"token operator\">=</span> w<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                tot_p <span class=\"token operator\">+</span><span class=\"token operator\">=</span> p<span class=\"token punctuation\">[</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tot_w <span class=\"token operator\">&gt;</span> M<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tot_w <span class=\"token operator\">&lt;=</span> M<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            b<span class=\"token punctuation\">[</span>cb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">=</span> tot_w<span class=\"token punctuation\">;</span>\n            b<span class=\"token punctuation\">[</span>cb<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> tot_p<span class=\"token punctuation\">;</span>\n            cb<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>ca<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> b<span class=\"token operator\">+</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxp</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    maxp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cb<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        maxp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> cb<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ca<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w<span class=\"token operator\">+</span>b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>w <span class=\"token operator\">&gt;</span> M<span class=\"token punctuation\">)</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>p<span class=\"token operator\">+</span>maxp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"最小长度子数组\"><a href=\"#最小长度子数组\" class=\"headerlink\" title=\"最小长度子数组\"></a>最小长度子数组</h2>\n<p>给一个正数数组，找出最小长度连续子数组，其和大于等于 <code>m</code>。</p> \n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>这题还是用双指针，首先用 <code>i</code> 遍历每一个位置，然后维护 <code>a[j] ~ a[i]</code> 之间的元素和。如果发现和大于等于 <code>m</code> ，那就更新最小长度，同时增大 <code>j</code> 直到区间和小于 <code>m</code> 。最终时间复杂度是 $O(n)$ 的。</p> \n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> i<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">-</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-10-31 20:19:32', '8.7k', 8, 1183);
INSERT INTO `t_article` VALUES ('5688116180274e2fb464be611c856b6a', '编程算法', 34, '每日算法系列【LeetCode 128】最长连续序列', 'https://picsum.photos/1920/1080?random&rand=0.8138702010385147', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个未排序的整数数组，找出最长连续序列的长度。 要求算法的时间复杂度为 $O(n)$。 示例1 输入： [100, 4, 200, 1, 3, 2] 输出： 4 解释： 最', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个未排序的整数数组，找出最长连续序列的长度。</p> \n<p>要求算法的时间复杂度为 $O(n)$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[100, 4, 200, 1, 3, 2]\n输出：\n4\n解释：\n最长连续序列是 [1, 2, 3, 4]。它的长度为 4。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h3>\n<p>因为题目要求 $O(n)$ 的时间复杂度，所以不能排序。</p> \n<p>我们可以遍历每个数 $x$，假设它是某个连续序列的开头，那么首先要满足 $x-1$ 不在数组中，然后从 $x+1$ 开始逐渐增大，看最大多少还在数组里。</p> \n<p>实现上查询数字在不在数组里可以采用哈希表，复杂度是 $O(1)$ 的。虽然看起来遍历每个数是 $O(n)$ ，以它为开头逐渐增大又是 $O(n)$ ，但是我们其实只会对开头的数遍历最大能达到多少。这样两层循环总的遍历次数其实还是 $O(n)$ 的。</p> \n<p>总的时间复杂度就是 $O(n)$ 。</p> \n<h3 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h3>\n<p>我们可以把任意两个相差为 $1$ 的数之间连上边，那么数组就变成了若干个子树，我们只需要求结点数量最多的那个子树就行了。</p> \n<p>用并查集可以实现连接两个连续序列，合并成一个连续序列，并且快速查询这个序列长度是多少。</p> \n<p>首先初始的时候，数组中的每个数都自成一个子树（它自己就是根结点）。然后遍历每一个数 $x$ ，如果 $x+1$ 也在数组中，那就合并这两个数所在的子树，并且统计合并后的子树大小。</p> \n<p>总的时间复杂度也是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"哈希表（c-）\"><a href=\"#哈希表（c-）\" class=\"headerlink\" title=\"哈希表（c++）\"></a>哈希表（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">longestConsecutive</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"并查集（c-）\"><a href=\"#并查集（c-）\" class=\"headerlink\" title=\"并查集（c++）\"></a>并查集（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> fa<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">==</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> x <span class=\"token operator\">:</span> fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        fa<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">longestConsecutive</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            fa<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fa<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 03:30:48', '6.3k', 11, 7085);
INSERT INTO `t_article` VALUES ('579a5ae0222e4f2d8e5410d46da1e1ca', '编程算法', 22, '每日算法系列【LeetCode 470】用 Rand7() 实现 Rand10()', 'https://picsum.photos/1920/1080?random&rand=0.009486562009130228', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。 不要使用系统的 Math.random(', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>已有方法 rand7 可生成 1 到 7 范围内的均匀随机整数，试写一个方法 rand10 生成 1 到 10 范围内的均匀随机整数。</p> \n<p>不要使用系统的 Math.random() 方法。</p> \n<p><strong>思考</strong></p> \n<ul> \n <li>rand7()调用次数的 期望值 是多少 ?</li> \n <li>你能否尽量少调用 rand7() ?</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>刚看到这题觉得挺有意思的，再看一脸懵逼，这怎么做？后来看了题解才懂了，原来是这个意思。</p> \n<p>题目要求只能给你用 rand7 函数，也就是均匀生成 1 到 7 之间的整数。但是现在要求你生成 1 到 10 之间的整数，那么肯定只生成一次是不够的，因为状态数都不够嘛，那就生成多次看看。</p> \n<p>如果生成两次，那么就得到了两个 1 到 7 之间的整数，然后怎么转换为 1 到 10 呢。如果这两个数两两组合，那么可以得到 49 种状态，可以用来表示 1 到 49 这 49 个数字，如果想要让 1 到 10 均匀分布，那么每个数字最多只能分配 4 次。具体分配情况如下所示：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">1  2  3  4  5  6  7\n8  9  10 1  2  3  4\n5  6  7  8  9  10 1\n2  3  4  5  6  7  8\n9  10 1  2  3  4  5\n6  7  8  9  10 .  .\n.  .  .  .  .  .  .<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>注意：每行下标代表第一个随机数 1 到 7 （r1 表示），每列下标代表第二个随机数 1 到 7 （r2 表示）。而转换后的随机数可以表示为 $(7 (r1 - 1) + r2 - 1) % 10 + 1$ ，注意到最后 9 个数没有用到，因为它们不足以表示 1 到 10 这 10 个数，如果表示了概率就不等了。</p> \n<p>那么如果根据上面式子算出来落在了最后 9 个数范围内怎么办呢？这时候我们就拒绝它，重新生成两个数就行了，直到落在前 40 个数范围里。这种方法的期望采样次数是多少呢？<br>$$<br> \\begin{aligned}<br> E &amp;= 2 + 2 \\cdot \\frac{9}{49} + 2 \\cdot (\\frac{9}{49})^2 + \\cdots \\<br> &amp;= 2 \\sum_{n=0}^{\\infty}{(\\frac{9}{49})^n} \\<br> &amp;= 2 \\cdot \\frac{1}{1-\\frac{9}{49}} \\<br> &amp;=2.45<br> \\end{aligned}<br>$$</p> \n<p>所以平均只需要 2.45 次就可以均匀的采样到 1 到 10 之间的整数啦。那么这背后的数学原理是什么呢？其实就是<strong>拒绝采样</strong>。</p> \n<p>蒙特卡洛方法大家应该都很熟悉了，就是采样来求分布，比如求一个直径为 1 的圆的概率，我们可以用一个边长为 1 的正方形包住它，然后随机往里面扔豆子，扔 10000 个，看最后有多少落在了圆里面，那么除以 10000 就是圆的面积了。</p> \n<p>而拒绝采样跟这类似，就是一个分布 $p(x)$ 形式比较复杂，累积分布函数不好求，所以不好采样。那么我们可以用一个标准分布 $q(x)$ 来近似它，并且用系数 $k$ 来控制 $q(x)$ 的大小，使得 $k \\cdot q(x) \\ge p(x)$ ，这就类似于上面的用正方形包住了圆形嘛。 然后 $q(x)$ 是好采样的嘛，所以根据 $q(x)$ 采样出一个 $x’$ ，然后再在 0 到 $k \\cdot q(x’)$ 之间采样一个数 $t$，如果 $t$ 落在了 0 到 $p(x’)$ 之间，那就接受这个采样，否则就拒绝它，重新采样。这种方法采出来的 $x’$ 是服从分布 $p(x)$ 的，因为你采样得到 $x’$ 的概率是 $q(x’)$ ，而接受的概率是 $\\frac{p(x’)}{k \\cdot q(x’)}$ ，所以最终接受 $x’$ 的概率就是 $\\frac{p(x’)}{k}$ 。因此 $k$ 要设置的尽量小，这样接受的概率才大，期望的采样次数才少。但是又不能设置太小，因为要满足 $k \\cdot q(x) \\ge p(x)$ 的前提条件才行。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">// The rand7() API is already defined for you.</span>\n<span class=\"token comment\" spellcheck=\"true\">// int rand7();</span>\n<span class=\"token comment\" spellcheck=\"true\">// @return a random integer in the range 1 to 7</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rand10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> r1<span class=\"token punctuation\">,</span> r2<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n            r1 <span class=\"token operator\">=</span> <span class=\"token function\">rand7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r2 <span class=\"token operator\">=</span> <span class=\"token function\">rand7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            num <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r1 <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">7</span> <span class=\"token operator\">+</span> r2<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&gt;</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题题目虽简单，背后的思想还是很有意思的，拒绝采样可以用在深度学习中的很多应用场景里，特别是你的分布很难进行采样的时候，就可以用拒绝采样来模拟。</p> \n<p>当然这题还有其他采样方法可以缩小期望采样次数，比如如何利用这 9 个被拒绝的点呢？留给大家思考（其实是我懒得写了）。</p>', '2021-03-08 05:00:07', '1.3k', 6, 5962);
INSERT INTO `t_article` VALUES ('58179017c044416eb8f456ed9bfa4a68', '深度学习', 15, '让大家久等了，BERT推理加速终于开源了', 'https://picsum.photos/1920/1080?random&rand=0.3655799842630856', '前几个月一直有不少小伙伴问我要LightSeq的BERT推理加速代码，当时内部已经使用了，但是一直没空整理开源。 现在代码终于整理好了，写了一个简单的样例，大家有需要的可以使用起来了。 实现原理这里我直接使用预训练好的BERT模型，用户只需', '<p>前几个月一直有不少小伙伴问我要<strong>LightSeq的BERT推理加速代码</strong>，当时内部已经使用了，但是一直没空整理开源。</p> \n<p>现在代码终于整理好了，写了一个简单的样例，大家有需要的可以使用起来了。</p> \n<h2 id=\"实现原理\"><a href=\"#实现原理\" class=\"headerlink\" title=\"实现原理\"></a>实现原理</h2>\n<p>这里我直接使用预训练好的BERT模型，用户只需要输入一个带有<code>[MASK]</code>标记的句子，就可以自动预测出完整的句子。</p> \n<p>例如我输入“巴黎是[MASK]国的首都”，那么模型就会输出“巴黎是法国的首都。”。</p> \n<p>LightSeq已经<strong>完美支持了BERT模型的快速推理</strong>，代码近期已经开源：<br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p>BERT推理使用样例可以参考<code>examples/inference/python</code>目录下的<code>ls_bert.py</code>文件。我们用LightSeq来加速BERT推理试试。</p> \n<p>首先需要安装LightSeq和Hugging Face：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install lightseq transformers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>然后需要将Hugging Face的BERT模型导出为LightSeq支持的HDF5模型格式，运行<code>examples/inference/python</code>目录下的<code>hf_bert_export.py</code>文件即可，运行前将代码的第167-168两行修改为下面这样，指定使用中文版本的BERT预训练模型。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">output_lightseq_model_name <span class=\"token operator\">=</span> <span class=\"token string\">\"lightseq-bert-base-chinese\"</span>\ninput_huggingface_bert_model <span class=\"token operator\">=</span> <span class=\"token string\">\"bert-base-chinese\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre> \n<p>然后就会在运行目录下生成一个<code>lightseq-bert-base-chinese.hdf5</code>模型文件，导出就成功啦。</p> \n<p>最后使用LightSeq进行推理即可：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> AutoTokenizer<span class=\"token punctuation\">,</span> AutoModelForMaskedLM\n<span class=\"token keyword\">import</span> lightseq<span class=\"token punctuation\">.</span>inference <span class=\"token keyword\">as</span> lsi\n\ntokenizer <span class=\"token operator\">=</span> AutoTokenizer<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"bert-base-chinese\"</span><span class=\"token punctuation\">)</span>\nhf_model <span class=\"token operator\">=</span> AutoModelForMaskedLM<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"bert-base-chinese\"</span><span class=\"token punctuation\">)</span>\nhf_model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\nls_model <span class=\"token operator\">=</span> lsi<span class=\"token punctuation\">.</span>Bert<span class=\"token punctuation\">(</span><span class=\"token string\">\"lightseq-bert-base-chinese.hdf5\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n    raw_text <span class=\"token operator\">=</span> input<span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入中文句子，要预测的字符用#代替：\\n&gt; \"</span><span class=\"token punctuation\">)</span>\n    input_text <span class=\"token operator\">=</span> raw_text<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[MASK]\"</span><span class=\"token punctuation\">)</span>\n    inputs <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>input_text<span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">)</span>\n    input_ids <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span>\n    mask <span class=\"token operator\">=</span> inputs<span class=\"token punctuation\">[</span><span class=\"token string\">\"attention_mask\"</span><span class=\"token punctuation\">]</span>\n\n    outputs <span class=\"token operator\">=</span> ls_model<span class=\"token punctuation\">.</span>infer<span class=\"token punctuation\">(</span>input_ids<span class=\"token punctuation\">,</span> mask<span class=\"token punctuation\">)</span>\n    logits <span class=\"token operator\">=</span> hf_model<span class=\"token punctuation\">.</span>cls<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>Tensor<span class=\"token punctuation\">(</span>outputs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    output_ids <span class=\"token operator\">=</span> logits<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    res_text <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_decode<span class=\"token punctuation\">(</span>output_ids<span class=\"token punctuation\">)</span>\n\n    res_text <span class=\"token operator\">=</span> res_text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    output_text <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>raw_text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>raw_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> raw_text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">:</span>\n            output_text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res_text<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&gt; \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>output_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"效果演示\"><a href=\"#效果演示\" class=\"headerlink\" title=\"效果演示\"></a>效果演示</h2>\n<p>给大家看看效果，运行我写好的代码，我们来看看会输出什么结果：</p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">请输入中文句子，要预测的字符用#代替：\n&gt; 巴黎是#国的首都。\n&gt; 巴黎是法国的首都。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"代码地址\"><a href=\"#代码地址\" class=\"headerlink\" title=\"代码地址\"></a>代码地址</h2>\n<p><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p>就在上周，首位外部贡献者出现了，修复了LightSeq的词嵌入表示的bug。<br><img src=\"2.png\" alt></p> \n<blockquote> \n <p>在这里我们非常欢迎感兴趣的同学来贡献自己的代码，包括但不局限于：修复bug、提供训练和推理样例、支持更多模型结构。</p> \n</blockquote>', '2021-12-30 07:34:45', '5.5k', 7, 1940);
INSERT INTO `t_article` VALUES ('58af60e0146042e5a072ff13019ad690', '编程算法', 11, '每日算法系列【LeetCode 309】最佳买卖股票时机含冷冻期', 'https://picsum.photos/1920/1080?random&rand=0.6959111201553622', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​ 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）: 你不', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​</p> \n<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p> \n<p>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。<br>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,0,2]\n输出：\n3\n解释：\n对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第六题。</p> \n<p>这题其实就是在系列题目第二题基础上加了个限制条件，也就是每次卖了之后，隔一天才能继续买。</p> \n<p>模仿第五题，还是采用动态规划。令 $dp0[i]$ 为第 $i$ 只股票之前（包含）买卖（最后一次操作是买）可以获得的最大利润， $dp1[i]$ 为第 $i$ 只股票之前（包含）买卖（最后一次操作是卖）可以获得的最大利润。那么类似的有如下转移方程：<br>$$<br>\\begin{aligned}<br>dp0[i] &amp;= \\max{\\left\\{dp0[i-1], dp1[i-2] - price[i]\\right\\}} \\\\<br>dp1[i] &amp;= \\max{\\left\\{dp1[i-1], dp0[i-1] + price[i]\\right\\}}<br>\\end{aligned}<br>$$</p> \n<p>初始情况就是 $dp0[0] = -price[0]$ 和 $dp1[0] = 0$ 。</p> \n<p>和第二、五题区别就是 $dp0[i]$ 的转移方程中有个 $dp1[i-2]$ ，也就是得隔一项，去算前前一天之前（包含）的买卖最大利润。</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        dp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        dp1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp1<span class=\"token punctuation\">[</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            dp1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp0<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dp1<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-09-05 07:22:28', '1.2k', 2, 6428);
INSERT INTO `t_article` VALUES ('59042c23d91e42288a492b801f1a432e', '深度学习', 19, '【ACL2020】一种新颖的成分句法树序列化方法', 'https://picsum.photos/1920/1080?random&rand=0.4707749405743925', '论文作者：godweiyang，末流985研三，ACM退役蒻苣，爱好算法，目前在字节跳动AI Lab实习，业余喜欢PUBG和LOL。 论文地址：A Span-based Linearization for Constituent Tre', '<blockquote> \n <p>论文作者：godweiyang，末流985研三，ACM退役蒻苣，爱好算法，目前在字节跳动AI Lab实习，业余喜欢PUBG和LOL。</p> \n</blockquote> \n<p><strong>论文地址：</strong><a href=\"https://www.aclweb.org/anthology/2020.acl-main.299/\" title=\"论文地址\" target=\"_blank\" rel=\"noopener\">A Span-based Linearization for Constituent Trees</a><br><strong>代码地址：</strong><a href=\"https://github.com/AntNLP/span-linearization-parser\" title=\"代码地址\" target=\"_blank\" rel=\"noopener\">https://github.com/AntNLP/span-linearization-parser</a><br><strong>PPT地址：</strong><a href=\"https://godweiyang.com/2020/08/30/acl20-yangwei-parsing/ACL2020.pdf\" title=\"PPT地址\">https://godweiyang.com/2020/08/30/acl20-yangwei-parsing/ACL2020.pdf</a> </p> \n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>不知不觉在字节跳动实习也快四个月了，在这高强度快节奏的工作生活中，也是收获颇多。然而博客也很久很久没更新过了，论文阅读了那么多，却一直没空写写自己中的这篇。今天趁周末分享一下自己发在今年ACL上的这篇工作，主要贡献就是提出了一种新颖的成分句法树的序列表示方法。建议配合我的PPT阅读，里面有很多例子。</p> \n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>\n<p>成分句法分析任务的目的就是解析出一个句子的短语结构树，详细的介绍都可以在我写的综述里找到：<a href=\"https://godweiyang.com/2019/08/15/con-parsing-summary-v2/\" title=\"成分句法分析综述（第二版）\">成分句法分析综述（第二版）</a>。</p> \n<p>当前主流的成分句法分析方法我按照归一化目标主要分为两类：</p> \n<ul> \n <li>一是基于CKY的<strong>全局归一化</strong>方法，优化整棵句法树得分之和。也就是采用动态规划算法解析，时间复杂度较高（$O(n^3)$），但同时效果是目前SOTA的。</li> \n <li>二是各种<strong>局部归一化</strong>方法，优化目标是单个目标得分（例如span、action、syntactic distance等等）。这一类方法具体包括基于shift-reduce的转移系统、各种序列化方法（例如syntactic distance）、基于CKY解码的局部归一化模型等，速度通常都很快，但由于局部归一化并没有考虑到全局特征，所以效果普遍较差。</li> \n</ul> \n<p>详细说两个以往的局部归一化方法吧。例如预测句法树的括号表达式，然后还原成句法树，这种方法效果非常差，因为很难解决括号匹配合法性的问题，模型很难学。再如syntactic distance，因为预测的是浮点数序列，所以约束太松了，只要求相对大小合适就行，可解释性也较差，没有和span紧密结合起来，因此最后效果也一般。最后转移系统也会存在exposure bias的问题，效果也不尽如人意，基本没人使用了。</p> \n<h3 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>回到主题，针对上面这么多问题，我想寻找一种更好的序列表示方法，如果能够和span更直接联系起来就最好了。其实这篇论文idea出来的初期，我是想用上GNN（GAT）的，那么就得有一张图，而传统的成分句法树不适合直接GNN建模，因为节点数不确定，图没法提前获得。因此我就联想到了我师兄去年发的一篇依存句法树应用GAT的工作：<a href=\"https://www.aclweb.org/anthology/P19-1237/\" title=\"Graph-based Dependency Parsing with Graph Neural Networks\" target=\"_blank\" rel=\"noopener\">Graph-based Dependency Parsing with Graph Neural Networks</a>。如果有一个办法能让成分句法树表示成依存树那样就好了！于是我这个idea就逐渐成型了，虽然最后并没有用上GNN。</p> \n<h2 id=\"序列化方法\"><a href=\"#序列化方法\" class=\"headerlink\" title=\"序列化方法\"></a>序列化方法</h2>\n<p>我原论文里面有很多公式和证明的部分，这里我就跳过了，其实方法的思想非常的简单。</p> \n<p><img src=\"1.jpg\" alt=\"序列化示例\"></p> \n<p>如上图所示，句法树原本可能不是二叉的，因此要先转成二叉树，然后这个二叉树在span表中（图c）绿色的部分就是所有的左孩子（包含根结点），红色的部分就是所有的右孩子。</p> \n<p>然后可以轻易发现，所有左孩子的右边界一定不存在重复，因此一定一一对应了 $[1, n]$ 中的值，那么就可以把它们作为序列化后的下标，而相应的左边界就作为序列化后的值。举个例子，图中 $(1, 4)$ 这个span表示的是”loves writing code”这个短语，那么序列化数组$d$的下标4处的值就是 $d_4 = 1$。</p> \n<p>同时可以发现，这个序列满足另一种定义，也就是 $(d_i, i)$ <strong>一定是以 $i$ 作为右边界的最大的span</strong>，这用反证法可以轻易证明。</p> \n<p>最后就可以得到序列化后的数组 $d$，同时这个序列满足两个性质：</p> \n<ul> \n <li>一定满足 $d_i &lt; i$ ，因为 $(d_i, i)$ 是某个左孩子。</li> \n <li>对于任意的 $j &gt; i$，$d_j$ 一定不会在 $(d_i, i)$ 范围里，否则的话 $(d_j, j)$ 就和 $(d_i, i)$产生交叉了。</li> \n</ul> \n<p>同时可以证明，满足如上两个条件的任意非负整数序列都可以唯一还原成一棵句法树。序列化和反序列化伪代码如下：</p> \n<p><img src=\"2.jpg\" alt=\"序列化和反序列化算法\"></p> \n<p>注意这里的反序列化有个前提假设：$d$ 一定要是满足上面两个条件的合法序列！至于不合法的怎么办？下面会详细讲。</p> \n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a>模型</h2>\n<p>模型方面没有什么新意，借鉴了依存句法分析模型bi-affine attention。</p> \n<p>输入是词向量、字向量、位置向量拼接：<br>$$<br>x_i = [e_i; c_i; p_i].<br>$$<br>然后用LSTM或者Transformer得到每个单词的隐层表示 $h_i$，为了区分span的左右边界表示，我采用了两套表示：<br>$$<br>l_i = \\text{MLP}_l(h_i),\\quad r_i = \\text{MLP}_r(h_i).<br>$$<br>然后就可以用bi-affine attention计算两个边界的相关性了：<br>$$<br>\\alpha_{ij} = l_i^\\top {\\bf W} r_j + b_1^\\top l_i + b_2^\\top r_j,<br>$$<br>接着对所有小于 $j$ 的attention做局部归一化，就得到了左边界为 $i$ 的概率：<br>$$<br>P(i|j) = \\text{Softmax}_{i}(\\alpha_{ij}), \\forall i &lt; j.<br>$$<br>最后取概率最高的左边界作为预测的序列值：<br>$$<br>d_j = \\mathop{\\arg\\max}_{i} {[P(i|j)]}, \\forall i &lt; j.<br>$$<br>对于句法树的label，我没有直接用序列方法预测，而是先用序列 $d$ 反序列化得到句法结构，然后利用句法结构预测label，这样准确率会高很多：<br>$$<br>P(\\ell|i, j) = \\text{Softmax}(\\text{MLP}_{\\text{label}}([l_i; r_j]))_{\\ell}.<br>$$<br>损失函数就是 $n$ 项结构损失加上 $2n-1$ 项label损失：<br>$$<br>\\mathcal{L} = -\\frac{1}{n} (\\sum_{i = 1}^{n}{\\log P(d_i | i)} + \\sum_{(i, j, \\ell) \\in \\mathcal{T}}{\\log P(\\ell|i, j)}).<br>$$</p> \n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3>\n<p>之前提到过，如果预测出来的序列是非法的怎么办呢？其实之前的两个条件，第一个条件可以通过mask的方式保证满足，一般第二个条件无法满足，也就是会出现交叉的span。</p> \n<p>最优解是最小顶点覆盖问题，也就是对于预测出来的 $n$ 个左孩子，两两之间如果交叉了就连边，最后建了一张图。那么选取最少的点（非法span），使得它们的边涵盖了整张图，也就是修改它们使得序列合法。然而这是一个NP hard的问题，复杂度很高，因此我提出了几种近似求解的方法。</p> \n<p>第一种方法是CKY解码，我们直接从 $P(i|j)$ 出发，不解码出序列 $d$ ，也就是直接解码出使得所有左孩子得分之和最高的序列：<br>$$<br>\\mathcal{G}(i, j) = \\max{\\{P(i | k) \\times \\mathcal{G}(k, j) \\mid i &lt; k &lt; j\\}},<br>$$</p> \n<p>这种方法时间复杂度是 $O(n^3)$ ，是精确解码，但是复杂度太高意义不大。</p> \n<p>第二种方法是自顶向下解码，然后寻找 $(i, j)$ 的split时，将满足 $d_{k’} \\leq i$ 且 $i &lt; k’ &lt; j$ 的所有 $k’$ 中最大的那个 $k’$ 作为split：<br>$$<br>k \\gets \\max{\\{k’ \\mid d_{k’} \\le i, i &lt; k’ &lt; j\\}}.<br>$$</p> \n<p><img src=\"3.jpg\" alt=\"方法二示例\"></p> \n<p>看上图例子可能更好理解一些。这是一种贪心解码，渐进时间复杂度是 $O(n \\log n)$ ，实测最后效果和最优解码没有区别。</p> \n<p>第三种方法和方法二类似，直接选取满足 $i &lt; k’ &lt; j$ 的最小的 $d_{k’}$ 就行了：<br>$$<br>k \\gets \\mathop{\\arg\\min}_{k’}[d_{k’}].<br>$$</p> \n<p><img src=\"4.jpg\" alt=\"方法三示例\"></p> \n<p>这个方法效果也完全一样，实现起来可能方便一丢丢。</p> \n<h2 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h2>\n<p>详细的实验对比结果感兴趣的直接去看论文吧，这里放一个总表：</p> \n<p><img src=\"5.jpg\" alt=\"PTB和CTB结果\"></p> \n<p>可以看出无论是单模型还是采用了BERT，我们的方法都达到了和SOTA完全一样的效果。那么速度怎么样呢？</p> \n<p><img src=\"6.jpg\" alt=\"速度对比\"></p> \n<p>可以看出我们速度远远快于CKY算法，甚至超过很多序列方法，并且我们没有采用Cython来优化for循环。</p> \n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2>\n<p><img src=\"7.jpg\" alt=\"归一化方法比较\"></p> \n<p>和全局归一化模型（CKY算法）相比，他们优化的是整棵句法树span得分之和，而我们优化的是所有的左孩子得分之和。因为我们认为，原来的优化目标是包含冗余的，左孩子得到之后，右孩子可以唯一确定。</p> \n<p>和CKY算法的自顶向下贪心优化+张岳老师提出的两种局部模型结合相比，我认为我们的方法也是不同的。他们的方法会导致更加复杂的span表示，同一个span会被优化两次，因此需要更为复杂的表示来规避这个问题。同时我们的方法只需要矩阵运算来预测结构，span表示简单，速度也更快。</p> \n<p>此外仍然有很多未完成的工作：</p> \n<ul> \n <li>利用我这个序列方法，GNN可以用上了。</li> \n <li>如果用所有的右孩子，可以产生出另一套等价的序列表示，如何结合这两套表示来准确解码？</li> \n <li>其他句法分析任务（CCG，semantic等）都可以转化为我的序列表示，如何联合学习这些任务？</li> \n <li>利用这套表示，其他很多下游任务（机器翻译等）都可以加入句法信息，能否增强它们的性能？</li> \n</ul> \n<h2 id=\"尾声\"><a href=\"#尾声\" class=\"headerlink\" title=\"尾声\"></a>尾声</h2>\n<p>下一次分享不知道又会到什么时候了，秋招也进入尾声了，下面就是毕业论文了。如果有时间，我还会和大家分享我最近阅读的论文。有缘江湖再见！</p>', '2021-03-24 15:03:52', '7.9k', 8, 7465);
INSERT INTO `t_article` VALUES ('5e49de486a784c88adfeb051da71f2a2', '编程算法', 4, '每日算法系列【LeetCode 233】数字 1 的个数', 'https://picsum.photos/1920/1080?random&rand=0.9115045107304747', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。 示例1 输入： 13 输出： 6 解释： 数字 1 出现在以下数字中: 1, 10, 11, 12,', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数 n，计算所有小于等于 n 的非负整数中数字 1 出现的个数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n13\n输出：\n6\n解释：\n数字 1 出现在以下数字中: 1, 10, 11, 12, 13 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题是我搜数位 dp 题目搜出来的，于是我直接用数位 dp 方法把它过了，后来发现其实没必要这么麻烦，简单的计算就能算出来了，这里两个方法我都讲一下。</p> \n<h3 id=\"数学方法\"><a href=\"#数学方法\" class=\"headerlink\" title=\"数学方法\"></a>数学方法</h3>\n<p>我们不妨用 n = 12345 来举个例子。要求小于等于 n 的数字里有多少个 1 ，我们不妨转换个角度，看某一位数字是 1 的话，有多少数字小于 n 。</p> \n<p>例如从右向左数第 i = 2 位（数字 3 ），如果这一位取 1 ，那么左边 2 位如果取 0-11 ，那么右边 2 位就没有任何限制，从 0 取到 99 都行。如果左边 2 位如果取 12 ，那么就得考虑 n 中第 i 位是几了，如果大于 1 ，那么右边 2 位还是没有限制；如果等于 1 ，那么右边 2 位只能取 0-45 ；如果等于 0 ，那就没得取了。</p> \n<p>下面这张图是我打的草稿，看的更清楚一点：</p> \n<p><img src=\"1.jpg\" alt></p> \n<p>一般化描述就是，考虑从右往左数第 i 位是 1 的数字数量。那么 n 中第 i 位左边部分的数字是 $\\left\\lfloor \\frac{n}{10^{i+1}} \\right\\rfloor$ ，而右边可以取的数量是 $10^i$ ，相乘就是总的数量 $\\left\\lfloor \\frac{n}{10^{i+1}} \\right\\rfloor \\cdot 10^i$ 。如果左边直接取最大值，那么就要考虑第 i 位数字是几了，计算可以得到第 i 位数字为 $\\left\\lfloor \\frac{n}{10^{i}} \\right\\rfloor \\% 10$ ，记为 x 。如果 $x &gt; 1$ ，那么右边无限制，有 $10^i$ 种取法；如果 $x = 1$ ，那么右边有 $n \\% 10^i + 1$ 种取法；如果 $x = 0$ ，那么右边无法取，因为第 i 位都没法取 1 。</p> \n<p>综上，令 $x = \\left\\lfloor \\frac{n}{10^{i}} \\right\\rfloor \\% 10$ ，那么答案就是：<br>$$<br>\\left\\lfloor \\frac{n}{10^{i+1}} \\right\\rfloor \\cdot 10^i + 10^i \\cdot [x &gt; 1] + (n \\% 10^i + 1) \\cdot [x = 1]<br>$$</p> \n<h3 id=\"数位dp\"><a href=\"#数位dp\" class=\"headerlink\" title=\"数位dp\"></a>数位dp</h3>\n<p>数位 dp 就麻烦许多了，不想看的可以直接跳过了。</p> \n<p>首先我们从最高位开始往右递归计算，用 pos, count, limit 来表示计算到第 pos 位（从左往右，和数学方法不一样）时，已经出现了 count 个 1 ，并且之后的数字有无限制（也就是能否取遍 0-9 ），这种状态之下方法数是多少。</p> \n<p>那么第 pos 位我们可以取的数字有哪些呢？如果 limit = 1 也就是有限制，那么只能取 0-n中第pos位，如果没有限制那就取 0-9 。</p> \n<p>假设第 pos 位取 1 ，那么 pos 就转移到了 pos+1 ，count 转移到了 count+1 ，limit 呢？只有当原来有限制，并且第 pos 位正好取了最大值也就是 n 中第 pos 位数字时，limit 还是 1 ，否则的话限制取消，后面的数字随便取。如果第 pos 位不取 1 ，那么除了 count 不变以外，其他两个状态还是跟上面一样转移。</p> \n<p>终止状态的话，如果遍历到了最后一位结束，就返回 count 数量就行了，表示当前数字中有 count 个 1 。</p> \n<p>这样的话会有很多重复计算的状态，所以需要用到记忆化搜索，用 dp[pos][count] 来保存 pos, count, limit=0 状态下的答案。为什么只保存 limit=0 的答案呢？因为只有无限制的情况下，后面的数字才能随便取，跟 n 是多少没有关系。否则的话 n 变了后面的值就会受限于 n ，那么就不是一个定值了，没法保存。</p> \n<p>那么 limit=1 不保存的话会不会超时呢？不会的，因为每一位只有一种取法会使得后面的数字继续有限制，所以整体上来看，有限制的状态个数是个常数，并不需要担心超时。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"数学方法（c-）\"><a href=\"#数学方法（c-）\" class=\"headerlink\" title=\"数学方法（c++）\"></a>数学方法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countDigitOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">/</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数位dp（c-）\"><a href=\"#数位dp（c-）\" class=\"headerlink\" title=\"数位dp（c++）\"></a>数位dp（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>limit <span class=\"token operator\">&amp;&amp;</span> dp<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ub <span class=\"token operator\">=</span> limit <span class=\"token operator\">?</span> a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> ub<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>pos<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> limit<span class=\"token operator\">&amp;&amp;</span>i<span class=\"token operator\">==</span>a<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> limit <span class=\"token operator\">?</span> res <span class=\"token operator\">:</span> dp<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countDigitOne</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数学方法（python）\"><a href=\"#数学方法（python）\" class=\"headerlink\" title=\"数学方法（python）\"></a>数学方法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">countDigitOne</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        res<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> n <span class=\"token operator\">//</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i\n            x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">//</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span>\n            res <span class=\"token operator\">+=</span> i <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x\n            i <span class=\"token operator\">*=</span> <span class=\"token number\">10</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 20:59:49', '6.7k', 3, 6063);
INSERT INTO `t_article` VALUES ('5ecc277154c04f06a76172b292a1006c', '随笔', 1, '一段平平无奇的秋招经历', 'http://47.96.31.161:9000/my-file/img107.jpg', '秋招也正式结束了，三方寄出去了，最终选择留在了实习的字节跳动。这里简单聊聊这大半年以来的实习和秋招经历。 四月份的时候投的实习，当时面了阿里、腾讯、美团和字节，最终选择来了字节实习，主要想留在上海。 字节实习主要做的是机器翻译模型的压', '<blockquote>\r\n	<p>秋招也正式结束了，三方寄出去了，最终选择留在了实习的字节跳动。这里简单聊聊这大半年以来的实习和秋招经历。</p>\r\n</blockquote>\r\n<p><img src=\"https://img0.baidu.com/it/u=3754615025,2373059849&fm=253&fmt=auto&app=138&f=JPG?w=751&h=500\"\r\n		alt=\"字节跳动上海总部\"></p>\r\n<p>四月份的时候投的实习，当时面了阿里、腾讯、美团和字节，最终选择来了字节实习，主要想留在上海。</p>\r\n<p>字节实习主要做的是机器翻译模型的压缩，剪枝量化蒸馏之类的，因为之前没有做过，所以到现在都还有很多东西需要去探索学习。</p>\r\n<p>实习了有半年左右，然后就开始秋招了，虽然本来就想留在字节，但是为了保底，还是得投一投其他公司嘛。</p>\r\n<p>最后面了百度、阿里、腾讯、美团、拼多多，还投过京东、携程之类的图个乐呵，最秀的是京东简历都没过，果然太菜了。</p>\r\n\r\n<p>先说说我的情况吧，只有一篇方向冷门的水文，还有一些过去很多年的ACM经历，其他项目和竞赛经历为零，所以很庆幸当时字节实习要了我吧。</p>\r\n<p>面试的话，百度、阿里是北京的部门，腾讯是深圳的，美团、拼多多是上海的，当然我最想留上海，所以bat就没怎么想面。最后的话bat挂了两家，一家没催没消息，上海的话三个色色批，也算圆了我留上海的愿望吧。</p>\r\n<p>百度面我的是百度贴吧推荐部门，我当时就震惊了，百度贴吧还活着？这部门怎么样我不知道，也不做评价，当时心理上就不想面了。然后还是为数不多的上午面的，那天头还昏昏沉沉的，一面上来三道算法题，第一题最弱智的摩尔投票我都没想起来怎么做，后两题也不怎么会。面完就感觉糟糕的很，后面二面效果也是差不多。最后很长一段时间都没有任何消息，感觉上应该是凉了。大概一个月后，hr突然给我打电话，问有没有空聊聊，我当时在回家路上，就说换个时间吧，她也答应了。然后，就没有然后了，官网显示gg。百度的面试体验上来说是最糟糕的，算法题和问的面试知识都不在我的领域内，感觉很差，当然还是因为我太菜了。\r\n</p>\r\n<p>阿里是内推的北京的达摩院云小蜜团队，面的还可以吧，三面都挺不错，但是到现在都没有接到过hr面通知。我自然也是懒得问，反正也不会去。刚刚内推的学长问我怎么样了，我人都傻了，这才想起来嘛。当然也没有然后了，我三方都寄走了。阿里面试体验有一说一还是不错的，二面云小蜜负责人就和我聊人生，谈中国互联网发展了，交叉面又是隔壁实验室老师的师弟，所以几分钟就结束了，很轻松。\r\n</p>\r\n<p>腾讯也是很离谱，都说wxg今年很难进，果然我被pcg捞起来了，然后还是完全不会的后台开发。打电话问我面不面？说pcg的nlp算法岗名额很少了。我说我不会，他说没事，我是ACM的没问题，然后特么就给我约了面试，我人都傻了。结果第一面还是算法面，1小时5道算法题，我一眼就看出来是打过ACM的人出的题，第一题就很难。最后只做了两道，还错了一道。他来了句，好久没刷题了吧，做的不大行啊。wdnmd，是你捞我，搞个后台开发，还恶心我出这么难的题目，现在还嘲讽我。最后结果当然是挂了，然后就没消息了，也没人捞我。\r\n</p>\r\n<p>然后就是上海的三家公司了，体验都是一级棒。</p>\r\n<p>美团的话内推了点评搜索部门，北斗面了两面被转到普通校招了，也没办法，今年北斗入门要求两篇A，我太菜了。最后三面面试官竟然是我的老学长、老校友，所以聊得很开心，轻松过了。最后的话美团也是第一个开奖，价格当时看起来也是很香的。我也是直接签了offer，当然三方不急，其他两家都没定呢。\r\n</p>\r\n<p>拼多多就很简单了，安全风控部门，其实也和NLP有很大关系的，算法竞赛也很有用。一面普普通通很正常，二面面试官很喜欢我，商业互吹，最后走了个过场吧。我当时还惊讶拼多多只有两面，也太轻松了吧。没想到hr面后又给我加了一面，不过难度也不大，轻松就过了。最后的话，拼多多也是给我开了很有诚意的价格，不得不说，真香。算上总包比美团高了足足有将近三十万。但是想到拼多多传闻的工作强度、工作环境之类的，我就很纠结选择钱还是生活了。最后还是放弃了，一周六天我还是撑不住，每天23点下班，我就没办法坐在电脑前直播游戏了，就不能写文章给你们看了。\r\n</p>\r\n<p>字节我实习的部门万万没想到几乎是整个公司最后转正的部门，其他部门都开奖了很多了，我们却还没转正。因此搞得也是很焦虑，也一度想过溜了吧，美团拼多多挺好的。半年来做的东西虽然看起来也不solid，方法也很简单。现在看了些更加深入的论文后，愈发觉得做的挺弱智的。但是很感谢leader们对我的欣赏吧，说起来在公司我依旧和在学校一样活跃，喜欢水群，啥都喜欢搞搞。现在还成为了组里的logo设计师，推广营销组里的技术，前端也能搞了娱乐娱乐，还能训训模型，当然主业还是钻研算法，啥事情都能插上一手。最后开的奖也很不错吧，算上补贴之类的比美团略高，比拼多多低了二十万多吧。不过经过多次考虑后，我还是选择了留下。\r\n</p>\r\n<p>总的来说，我的面试过程没有什么参考价值，不像网上说的那些SVM、xgboost、决策树之类的考一堆。我也看过，最后什么都没考，都问的是论文和实习经历。所以大家伙努力搞有意义的竞赛、论文、项目吧。</p>\r\n<p>最后说说我为什么选择字节吧。当时有三个选择，美团、字节、拼多多。价格的话，杂七杂八全算在一起的话，可以认为x、x+6、x+27这种水平吧，大差不差。工作时间美团995、字节1095.5，这两家都很自由，其实差别不大，早走都行，美团优点是双休。拼多多11116，这个嘛，基本可以认为没有时间玩了，中午和晚上只能休息一小时，顶不住的。工作内容的话，美团点评搜索，核心部门，研究和工程并存，字节机器翻译、模型压缩吧，目前是偏研究，兼顾线上需求，拼多多安全风控，听说是不出事轻松，出了事或者节假日（各种购物节）就加班加点，看起来还是比较累的。工作环境氛围和福利的话，美团周边看起来一般，地理位置离学校更近，内部的话我也不清楚，开水团出了名的，除了开水没有福利了。字节体验了半年很舒服，三餐不仅免费，还很好吃（强烈推荐），不过我还是没吃胖，环境也很不错，在科技绿洲园区，有自己的一整栋楼，呆着很舒服，每逢节日各种福利，氛围营造的也很好。拼多多不了解，看起来很神秘的样子，全靠网上传闻和热搜了解（那几件事，你懂的），不过拼多多离学校真的好近好近。美团点评搜索的leader也很早就和我聊了，详细介绍了他们部门情况，这个leader感觉就非常的nice，看朋友圈生活也很丰富，想必共事起来也会很舒服。拼多多的leader之前也说过了，也很nice，都很想我去。当然字节这边也不用谈了，个个都是大佬，没什么可说的，一级棒。最后也是跟他们解释了很久为什么我选择留下吧，江湖很小，都是做技术的，还会再相遇的。\r\n</p>\r\n<p>既然选择了留下，就更要好好干活了，当然也快写毕业论文了，准备过段时间出去玩个半个月的样子，长这么大还没出去旅游过。然后就回来写毕业论文，还是得稳一手，万一延毕了呢？然后就得继续看论文，研究我的模型压缩了，还有很长的路需要走。至于女朋友嘛，随缘吧，时间有了，对的人没了，很多人都是太多顾虑，而最中意的人，emmm，随缘吧，后会有期。\r\n</p>\r\n<p>最后，还是很感谢能有机会留在字节吧，自从读了研就感觉自己是个很菜的人，跟一手论文的大佬们差距太大了，能有今天的结果是我最满意的了，我的秋招之旅就这样正式结束了。</p>\r\n<p>\r\n	<img src=\"https://img1.baidu.com/it/u=1748206485,1541218647&fm=253&fmt=auto&app=138&f=JPEG?w=200&h=200\" width=\"200\" height=\"300\"\r\n		alt=\"最后感谢面试期间一直陪伴我的超越妹妹头像\">\r\n\r\n</p>\r\n<p> 最后感谢面试期间一直陪伴我的超越妹妹头像</p>', '2020-02-18 08:55:56', '6.3k', 11, 9876);
INSERT INTO `t_article` VALUES ('5fad6e0cee1e4544a127769f949877b1', '编程算法', 27, '这道小学六年级的数学题，恕我直言没几个人会做', 'https://picsum.photos/1920/1080?random&rand=0.02857796444605487', '关注公众号【算法码上来】，每日算法干货马上就来！ 今天网上冲浪的时候突然看到一道小学六年级的数学题，如上图所示，求阴影部分的面积。 我下意识就想到了微积分，这不就建立坐标系，求出交点，计算积分就行了嘛。转念一想，小学生哪里会积分，这', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<p><img src=\"1.png\" alt></p> \n<p>今天网上冲浪的时候突然看到一道小学六年级的数学题，如上图所示，求阴影部分的面积。</p> \n<p>我下意识就想到了微积分，这不就建立坐标系，求出交点，计算积分就行了嘛。转念一想，小学生哪里会积分，这道题一定有简单的解法。</p> \n<p>经过一番努力，我尝试出了一共两种精确解法和一种近似解法，但都超出了小学生的理解范畴。</p> \n<p>首先我们把图左右翻转一下，方便建立坐标系，如下图所示：<br><img src=\"2.png\" alt></p> \n<h2 id=\"积分方法\"><a href=\"#积分方法\" class=\"headerlink\" title=\"积分方法\"></a>积分方法</h2>\n<p>首先联立半圆和对角线的方程：<br>$$<br>\\begin{aligned}<br>x^2+(y-4)^2-16&amp;=0 \\\\<br>x+2y-4&amp;=0<br>\\end{aligned}<br>$$</p> \n<p>解出交点E的坐标是$(\\frac{12}{5}, \\frac{4}{5})$</p> \n<p>所以可以直接求下面积分，得到要求的阴影面积：<br>$$<br>\\int_{0}^{\\frac{12}{5}}{\\left(\\sqrt{16-x^2}+4\\right)}dx + \\int_{\\frac{12}{5}}^{4}{\\left(2-\\frac{1}{2}x\\right)}dx<br>$$</p> \n<p>利用简单的高等数学知识，可以解出答案是下面这样的，约等于1.252。<br>$$<br>\\frac{32}{5} - 8 \\arcsin{\\frac{3}{5}}<br>$$</p> \n<p>但是小学生肯定不会积分呀，就算高中生大多数都不会！</p> \n<h2 id=\"间接计算\"><a href=\"#间接计算\" class=\"headerlink\" title=\"间接计算\"></a>间接计算</h2>\n<p>既然我们不方便算这个不规则图形的面积，我们可以计算其他规则图形的面积，然后加减之后间接得到答案。</p> \n<p>图中阴影部分面积其实等价于三角形ACE+梯形BOCE-扇形BOE，而这三部分其实都非常好算。</p> \n<p>因为E的坐标是$(\\frac{12}{5}, \\frac{4}{5})$，所以最难算的就是扇形BOE的面积，也就是要求角OBE的大小。很轻松就可以得到角度是$\\arcsin{\\frac{3}{5}}$，所以三部分运算后可以得到和上面积分相同的答案。</p> \n<p>这个方法初中生都会做了！但是对于小学生来说难度还是有点大了。</p> \n<h2 id=\"蒙特卡洛采样方法\"><a href=\"#蒙特卡洛采样方法\" class=\"headerlink\" title=\"蒙特卡洛采样方法\"></a>蒙特卡洛采样方法</h2>\n<p>如果往第一象限正方形内随机抛撒若干豆子，然后看掉落在阴影部分里的豆子所占的比例，那么就可以近似估计出阴影部分的面积了，这就叫蒙特卡洛采样。</p> \n<p>那我们可以随机生成两个随机数，作为采样点的坐标，然后判断是否在阴影部分里，重复上述过程，记录次数就行了。</p> \n<p>我这里写了C++和CUDA两个实现，CUDA可以并行采样，速度快很多。</p> \n<p>执行的话，C++保存为<code>test.cpp</code>，然后执行<code>g++ test.cpp -o test</code>和<code>./test</code>。CUDA保存为<code>test.cu</code>，然后执行<code>nvcc test.cu -o test</code>和<code>./test</code>。</p> \n<p>实测CUDA相同时间内可以采样的次数大约是100倍左右，主要受到原子写操作的局限，不然可以达到1000倍左右的加速。</p> \n<p>但是小学生会CUDA吗？显然不可能。</p> \n<h3 id=\"C-实现\"><a href=\"#C-实现\" class=\"headerlink\" title=\"C++实现\"></a>C++实现</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ull<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  ull res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ull cnt <span class=\"token operator\">=</span> <span class=\"token number\">1e8</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ull i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> cnt<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> RAND_MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> RAND_MAX<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5f\\n\"</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">*</span> <span class=\"token number\">16.0</span> <span class=\"token operator\">/</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"CUDA实现\"><a href=\"#CUDA实现\" class=\"headerlink\" title=\"CUDA实现\"></a>CUDA实现</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;chrono&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;curand_kernel.h&gt;</span></span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ull<span class=\"token punctuation\">;</span>\n\n__global__ <span class=\"token keyword\">void</span> <span class=\"token function\">monte_carlo_kernel</span><span class=\"token punctuation\">(</span>ull<span class=\"token operator\">*</span> res<span class=\"token punctuation\">,</span> ull cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> seed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ull i <span class=\"token operator\">=</span> blockIdx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> blockDim<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> threadIdx<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> cnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  curandStatePhilox4_32_10_t state<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">curand_init</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  double2 rand <span class=\"token operator\">=</span> <span class=\"token function\">curand_uniform2_double</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> x <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> y <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">atomicAdd</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">launch_monte_carlo</span><span class=\"token punctuation\">(</span>ull<span class=\"token operator\">*</span> res<span class=\"token punctuation\">,</span> ull cnt<span class=\"token punctuation\">,</span> cudaStream_t<span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ull grid_dim <span class=\"token operator\">=</span> cnt <span class=\"token operator\">&gt;&gt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  monte_carlo_kernel<span class=\"token operator\">&lt;&lt;</span><span class=\"token operator\">&lt;</span>grid_dim <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stream<span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>\n      res<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">,</span>\n      std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>duration_cast<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>microseconds<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>\n          std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>system_clock<span class=\"token operator\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time_since_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  ull<span class=\"token operator\">*</span> res<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cudaMallocManaged</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>res<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  ull cnt <span class=\"token operator\">=</span> <span class=\"token number\">1e10</span><span class=\"token punctuation\">;</span>\n  cudaStream_t stream<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cudaStreamCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">launch_monte_carlo</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cudaDeviceSynchronize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.5f\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">16.0</span> <span class=\"token operator\">/</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">cudaFree</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"标准方法\"><a href=\"#标准方法\" class=\"headerlink\" title=\"标准方法\"></a>标准方法</h2>\n<p>其实标准的小学生解法不需要建坐标系，只需要如下图所示，做4条辅助线就行。</p> \n<p><img src=\"3.png\" alt></p> \n<p>很容易证明，辅助线将三角形ACD划分出来的5个小三角形是全等的。</p> \n<p>那么阴影面积就等于正方形AOBD减去四分之一圆BOD，再减去最右侧的弧边三角形ADE。而弧边三角形ADE面积等于三角形ACD减去三角形BCE，再减去扇形BDE。</p> \n<p>所以问题的关键就是求角DBE的大小，因为小三角形的边长可以轻易求出，所以最终答案很好算：<br>$$<br>\\frac{32}{5}-4\\pi+16 \\arctan{\\frac{1}{2}}<br>$$</p> \n<p>可以发现和之前高等数学得到的结果形式并不同，其实数值是一样的，所以我们得到了一个等式：<br>$$<br>4\\arctan{\\frac{1}{2}}+2\\arcsin{\\frac{3}{5}}=\\pi<br>$$</p> \n<p>这个可能看起来不是那么直观，但确实是成立的，根据反三角函数恒等式$2\\arctan x = \\arctan \\frac{2x}{1-x^2}$，可以推出等号左边等于$2(\\arctan \\frac{4}{3} + \\arcsin \\frac{3}{5})$。构造一个边长3、4、5的直角三角形，显然答案就是$\\pi$。</p> \n<h2 id=\"总结与拓展\"><a href=\"#总结与拓展\" class=\"headerlink\" title=\"总结与拓展\"></a>总结与拓展</h2>\n<p>其实这道题小学生也没几个人能做出来，就算给我们做也得费老鼻子劲，还不一定算的对。</p> \n<p>最近还看到了很多类似的趣图，这里分享给大家，闲暇时间可以做了玩玩。</p> \n<p>可以在评论区说出你的答案哦。</p> \n<p><img src=\"4.jpg\" alt></p> \n<p><img src=\"5.png\" alt></p>', '2020-05-26 16:56:53', '6.0k', 8, 7552);
INSERT INTO `t_article` VALUES ('5fc7befa2e414e19985194b6b8b2b05a', '编程算法', 17, '训练加速3倍！字节跳动推出业界首个NLP模型全流程加速引擎', 'https://picsum.photos/1920/1080?random&rand=0.6118689048377437', '如今NLP和CV领域的大部分任务都将Transformer作为基础模型。而早在2019年12月，字节跳动曾经开源过一款Transformer类模型推理加速引擎——LightSeq。作为业界第一款支持多种模型和解码方法的推理加速引擎，Lig', '<p><img src=\"ls.png\" alt></p> \n<p>如今NLP和CV领域的大部分任务都将Transformer作为基础模型。而早在2019年12月，字节跳动曾经开源过一款Transformer类模型推理加速引擎——LightSeq。作为业界第一款支持多种模型和解码方法的推理加速引擎，LightSeq的推理速度快于其它同类软件，更是远远超过了TensorFlow和PyTorch。</p> \n<p>最近，LightSeq发布了最新版本，引入了引擎方面的重大更新——支持了Transformer全流程训练加速，在不同的批处理大小下相比主流训练库最高可加速3倍多！至此从训练到推理部署的整个过程都已被LightSeq打通。</p> \n<p>那么它到底采用了哪些技术呢？下面笔者根据LightSeq公布的资料为你逐个揭晓。</p> \n<h2 id=\"背景介绍\"><a href=\"#背景介绍\" class=\"headerlink\" title=\"背景介绍\"></a>背景介绍</h2>\n<p><img src=\"1.png\" alt=\"图1：Transformer模型结构图（以机器翻译为例）\"></p> \n<p>Transformer模型 [1]自从2017年被谷歌提出之后，成为了众多NLP任务以及部分CV任务的主流模型，尤其是机器翻译、文本生成、文本摘要、时间序列预测等任务。图1是机器翻译任务使用Transformer进行训练的一个例子。但由于硬件资源的匮乏，很多高校实验室或者公司都无法训练很大的模型，而降低批处理大小等措施又会导致训练时间成倍增加。因此如何利用有限的资源最快训练出模型成为了亟待解决的问题。</p> \n<p>针对这一痛点，字节跳动推出了LightSeq训练加速引擎，对Transformer训练的整个计算过程进行了优化。从词嵌入层、编码层、解码层，到最后的损失函数层，从前向传播、反向传播、梯度同步，到最后的参数更新，LightSeq都进行了细致的性能分析和优化。以机器翻译任务为例，仅需要修改几行代码开启LightSeq训练加速，就可以加速最多3倍以上。</p> \n<p>总的来说，LightSeq具有如下几个优点：</p> \n<ol> \n <li>支持Transformer的完整加速。<br>LightSeq是业界第一款完整支持整个Transformer模型加速的训练引擎，包括了词嵌入层、编码层、解码层、损失函数层等高效自定义层。相比之下，另一款知名的深度学习优化引擎DeepSpeed [2]仅支持编码层的加速，因此只能用在BERT等模型上，局限性较大。</li> \n <li>训练速度快。<br>LightSeq训练速度非常快。例如在WMT14 [3]英德机器翻译任务上，利用英伟达最新的训练显卡A100，相比于主流序列生成库，LightSeq最快仅需要三分之一的训练时间。</li> \n <li>功能全面，简单易用。<br>LightSeq提供了高效的TensorFlow和PyTorch自定义层供用户灵活使用，可以自由插入到Hugging Face等主流训练库中。除此之外，还和当前流行的训练库如Fairseq [4]、NeurST [5]等做了深度集成，用户在安装LightSeq后，只需要修改几个命令行参数，就能在这些训练库上使用LightSeq。</li> \n <li>提供丰富的二次开发工具。<br>LightSeq提供了完整的CUDA kernel和Transformer自定义层的单元测试功能，可以测试自定义算子的正确性，同时分析出运行时间和加速比，帮助开发者更快地验证功能的正确性和有效性。</li> \n</ol> \n<p>表1列举了不同训练加速引擎之间支持的功能对比：</p> \n<p><img src=\"t1.png\" alt=\"表1：不同训练加速引擎支持功能对比\"></p> \n<h2 id=\"快速上手\"><a href=\"#快速上手\" class=\"headerlink\" title=\"快速上手\"></a>快速上手</h2>\n<p>LightSeq提供了多种便捷的运行方式，点击文末链接可以快速体验。这里简单讲解一下快速接入LightSeq进行训练的两种方式。</p> \n<h3 id=\"使用自定义层\"><a href=\"#使用自定义层\" class=\"headerlink\" title=\"使用自定义层\"></a>使用自定义层</h3>\n<p>LightSeq提供了许多自定义层供用户灵活使用。</p> \n<p>例如想要将Transformer模型中的编码层替换为LightSeq的编码层，只需要提供一个编码层参数，用来初始化LightSeq编码层。然后就可以用它来替换原始的编码层，加速模型训练。详细代码如下（这里省略了部分配置参数）：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>pytorch<span class=\"token punctuation\">.</span>transformer_encoder_layer <span class=\"token keyword\">import</span> LSTransformerEncoderLayer\n\nconfig <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n    max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n    max_seq_len<span class=\"token operator\">=</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">)</span>\nenc_layer <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"一键启动\"><a href=\"#一键启动\" class=\"headerlink\" title=\"一键启动\"></a>一键启动</h3>\n<p>LightSeq还和几个当前流行的训练库（例如Fairseq和NeurST）做了深度集成，仅需修改很少的代码就能开启LightSeq加速。</p> \n<p><strong>Fairseq</strong><br>LightSeq为Fairseq提供了一套完整便捷的Transformer训练样例。</p> \n<p>首先需要安装Fairseq，以及必要的第三方库。</p> \n<p>然后用如下命令安装LightSeq加速库：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install lightseq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>接着就可以通过LightSeq提供的启动器，灵活地指定使用LightSeq优化版本的Transformer模型、参数优化器和损失函数，下面是启动参数样例（这里省略了和LightSeq无关的参数）：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">lightseq-train DATA_PATH \\\n    --arch ls_transformer_wmt_en_de_big_t2t \\\n    --optimizer ls_adam \\\n    --criterion ls_label_smoothed_cross_entropy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>NeurST</strong><br>NeurST是一款同时支持TensorFlow和PyTorch的开源序列生成库，可以用来做文本生成、机器翻译和语音翻译。LightSeq已经与其进行了深度融合，无需用户修改代码和启动参数即可直接进行加速训练。</p> \n<p>首先需要安装NeurST，官方提供了详细的安装教程 [6]。</p> \n<p>然后安装TensorFlow版本的LightSeq，命令如下：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install http://sf3-ttcdn-tos.pstatp.com/obj/nlp-opensource/lightseq/tensorflow/lightseq_tf-2.0.1-cp37-cp37m-linux_x86_64.whl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>这样NeurST就会自动识别LightSeq已经安装成功，调用<code>lightseq</code>库进行模型构建来加速训练，无需修改启动参数。运行命令详见NeurST提供的机器翻译样例 [6]。</p> \n<h2 id=\"性能测试\"><a href=\"#性能测试\" class=\"headerlink\" title=\"性能测试\"></a>性能测试</h2>\n<p>在WMT14标准的英德翻译任务上，LightSeq做了评测实验。以当前流行的Fairseq训练库（基于PyTorch）和被广泛使用Apex工具库 [7]为基准，测试了LightSeq的训练性能。实验在NVIDIA Tesla V100 和 NVIDIA Ampere A100上进行，采用单机八卡数据并行训练和16位浮点数混合精度。</p> \n<p>在不同模型大小和批处理大小下，LightSeq对单步训练速度的提升结果如图2所示：</p> \n<p><img src=\"2.png\" alt=\"图2：A100和V100显卡下不同层数模型加速比\"></p> \n<p>这里所有模型的词表大小为40k，编码层和解码层隐层维度是1024，注意力头数为16。e和d分别表示编码器和解码器的层数。加速比的计算采用了每秒训练有效单词数（real word per second）这一常见指标。</p> \n<p>可以发现：</p> \n<ol> \n <li>使用了LightSeq后，单步训练速度有45%-250%的提升，作为对比，Apex仅有5%-30%的提升。LightSeq能取得这种大幅度的性能提升，源自于其对模型进行了全流程的细致优化。</li> \n <li>Apex显存使用量对比原生Fairseq略有提升，例如V100上，Apex导致6e6d的模型在15000批处理大小上出现了显存溢出，而LightSeq仍然可以正常训练。这证明了LightSeq在保证高效计算的同时，也做到了高效使用显存，这个特征在显存有限或者训练大模型时非常关键。</li> \n <li>随着批处理大小的增加，LightSeq加速比逐渐降低。其原因是，经过LightSeq优化后，单步训练中矩阵乘法占比提高，显卡的计算吞吐成为训练速度的瓶颈。这表明LightSeq已经对计算资源做到了充分利用。也解释了为什么计算吞吐更高的A100，平均会取得比V100高15%左右的加速比。</li> \n</ol> \n<p>最后在WMT14英德翻译数据集上测试了图1中Transformer模型训练至收敛的时间，结果如图3所示：</p> \n<p><img src=\"3.png\" alt=\"图3：A100和V100显卡下不同模型训练总时间\"></p> \n<p>由于LightSeq的计算优化是无损的，不会影响模型训练至收敛的训练步数，所以收敛时间的提升和单步训练时间的提升趋于一致。观察可以发现，LightSeq最多可将模型训练时间由8.5小时降低到3.8小时。</p> \n<h3 id=\"可视化分析\"><a href=\"#可视化分析\" class=\"headerlink\" title=\"可视化分析\"></a>可视化分析</h3>\n<p>为了更清楚地展示LightSeq优化前后模型的运算情况，用Nsight Systems [8]可视化模型训练过程中单步的算子调用情况。</p> \n<p>首先是Fairseq+Apex的可视化，结果如图4所示。总耗时在288ms左右，三个红色框分别表示前向传播、反向传播、梯度同步与参数更新。可以看出前向传播的算子排列比较稀疏，存在很大的优化空间。</p> \n<p><img src=\"4.png\" alt=\"图4：Fairseq+Apex单步训练过程可视化\"></p> \n<p>然后是Fairseq+LightSeq的可视化，结果如图5所示，总耗时降到了185ms左右。而且LightSeq的算子排列更加紧密，大大增加了显卡的利用率。</p> \n<p><img src=\"5.png\" alt=\"图5：Fairseq+LightSeq单步训练过程可视化\"></p> \n<h3 id=\"CUDA-kernel性能\"><a href=\"#CUDA-kernel性能\" class=\"headerlink\" title=\"CUDA kernel性能\"></a>CUDA kernel性能</h3>\n<p>此外还测试了LightSeq单卡情况下所有CUDA kernel的性能，对比了PyTorch、TensorFlow（XLA编译优化）、DeepSpeed和LightSeq四种实现方式。由于kernel太多，这里只列举了部分实验结果。</p> \n<p>首先对比了最常用的dropout，图6是V100显卡上16位和32位浮点数dropout不同实现的加速对比结果：</p> \n<p><img src=\"6.png\" alt=\"图6：dropout加速对比\"></p> \n<p>从图6中可以看出，LightSeq的实现要远远快于PyTorch和DeepSpeed。DeepSpeed在元素数量过百万之后逐渐不如PyTorch，而LightSeq始终比PyTorch快。随着元素数量的增加，LightSeq和DeepSpeed的速度都会有明显下降。TensorFlow在开启了XLA之后速度依然落后于PyTorch，且随着元素数量的增加差距逐渐缩小。</p> \n<p>然后对比了注意力机制中的softmax函数，测试了实际训练场景中批处理大小为8192情况下的加速比。图7是V100显卡上16位和32位浮点数softmax不同实现的加速对比结果，因为DeepSpeed只支持句子长度为8的整数倍，所以这里只测试了长度为32的整数倍的句子计算速度：</p> \n<p><img src=\"7.png\" alt=\"图7：softmax加速对比\"></p> \n<p>可以看出，LightSeq几乎在所有情况下远远快于DeepSpeed。且随着序列长度增加，LightSeq加速比逐渐增大。而DeepSpeed在16位浮点数情况下加速比会逐渐减小，在32位浮点数情况下甚至会出现比PyTorch还要慢的情况。TensorFlow即便使用XLA融合算子，运算速度也远远落后于其它三种实现。</p> \n<p>在其它多数kernel测试中，LightSeq都要快于其它三种实现。</p> \n<h2 id=\"关键技术\"><a href=\"#关键技术\" class=\"headerlink\" title=\"关键技术\"></a>关键技术</h2>\n<p><img src=\"8.png\" alt=\"图8：模型训练过程\"></p> \n<p>如图8所示，以2卡为例，一个完整的Transformer模型训练过程主要包括四个步骤：前向传播、后向传播、梯度同步和参数更新。其中前向传播和后向传播占模型训练总时间的70%多，包含了众多计算密集型和I/O密集型操作，因此是优化的重点。而梯度同步虽然耗时相对较少，但是也可以通过和反向传播并行化等方法隐藏掉大部分延时。最后优化器更新参数方面也大有文章可做，可以从计算和I/O两个方面减小延时。</p> \n<p>下面详细介绍优化这四个步骤的几种技术：算子多运算融合、输入输出层融合、动态显存复用和参数连续化，最后介绍一下LightSeq提供的单元测试功能。</p> \n<h3 id=\"算子多运算融合\"><a href=\"#算子多运算融合\" class=\"headerlink\" title=\"算子多运算融合\"></a>算子多运算融合</h3>\n<p>在大多数深度学习框架（例如TensorFlow和PyTorch）中，一个简单的运算通常都需要很多细粒度的核函数来实现。例如在TensorFlow中，一次层归一化（Layer Normalization）操作需要调用三次核函数以及两次中间显存读写，非常耗时。而基于CUDA，LightSeq定制化了一个层归一化专用的核函数，将两次中间结果的写入寄存器。从而实现一次核函数调用，同时没有中间结果显存读写，因此大大节省了计算开销。</p> \n<p>基于这个思路，LightSeq利用CUDA矩阵运算库cuBLAS [9]提供的矩阵乘法和自定义核函数实现了Transformer的编码器和解码器。以编码层为例，具体结构如图9所示：</p> \n<p><img src=\"9.png\" alt=\"图9：编码层计算过程\"><br>蓝色部分是自定义核函数，黄色部分是矩阵乘法。可以发现，矩阵乘法之间的运算全部都用一个定制化核函数实现了，因此大大减少了核函数调用和显存读写，最终提升了运算速度。</p> \n<p>LightSeq还优化了核函数的实现，采用float4数据类型来进行数据读写，大大增加了数据的吞吐量，减小了核函数执行的延时。LightSeq支持任意长度的序列输入，根据不同的序列长度选择最合适的核函数来调用执行。相比之下，DeepSpeed多数核函数只支持句子长度为8的整数倍，因此速度较慢，局限性较大。</p> \n<h3 id=\"输入输出层融合\"><a href=\"#输入输出层融合\" class=\"headerlink\" title=\"输入输出层融合\"></a>输入输出层融合</h3>\n<p>此外LightSeq还实现了词嵌入层和损失函数层的算子融合。对于词嵌入层，LightSeq将词表查找与放缩、位置向量融合以及dropout操作都写成了一个核函数。对于损失函数层，将交叉熵损失融合成一个核函数。通过输入输出层的融合，进一步减小了模型训练的时间，增加了显卡利用率。</p> \n<p>以词嵌入层为例，图10展示了输入句子中单词id之后，词嵌入层进行的计算过程：</p> \n<p><img src=\"10.png\" alt=\"图10：词嵌入层计算过程\"></p> \n<p>可以看出，在融合之前一个词嵌入层需要经过词向量查找与放缩、位置向量查找、两者相加、dropout五种运算，因此需要频繁调用核函数，非常耗时。而将这五个操作融合成一个核函数可以大大加快获取最终词表示的速度。</p> \n<h3 id=\"动态显存复用\"><a href=\"#动态显存复用\" class=\"headerlink\" title=\"动态显存复用\"></a>动态显存复用</h3>\n<p>为了避免计算过程中的显存申请释放并节省显存占用，LightSeq首先对模型中所有动态的矩阵大小都定义了最大值（例如最大序列长度）。接着在模型初始化的时候，为计算过程中的每个中间计算结果按最大值分配显存，并对没有依赖的中间结果共用显存。</p> \n<h3 id=\"参数连续化\"><a href=\"#参数连续化\" class=\"headerlink\" title=\"参数连续化\"></a>参数连续化</h3>\n<p>LightSeq将Transformer每一层中所有的参数都绑定在一起，做连续化处理。初始化模型某一层的时候只需要定义一个参数，参数量为原始模型该层总的参数量。在后续计算时，只需要从这个参数的对应位置处取出原始参数值即可。</p> \n<p>以编码层为例，自注意力层和前馈层共有16个参数，假设总参数量为S。于是可以定义一个大小为S的参数，按照原始各个参数的参数量来划分出16个块，连续存储16个参数，在计算时只需要取出对应的参数块即可。</p> \n<p>参数连续化能显著降低参数更新期间拷贝、同步、计算的次数。实验分析发现，进行了这项优化后，优化器性能提升了40%-50%。</p> \n<h2 id=\"开发工具\"><a href=\"#开发工具\" class=\"headerlink\" title=\"开发工具\"></a>开发工具</h2>\n<p>LightSeq提供了丰富的单元测试功能，不仅可以测试所有的自定义核函数和自定义层的正确性，还可以对比测试不同实现之间的速度。用户可以自由指定测试的组数、每组重复运行次数、容差和数据类型。</p> \n<p>具体步骤上，首先用户需要构造随机数据，然后根据数据类型选择不同的CUDA核函数，最后分别实现自定义和基准的计算函数即可。这样就保证了用户可以基于自身场景进行更进一步的二次定制开发。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>LightSeq新版训练加速引擎全方面提升了Transformer模型的训练速度，打通了训练和推理部署全流程，使用灵活方便。大大缩减了科研工作者们训练模型的成本。可以期待未来像机器翻译、文本生成、摘要、对话生成、情感分析等大量NLP应用场景可以使用LightSeq来训练和推理。</p> \n<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2>\n<p><strong>LightSeq地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p><img src=\"lightseq.png\" alt></p> \n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2>\n<p>[1] Transformer: “Attention is all you need”, NIPS (2017)<br>[2] DeepSpeed: <a href=\"https://github.com/microsoft/DeepSpeed\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoft/DeepSpeed</a><br>[3] WMT14: <a href=\"http://www.statmt.org/wmt14/\" target=\"_blank\" rel=\"noopener\">http://www.statmt.org/wmt14/</a><br>[4] Fairseq: <a href=\"https://github.com/pytorch/fairseq\" target=\"_blank\" rel=\"noopener\">https://github.com/pytorch/fairseq</a><br>[5] NeurST: <a href=\"https://github.com/bytedance/neurst/tree/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/neurst/tree/lightseq</a><br>[6] NeurST机器翻译样例: <a href=\"https://github.com/bytedance/neurst/tree/lightseq/examples/translation\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/neurst/tree/lightseq/examples/translation</a><br>[7] Apex: <a href=\"https://github.com/NVIDIA/apex\" target=\"_blank\" rel=\"noopener\">https://github.com/NVIDIA/apex</a><br>[8] Nsight Systems: <a href=\"https://developer.nvidia.com/nsight-systems\" target=\"_blank\" rel=\"noopener\">https://developer.nvidia.com/nsight-systems</a><br>[9] cuBLAS: <a href=\"https://docs.nvidia.com/cuda/cublas/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.nvidia.com/cuda/cublas/index.html</a></p>', '2022-04-22 15:23:23', '8.1k', 3, 1349);
INSERT INTO `t_article` VALUES ('6006d5dee10344cd83feaf4aec6f33df', '编程算法', 16, '【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！', 'https://picsum.photos/1920/1080?random&rand=0.24012508925102372', '偷电瓶的周某今天（2020.04.18）出来啦，打工是不可能打工的，这辈子都不可能打工的，大家可要小心咯。今天开始讲解 LeetCode 打家劫舍系列三道题目，给大家防范一下！ 题目链接LeetCode 198. 打家劫舍 题目描述 题', '<blockquote> \n <p>偷电瓶的周某今天（2020.04.18）出来啦，打工是不可能打工的，这辈子都不可能打工的，大家可要小心咯。<br>今天开始讲解 LeetCode <strong>打家劫舍</strong>系列三道题目，给大家防范一下！</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/house-robber/\" title=\"LeetCode 198. 打家劫舍\" target=\"_blank\" rel=\"noopener\">LeetCode 198. 打家劫舍</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<blockquote> \n <p>题面描述略有改动，不影响题意。</p> \n</blockquote> \n<p>你是一个专业的小偷，计划偷窃沿路的电瓶车电瓶。每个电瓶价值不一样，影响你偷窃的唯一制约因素就是相邻的电瓶车装有相互连通的防盗系统，如果两辆相邻的电瓶车的电瓶同时被偷，系统会自动报警。</p> \n<p>给定一个代表每辆电瓶车电瓶价值的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,1]\n输出:\n4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,7,9,3,1]\n输出:\n12<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>用 $dp[i]$ 表示偷前 $i$ 辆车电瓶可以获得的最大价值，那么对于第 $i$ 辆车来说，有两种选择。</p> \n<p>如果偷第 $i$ 辆车的电瓶，那么第 $i-1$ 辆车电瓶就不能偷了，能获得的最大价值就是 $dp[i-2] + p[i]$ 。</p> \n<p>如果不偷第 $i$ 辆车的电瓶，那么最大价值就等价于偷前 $i-1$ 辆车的电瓶能获得的最大价值 $dp[i-1]$ 。</p> \n<p>所以最终取两者最大值即可：<br>$$<br>dp[i] = \\max{\\{dp[i-1], dp[i-2]+p[i]\\}}<br>$$</p> \n<p>可以发现，每次计算其实只要用到前两个元素，所以每次维护最后两个值即可，可以将空间优化到常数空间。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">rob</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> prepre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> now <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            now <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">,</span> prepre<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            prepre <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span>\n            pre <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> now<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-09-17 16:24:39', '4.7k', 7, 5937);
INSERT INTO `t_article` VALUES ('633f4e8f1a024ec68f9c62afde5d71e3', '编程算法', 23, '每日算法系列【LeetCode 684】冗余连接', 'https://picsum.photos/1920/1080?random&rand=0.005658621343812897', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述在本问题中, 树指的是一个连通且无环的无向图。 输入一个图，该图由一个有着 $N$ 个节点（节点值不重复 $1, 2, …, N$）的树及一条附加的边构成。附加的边的两个顶点包', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在本问题中, 树指的是一个连通且无环的无向图。</p> \n<p>输入一个图，该图由一个有着 $N$ 个节点（节点值不重复 $1, 2, …, N$）的树及一条附加的边构成。附加的边的两个顶点包含在 $1$ 到 $N$ 中间，这条附加的边不属于树中已存在的边。</p> \n<p>结果图是一个以边组成的二维数组。每一个边的元素是一对 $[u, v]$ ，满足 $u &lt; v$，表示连接顶点 $u$ 和 $v$ 的无向图的边。</p> \n<p>返回一条可以删去的边，使得结果图是一个有着 $N$ 个节点的树。如果有多个答案，则返回二维数组中最后出现的边。答案边 $[u, v]$ 应满足相同的格式 $u &lt; v$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1,2], [1,3], [2,3]]\n输出：\n[2,3]\n解释：\n  1\n / \\\n2 - 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1,2], [2,3], [3,4], [1,4], [1,5]]\n输出：\n[1,4]\n解释：\n5 - 1 - 2\n    |   |\n    4 - 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>输入的二维数组大小在 $3$ 到 $1000$。</li> \n <li>二维数组中的整数在 $1$ 到 $N$ 之间，其中 $N$ 是输入数组的大小。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先因为这是一个无向图，所以不需要考虑谁是树根。</p> \n<p>那么我们一条条边加入到图里去，直到出现了环为止，那么这条边就是冲突的边，需要删除掉。</p> \n<p>那么怎么判断是否出现了环呢？如果加入一条边 $[u, v]$ 的时候，两个结点所在的连通块不是同一个，那么一定没有环。否则的话，两个结点连在了同一棵子树上，那么一定会产生一个环。</p> \n<p>如何高效的判断两个结点是否在同一棵子树上呢？这就需要用到一个数据结构——<strong>并查集</strong>。</p> \n<p>并查集采用一个数组 $f[i]$ 来表示结点 $i$ 的父结点。那么初始的时候没有任何边，定义所有结点的父结点等于它自身： $f[i] = i$ 。</p> \n<p>当加入一条边 $[u, v]$ 的时候，可以沿着 $u \\to f[u] \\to f[f[u]] \\to \\cdots$ 的路径递归找到 $u$ 所在子树的根结点 $ru$（$v$ 同理得到 $rv$），然后只需要判断两个根结点是否相同就行了。如果根结点相同，那么就产生环了，直接输出这个冲突边就行。否则的话就要把这两棵子树连到一起，最简单的做法就是直接把 $ru$ 连到 $rv$ 下面，当作它的子结点，那么就需要更新 $f[ru] = rv$ 。</p> \n<p>下面讲两个常用的并查集优化。</p> \n<p><strong>路径压缩：</strong><br>因为我们无需关注每一棵子树结构是什么样的，我们只关注它的根结点是谁。所以为了减小查找根结点的时间，每个结点离根结点要尽量近。</p> \n<p>那么我们定义查找根结点函数 $find(u)$ ，如果 $u = f[u]$ ，那么不用找了，它自己就是根结点。否则的话调用 $find(f[u])$ 递归寻找子树的根结点。最后做一步路径压缩的优化，把根结点当作 $u$ 的父结点：$f[u] = find(f[u])$ 。这样下次再查找的时候，路径长度就变为了 $1$ ，一步就能找到根结点了。</p> \n<p><strong>按秩合并：</strong><br>合并两棵子树的时候，为了使得合并后的子树高度尽量小，我们需要把高度小的那棵子树接在高度高的那棵下面，当作儿子。</p> \n<p>所以我们定义一个 $rank[i]$ 数组，用来记录 $i$ 这个结点作为根结点的子树高度，初始时全都是 $1$ 。那么在合并的时候，把 $rank$ 值小的接到大的下面去，如果一样怎么办呢？随便接，然后把合并后的根结点 $rank$ 值加 $1$ 就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rank<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findRedundantConnection</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> e<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> u<span class=\"token operator\">==</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> u <span class=\"token operator\">:</span> f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        u <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        u <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findRedundantConnection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>rank <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>same<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> u\n        self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                self<span class=\"token punctuation\">.</span>rank<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">==</span> v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 05:15:50', '3.5k', 2, 4308);
INSERT INTO `t_article` VALUES ('65226442ad2f41308953e19eae56c600', '编程算法', 30, '每日算法系列【LeetCode 328】奇偶链表', 'https://picsum.photos/1920/1080?random&rand=0.9595622263389229', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。 请尝试使用原地算法完成。你的算法的空间', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。</p> \n<p>请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL\n输出：\n1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL\n输出：\n2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>应当保持奇数节点和偶数节点的相对顺序。</li> \n <li>链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>本题要求使用原地算法，也就是不允许额外新建一个链表，只能使用常数的空间复杂度来实现。</p> \n<p>要把奇数位置串起来，再把偶数位置串起来，最后把偶数位置链表接到奇数位置链表末尾。因为 <code>head</code> 表示的就是奇数位置链表的第一个结点，所以我们只需要再新建一个变量 <code>even_head</code> 指向 <code>head-&gt;next</code> ，也就是偶数位置链表的第一个结点。</p> \n<p>此外还需要新建两个指针 <code>odd</code> 和 <code>even</code> 分别指向当前遍历到的奇偶结点，初始时分别指向奇偶头结点。</p> \n<p>接下来只需要分成奇偶两条链，各自串联下去就行了。也就是每次把 <code>odd-&gt;next</code> 指向 <code>odd-&gt;next-&gt;next</code> ，把 <code>even-&gt;next</code> 指向 <code>even-&gt;next-&gt;next</code> 。也就是隔了一个元素，把当前结点下一个结点指向它的下一个和它奇偶位置相同的结点。注意的是，这里一定要先改变 <code>even-&gt;next</code> ，再改变 <code>odd-&gt;next</code> 。因为 <code>odd</code> 是在 <code>even</code> 前一个的，先改变它指向的下一个元素并不会影响 <code>even</code> 后面的元素。但是如果你先改变了 <code>even</code> 指向的下一个元素，那么 <code>odd-&gt;next-&gt;next</code> 就变了，就无法指向正确的结点了。</p> \n<p>如果我们换个写法，先把 <code>odd-&gt;next</code> 指向 <code>even-&gt;next</code> ，再把 <code>even-&gt;next</code> 指向 <code>even-&gt;next-&gt;next</code> ，你就能很清楚的看出来了，必须先改变 <code>odd-&gt;next</code> ，因为它依赖于 <code>even-&gt;next</code> 。</p> \n<p>最后把 <code>odd</code> 指向 <code>odd-&gt;next</code> ，把 <code>even</code> 指向 <code>even-&gt;next</code> ，继续遍历下一个结点。</p> \n<p>什么时候停止呢？链表的最后一个结点要么是奇数结点，要么是偶数结点。如果是偶数结点，那么最后 <code>even</code> 不为空，但是它的下一个结点 <code>even-&gt;next</code> 为空，这时候结束遍历。如果是奇数结点，那么最后 <code>odd</code> 不为空，但是 <code>even</code> 为空，那么也结束遍历。综上，如果 <code>even</code> 或者 <code>even-&gt;next</code> 为空的时候，结束遍历。</p> \n<p>最后只需要把 <code>odd</code> 的下一个结点指向 <code>even_head</code> 就能把两个链表串起来了。</p> \n<p>时间复杂度是 $O(n)$ ，空间复杂度是 $O(1)$ ，因为只用到了 3 个额外指针。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\" spellcheck=\"true\">/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ListNode<span class=\"token operator\">*</span> <span class=\"token function\">oddEvenList</span><span class=\"token punctuation\">(</span>ListNode<span class=\"token operator\">*</span> head<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> even_head <span class=\"token operator\">=</span> head<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> odd <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span>\n        ListNode<span class=\"token operator\">*</span> even <span class=\"token operator\">=</span> head<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>even <span class=\"token operator\">&amp;&amp;</span> even<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            odd<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next <span class=\"token operator\">=</span> even<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            even<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next <span class=\"token operator\">=</span> even<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            odd <span class=\"token operator\">=</span> odd<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n            even <span class=\"token operator\">=</span> even<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        odd<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next <span class=\"token operator\">=</span> even_head<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> head<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># Definition for singly-linked list.</span>\n<span class=\"token comment\" spellcheck=\"true\"># class ListNode:</span>\n<span class=\"token comment\" spellcheck=\"true\">#     def __init__(self, x):</span>\n<span class=\"token comment\" spellcheck=\"true\">#         self.val = x</span>\n<span class=\"token comment\" spellcheck=\"true\">#         self.next = None</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">oddEvenList</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">:</span> ListNode<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> ListNode<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> head <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> head\n        even_head<span class=\"token punctuation\">,</span> odd<span class=\"token punctuation\">,</span> even <span class=\"token operator\">=</span> head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">,</span> head<span class=\"token punctuation\">.</span>next\n        <span class=\"token keyword\">while</span> even <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None <span class=\"token operator\">and</span> even<span class=\"token punctuation\">.</span>next <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None<span class=\"token punctuation\">:</span>\n            odd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> even<span class=\"token punctuation\">.</span>next\n            even<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> even<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span>next\n            odd <span class=\"token operator\">=</span> odd<span class=\"token punctuation\">.</span>next\n            even <span class=\"token operator\">=</span> even<span class=\"token punctuation\">.</span>next\n        odd<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> even_head\n        <span class=\"token keyword\">return</span> head<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 08:51:50', '4.3k', 4, 4754);
INSERT INTO `t_article` VALUES ('6a6c8042914a43c6a431c179a4998ea2', '编程算法', 22, '每日算法系列【LeetCode 875】爱吃香蕉的珂珂', 'https://picsum.photos/1920/1080?random&rand=0.21818049445696674', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。 珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>珂珂喜欢吃香蕉。这里有 N 堆香蕉，第 i 堆中有 piles[i] 根香蕉。警卫已经离开了，将在 H 小时后回来。</p> \n<p>珂珂可以决定她吃香蕉的速度 K （单位：根/小时）。每个小时，她将会选择一堆香蕉，从中吃掉 K 根。如果这堆香蕉少于 K 根，她将吃掉这堆的所有香蕉，然后这一小时内不会再吃更多的香蕉。 </p> \n<p>珂珂喜欢慢慢吃，但仍然想在警卫回来前吃掉所有的香蕉。</p> \n<p>返回她可以在 H 小时内吃掉所有香蕉的最小速度 K（K 为整数）。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npiles = [3,6,7,11], H = 8\n输出：\n4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npiles = [30,11,23,4,20], H = 5\n输出：\n30<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npiles = [30,11,23,4,20], H = 6\n输出：\n23<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= piles.length &lt;= 10^4</li> \n <li>piles.length &lt;= H &lt;= 10^9</li> \n <li>1 &lt;= piles[i] &lt;= 10^9</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>简单复述一下题意，就是有 N 堆香蕉，每堆有 piles[i] 个，现在要求一个整数速度 K ，吃一堆香蕉要的时间是 piles[i] / K （不是整数要上取整），问使得吃完所有香蕉所需总时间小于等于 H 的最小速度 K 是多少？</p> \n<p>显然 K 越小，吃每堆香蕉所需要的时间就越长，总时间也就越长，那么自然而然可以想到二分答案 K 。</p> \n<p>对于当前的 K ，我们遍历数组，算出总时间，如果总时间大于 H ，那就说明 K 太小了，还得提速；如果总时间小于等于 H ，那就说明速度 K 还可以降一点，总时间可能不变（因为存在上取整），也可能变大。</p> \n<p>这样最终的时间复杂度仅仅只有 $O(n \\log \\mathcal{M})$ ，其中 $\\mathcal{M}$ 是数组中的最大值，也就是二分上界。但其实这里还可以优化一下二分的上下界，比如上界，最大其实就是数组中的最大元素大小， K 再大也没有意义了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">minEatingSpeed</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> piles<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> H<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>piles<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> piles<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> piles<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> maxv<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>piles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&gt;</span> H<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minEatingSpeed</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> piles<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        maxv <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>piles<span class=\"token punctuation\">)</span>\n        l <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        r <span class=\"token operator\">=</span> maxv\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> l\n            cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> piles<span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> m\n            <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&gt;</span> H<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n        <span class=\"token keyword\">return</span> r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>注意上面的代码还是有几个小细节的：</p> \n<ul> \n <li>二分终止条件设置的是 $l &gt;= r$ ，所以 $l$ 的更新必须是 $l = m + 1$ ，因为如果 $l = r - 1$ 的话，$m$ 会等于 $l$ 。</li> \n <li>为了防止整型溢出，计算 $l$ 和 $r$ 均值的时候不要写 $(l + r) / 2$ 。</li> \n <li>上取整简单写法就是 $(p + m - 1) / m$ 。</li> \n</ul>', '2020-05-09 04:52:18', '4.2k', 3, 1359);
INSERT INTO `t_article` VALUES ('6b96769437684eeeb6d01f8328c38e6d', '编程算法', 32, '【每日算法Day 99】你们可能不知道只用20万赢到578万是什么概念', 'https://picsum.photos/1920/1080?random&rand=0.21837970585491817', '你们可能不知道只用 20 万赢到 578 万是什么概念。我们一般只会用两个字来形容这种人：赌怪！我经常说一句话，当年陈刀仔他能用 20 块赢到 3700 万，我 LBW 用 20 万赢到 500 万不是问题。埋伏他一手，这个牌不能抢，这个', '<blockquote> \n <p>你们可能不知道只用 20 万赢到 578 万是什么概念。<br>我们一般只会用两个字来形容这种人：赌怪！<br>我经常说一句话，当年陈刀仔他能用 20 块赢到 3700 万，我 LBW 用 20 万赢到 500 万不是问题。<br>埋伏他一手，这个牌不能抢，这个牌不用抢，他死定了。<br>反手给一个超级加倍，闷声发大财。他也超级加倍？但是不用怕，他的牌赢不了我。<br>五六七八九十，两个炸，很牛逼这个牌，如果把这个 K 换成 J ，我这个牌将绝杀，但是换不得。<br>单走一个六，SB，直接把 K 走了。<br>走他一张 2 顶他。阿姨快点，阿姨，阿姨你 K 都不要吗？阿姨你快点啊！阿姨别磨磨蹭蹭的。<br>五六七八九十。打错了，应该打 2 的。<br>给阿姨倒杯茶好吧，阿姨给你倒一杯卡布奇诺。<br>给阿姨倒一杯卡布奇诺！开始你的炸弹秀，炸他炸他。漂亮！<br>十七张牌你能秒我？你能秒杀我？！你今天能十七张牌把卢本伟秒了，我！当！场！就把这个电脑屏幕吃掉！！！</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/hand-of-straights/\" title=\"LeetCode 846. 一手顺子\" target=\"_blank\" rel=\"noopener\">LeetCode 846. 一手顺子</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>爱丽丝有一手（hand）由整数数组给定的牌。 </p> \n<p>现在她想把牌重新排列成组，使得每个组的大小都是 <code>W</code>，且由 <code>W</code> 张连续的牌组成。</p> \n<p>如果她可以完成分组就返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= hand.length &lt;= 10000</code></li> \n <li><code>0 &lt;= hand[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= W &lt;= hand.length</code></li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nhand = [1,2,3,6,2,3,4,7,8], W = 3\n输出:\ntrue\n解释：\n爱丽丝的手牌可以被重新排列为 [1,2,3]，[2,3,4]，[6,7,8]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nhand = [1,2,3,4,5], W = 4\n输出:\nfalse\n解释：\n爱丽丝的手牌无法被重新排列成几个大小为 4 的组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h2 id=\"巧用-map\"><a href=\"#巧用-map\" class=\"headerlink\" title=\"巧用 map\"></a>巧用 map</h2>\n<p>这也是最直观的一个方法，用 <code>map</code> 来保存每个数出现的次数。</p> \n<p>然后从最小的数开始，以它作为顺子的开头，然后看顺子里的数在不在 <code>map</code> 里，在就次数减一，不在就直接返回 <code>false</code> 。</p> \n<p>接着重复上面步骤，最后直到 <code>map</code> 为空，最后返回 <code>true</code>。</p> \n<p><code>map</code> 的特性就是你取它的第一个键值对，它的 <code>key</code> 就是最小的，这就很方便了。</p> \n<h2 id=\"排序统计\"><a href=\"#排序统计\" class=\"headerlink\" title=\"排序统计\"></a>排序统计</h2>\n<p>首先对手牌从小到大进行排序，然后从最小的开始，作为顺子开头，遍历之后的数。如果在数组里，并且没有被访问过，那么就标记为访问过了。</p> \n<p>注意可以提前终止遍历，也就是如果发现某一个顺子还没遍历完，但是访问到的元素已经超过接在顺子后的数了，那就直接返回 <code>false</code> 。</p> \n<h2 id=\"排序统计2\"><a href=\"#排序统计2\" class=\"headerlink\" title=\"排序统计2\"></a>排序统计2</h2>\n<blockquote> \n <p>这题还有个解法，来自于题解区网友 <code>zhanzq</code>，感觉挺不错的。但是我没怎么看懂，如果谁看懂了请教教我。</p> \n</blockquote> \n<p><a href=\"https://leetcode-cn.com/problems/hand-of-straights/solution/onlognsuan-fa-by-zhanzq/\" title=\"网友题解\" target=\"_blank\" rel=\"noopener\">网友题解</a></p> \n<p><img src=\"1.jpg\" alt></p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"巧用-map（c-）\"><a href=\"#巧用-map（c-）\" class=\"headerlink\" title=\"巧用 map（c++）\"></a>巧用 map（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isNStraightHand</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> hand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> hand<span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>first<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> start<span class=\"token operator\">+</span>W<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序统计（c-）\"><a href=\"#排序统计（c-）\" class=\"headerlink\" title=\"排序统计（c++）\"></a>排序统计（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isNStraightHand</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> hand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>W<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>hand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>hand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    vis<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">!=</span> W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序统计2，来自于网友zhanzq（c-）\"><a href=\"#排序统计2，来自于网友zhanzq（c-）\" class=\"headerlink\" title=\"排序统计2，来自于网友zhanzq（c++）\"></a>排序统计2，来自于网友zhanzq（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>lst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        lst<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">deltas</span><span class=\"token punctuation\">(</span>sz<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            pre <span class=\"token operator\">+</span><span class=\"token operator\">=</span> deltas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&lt;</span> lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> delta <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pre<span class=\"token punctuation\">;</span>\n                pre <span class=\"token operator\">=</span> lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> W <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    deltas<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>W<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> delta<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&gt;</span> lst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isNStraightHand</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> hand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sz<span class=\"token operator\">%</span>W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> lst<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> sz <span class=\"token operator\">&amp;&amp;</span> hand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                lst<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    lst<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>lst<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-06-16 09:12:50', '6.2k', 5, 1254);
INSERT INTO `t_article` VALUES ('6c9a9c998baf4a34b753d2e40f07a551', '编程算法', 15, '每日算法系列【LeetCode 287】寻找重复数', 'https://picsum.photos/1920/1080?random&rand=0.825404949212311', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个包含 $n + 1$ 个整数的数组 $nums$，其数字都在 $1$ 到 $n$ 之间（包括 $1$ 和 $n$），可知至少存在一个重复的整数。假设只有一个重复的整数，', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个包含 $n + 1$ 个整数的数组 $nums$，其数字都在 $1$ 到 $n$ 之间（包括 $1$ 和 $n$），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p> \n<p><strong>说明</strong></p> \n<ul> \n <li>不能更改原数组（假设数组是只读的）。</li> \n <li>只能使用额外的 $O(1)$ 的空间。</li> \n <li>时间复杂度小于 $O(n^2)$ 。</li> \n <li>数组中只有一个重复的数字，但它可能不止重复出现一次。</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,3,4,2,2]\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,1,3,4,2]\n输出：\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h3>\n<p>根据抽屉原理，如果大小为 $m$ 的抽屉里放了大于 $m$ 个数，那么一定有一个抽屉里至少放了两个数。</p> \n<p>那我们不妨统计一下数组中有多少个数满足 $1 \\le nums[i] \\le m$ ，数量记为 $cnt$ 。</p> \n<p>如果 $cnt &gt; m$ ，那么根据抽屉原理，$1$ 到 $m$ 中一定有一个数出现了至少两次。</p> \n<p>反之如果 $cnt \\le m$ ，那么说明满足 $m+1 \\le nums[i] \\le n$ 的数的数量是 $n+1-cnt \\ge n-m+1$ ，而抽屉大小是 $n-m$ ，所以根据抽屉原理，$m+1$ 到 $n$ 中一定有一个数出现了至少两次。</p> \n<p>综上，可以采用二分法，不断缩小 $m$ 的范围，最终得到这个出现至少两次的数的值。</p> \n<p>时间复杂度 $O(n \\log n)$ 。</p> \n<h3 id=\"快慢指针法\"><a href=\"#快慢指针法\" class=\"headerlink\" title=\"快慢指针法\"></a>快慢指针法</h3>\n<p>因为 $nums$ 中数据范围是 $1$ 到 $n$ ，所以 $nums[0] = x \\neq 0$ 。那么接着用 $x$ 作为下标来索引值，得到 $nums[x] = y$ 。如果 $y$ 已经出现过了 ，那么重复值已经找到了。否则的话 $y$ 还没出现过的话，继续用 $y$ 作为下标来索引，直到出现重复值。</p> \n<p>可以发现按照这种方法索引下去，形成了一个链，也就是 $0 \\to x \\to y \\to \\cdots$ 。最终这条链末端一定会产生出一个环，那么环的入口一定就是那个重复的数。</p> \n<p>举个例子，如下图所示，最终环产生在了 $2 \\to 4 \\to 2$ 上面，而 $2$ 又是链进入环的入口，所以重复的数就是 $2$ 。</p> \n<p><img src=\"1.png\" alt></p> \n<p>那么如何求<strong>链表中的环</strong>呢？这其实是一道面试经常会问到的经典题，标准解法就是用两个<strong>快慢指针</strong>。</p> \n<p>初始时两个指针指着链表头结点，然后同时移动。慢指针一次移动一个结点，快指针一次移动两个结点。当下一次快指针又和慢指针相遇时，停止移动。然后用第三个指针指着头结点，慢指针留在原地，两者同时移动，都是一次移动一个结点，直到相遇。这时两者指着的结点就是环的入口了。</p> \n<p>大家可以用上面的例子自己画图演示一下，我下面严格证明一下为什么这样是对的。</p> \n<p>假设如下图所示，链表中链的长度是 $m$ ，环的长度是 $n$ 。</p> \n<p><img src=\"4.jpg\" alt></p> \n<p>假设慢指针和快指针第一次相遇时，慢指针移动的距离是 $x$ ，那么快指针移动距离就是 $2x$ 。</p> \n<p>可以列出等式 $2x - x = kn$ ，也就是两者距离差值一定是环长度的正整数 $k$ 倍，同时 $k$ 是使得 $x = kn \\ge m$ 的最小正整数，即 $(k-1)n &lt; m \\le kn$。这时候慢指针离入口的距离是 $n - (x - m) = m - (k - 1)n$ ，也就是说，慢指针只需要再多绕 $k-1$ 个环的长度，就能恰好和从头结点而来的指针相遇在入口处。</p> \n<p>时间复杂度 $O(n)$ 。</p> \n<p><strong>扩展：</strong> </p> \n<p>那有人可能会问了，那要是链最后回到了 $0$ ，不就没有链，只有环了吗？哪来的入口？这是对的，所以本题中限制了 $nums$ 数组里都是大于 $0$ 的，如果范围是 $0$ 到 $n-1$ 的话，不能直接用数值但下标索引了，不然会出现下面这种情况，也就是 $0$ 也在环里了。</p> \n<p><img src=\"2.jpg\" alt></p> \n<p>其实这种情况我们只需要稍稍修改一下索引，让 $0$ 不可能出现在环里就行了，也就是让 $nums[i] + 1$ 当作索引，如下图所示。最终重复的数只需要减去 $1$ 就行了。</p> \n<p><img src=\"3.jpg\" alt></p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"二分法（c-）\"><a href=\"#二分法（c-）\" class=\"headerlink\" title=\"二分法（c++）\"></a>二分法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">&gt;</span> m<span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"快慢指针法（c-）\"><a href=\"#快慢指针法（c-）\" class=\"headerlink\" title=\"快慢指针法（c++）\"></a>快慢指针法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> slow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> find <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>find <span class=\"token operator\">!=</span> slow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            find <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>find<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> find<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分法（python）\"><a href=\"#二分法（python）\" class=\"headerlink\" title=\"二分法（python）\"></a>二分法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span>\n            cnt <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>x<span class=\"token operator\">&lt;=</span>m <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> cnt <span class=\"token operator\">&gt;</span> m<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"快慢指针法（python）\"><a href=\"#快慢指针法（python）\" class=\"headerlink\" title=\"快慢指针法（python）\"></a>快慢指针法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findDuplicate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        slow<span class=\"token punctuation\">,</span> fast <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span>\n            fast <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>fast<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> slow <span class=\"token operator\">==</span> fast<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        find <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> find <span class=\"token operator\">!=</span> slow<span class=\"token punctuation\">:</span>\n            slow <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>slow<span class=\"token punctuation\">]</span>\n            find <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>find<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> find<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-02-23 06:24:22', '5.9k', 10, 3538);
INSERT INTO `t_article` VALUES ('72b9ebe7cd48408d90d0cc1116340649', '编程算法', 9, '每日算法系列【LeetCode 503】下一个更大元素 II', 'https://picsum.photos/1920/1080?random&rand=0.7717758778036983', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,1]\n输出：\n[2,-1,2]\n解释：\n第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong><br>输入数组的长度不会超过 10000。</p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题中循环数组其实不用管，只需要再复制一遍数组接在后面就行了，那么关键还是如何求每个数后面第一个比它大的数。</p> \n<p>我们可以从右往左遍历数组，如果遍历到某个数，那么它右边所有比它小的数都不用再考虑了。因为再继续遍历下去的话，它右边比它还小的数是绝对不可能成为第一个大的数的。</p> \n<p>这样我们只需要保存每个数右边比它大的数就行了，这就需要用到单调栈了。对于 $nums[i]$ 来说，我们只需要不断出栈，直到栈顶元素大于它就行了，那么这时候栈顶元素就是 $nums[i]$ 右边第一个比它大的数。如果栈是空的，就说明它右边没有更大的数了。</p> \n<p>而在具体实现的时候，没必要真的把数组复制一遍接在后面，只需要用求余操作就能解决了。</p> \n<p>最终每个元素出栈入栈一次，时间复杂度是 $O(n)$ ，空间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">nextGreaterElements</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">nextGreaterElements</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        stack<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                stack<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>stack<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token keyword\">else</span> stack<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            stack<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-09-26 11:23:43', '7.8k', 3, 3831);
INSERT INTO `t_article` VALUES ('753b19742e304a6fba2c430c16b408a0', '编程算法', 25, '只用两行代码，我让Transformer推理加速了10倍', 'https://picsum.photos/1920/1080?random&rand=0.6214418269284513', '最近有学妹问我，我训了一个Transformer模型，但是预测好慢啊，有啥解决方案吗？ 我心想，你又想好，又想快，咋不上天🚀呢？ 于是我跟她说，你可以试试lightseq啊，跟闪电⚡️一样快，用了你就可以上天了。 她一脸懵比，light', '<p>最近有学妹问我，我训了一个Transformer模型，但是预测好慢啊，有啥解决方案吗？</p> \n<p>我心想，你又想好，又想快，咋不上天🚀呢？</p> \n<p><img src=\"1.png\" alt></p> \n<p>于是我跟她说，你可以试试lightseq啊，跟闪电⚡️一样快，用了你就可以上天了。</p> \n<p>她一脸懵比，lightseq是啥玩意儿啊？咋就能让我的模型起飞🛫️了呢？</p> \n<p>我跟她说，你不需要知道太多细节，你只需要知道它是一个Transformer系列模型推理加速库就行了。</p> \n<p>她还是一脸疑惑，那用起来能有huggingface方便吗？你看人家就两行代码。</p> \n<p>我不屑一笑，就这？lightseq也只要两行代码就够了！</p> \n<p><img src=\"2.jpeg\" alt></p> \n<p>为了方便，我用了一个bart模型预测句子中mask单词的例子来给她吹了一波。</p> \n<p>不懂什么是bart？建议先去看看huggingface的文档：<br><a href=\"https://huggingface.co/transformers/model_doc/bart.html\" target=\"_blank\" rel=\"noopener\">https://huggingface.co/transformers/model_doc/bart.html</a></p> \n<h2 id=\"huggingface-bart\"><a href=\"#huggingface-bart\" class=\"headerlink\" title=\"huggingface bart\"></a>huggingface bart</h2>\n<p>我们平时想用huggingface的bart来预测句子中的mask单词，大体上都会像下面这样写代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> BartTokenizer<span class=\"token punctuation\">,</span> BartForConditionalGeneration\n\ntokenizer <span class=\"token operator\">=</span> BartTokenizer<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"facebook/bart-base\"</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> BartForConditionalGeneration<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"facebook/bart-base\"</span><span class=\"token punctuation\">)</span>\n\nsentences <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I love that girl, but &lt;mask&gt; does not &lt;mask&gt; me.\"</span><span class=\"token punctuation\">]</span>\ninputs <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>sentences<span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ngenerated_ids <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>generate<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> max_length<span class=\"token operator\">=</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_decode<span class=\"token punctuation\">(</span>generated_ids<span class=\"token punctuation\">,</span> skip_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>当然运行前要先安装一下<code>transformers</code>包： </p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip3 install transformers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>最后会输出句子“I love that girl, but she does not love me.”，句子中的两个“mask”被预测成了“she”和“love”。</p> \n<p>看起来预测的很nice，但是预测的也太慢了，这要是有一堆句子要去预测，不得等到🐒年🐎月？</p> \n<p><img src=\"3.jpeg\" alt></p> \n<p>接下来我们来看看lightseq是怎么加速预测的。</p> \n<h2 id=\"lightseq-bart\"><a href=\"#lightseq-bart\" class=\"headerlink\" title=\"lightseq bart\"></a>lightseq bart</h2>\n<p>代码我都放在下面地址了，只要两分钟就能跑出结果了：<br><a href=\"https://github.com/bytedance/lightseq/tree/master/examples/inference/python\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq/tree/master/examples/inference/python</a></p> \n<p>运行前要先安装一下<code>lightseq</code>包： </p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip3 install lightseq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>首先lightseq只能接收HDF5或者PB格式的模型文件，我们帮你写好了模型转换的脚本，就是<code>hf_bart_export.py</code>，它会将huggingface预训练的bart模型转换为HDF5格式。</p> \n<p>所以直接运行<code>python3 hf_bart_export.py</code>就行了，这里我们用的是bart-base模型。</p> \n<p>运行完了会发现执行目录下多出一个<code>lightseq_bart_base.hdf5</code>文件，这就是转换后的模型文件。</p> \n<p>最后直接跟huggingface一样，两行代码就能搞定啦： </p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> lightseq<span class=\"token punctuation\">.</span>inference <span class=\"token keyword\">as</span> lsi\n<span class=\"token keyword\">from</span> transformers <span class=\"token keyword\">import</span> BartTokenizer\n\ntokenizer <span class=\"token operator\">=</span> BartTokenizer<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span><span class=\"token string\">\"facebook/bart-base\"</span><span class=\"token punctuation\">)</span>\nmodel <span class=\"token operator\">=</span> lsi<span class=\"token punctuation\">.</span>Transformer<span class=\"token punctuation\">(</span><span class=\"token string\">\"lightseq_bart_base.hdf5\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span>\n\nsentences <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"I love that girl, but &lt;mask&gt; does not &lt;mask&gt; me.\"</span><span class=\"token punctuation\">]</span>\ninputs <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">(</span>sentences<span class=\"token punctuation\">,</span> return_tensors<span class=\"token operator\">=</span><span class=\"token string\">\"pt\"</span><span class=\"token punctuation\">,</span> padding<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ngenerated_ids <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>infer<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">[</span><span class=\"token string\">\"input_ids\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ngenerated_ids <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ids<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> ids <span class=\"token keyword\">in</span> generated_ids<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nres <span class=\"token operator\">=</span> tokenizer<span class=\"token punctuation\">.</span>batch_decode<span class=\"token punctuation\">(</span>generated_ids<span class=\"token punctuation\">,</span> skip_special_tokens<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>看得出来仅仅替换了模型定义和模型推理那两行代码而已，是不是非常简单快速？</p> \n<p><img src=\"4.jpeg\" alt></p> \n<p>这时候她又问了，那我换一个模型，比如bert，要怎么导出pb模型呢？</p> \n<p>也很简单，只需要为bert也单独写一个<code>hf_bert_export.py</code>就行了。不过目前还在开发中，之后会慢慢完善常见的一些模型的。</p> \n<h2 id=\"速度到底怎么样？\"><a href=\"#速度到底怎么样？\" class=\"headerlink\" title=\"速度到底怎么样？\"></a>速度到底怎么样？</h2>\n<p>我写好了一个例子，就在<code>ls_bart.py</code>里，直接运行就行了，当然你也可以加上<code>--user_input</code>参数来手动输入句子。</p> \n<p>输入的句子是： </p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">I love that girl, but \n  <mask>\n    does not \n   <mask>\n     me.\nShe is so \n    <mask>\n      that I can not help glance at \n     <mask>\n      .\nNothing\'s gonna \n      <mask>\n        my love for you. Drop everything now. Meet me in the pouring \n       <mask>\n        . Kiss me on the sidewalk.\n        <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span>\n       </mask>\n      </mask>\n     </mask>\n    </mask>\n   </mask>\n  </mask></code></pre> \n<p>运行结果如下： </p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">=========lightseq=========\nlightseq generating...\nlightseq time: 0.03332779789343476s\nlightseq results:\nI love that girl, but she does not love me.\nShe is so beautiful that I can not help glance at her.\nNothing\'s gonna change my love for you.\nDrop everything now. Meet me in the pouring rain. Kiss me on the sidewalk.\n=========huggingface=========\nhuggingface generating...\nhuggingface time: 0.3208070669788867s\nhuggingface results:\nI love that girl, but she does not love me.\nShe is so beautiful that I can not help glance at her.\nNothing\'s gonna change my love for you.\nDrop everything now. Meet me in the pouring rain. Kiss me on the sidewalk.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>可以看出预测的是真的🐂🍺，最后两句歌词都预测的很完美，能看出是啥歌吗？</p> \n<p>再看预测时间，lightseq是huggingface的10倍左右，真是一个天上一个地下啊。</p> \n<p><img src=\"6.jpeg\" alt></p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>总结一下，想要使用lightseq加速你的模型，只需要两步就行了：</p> \n<ul> \n <li>将你的模型转换为hdf5格式的模型。（lightseq为你写好了转换脚本，不断更新中）</li> \n <li>调用<code>lightseq.inference.Transformer</code>和<code>model.infer</code>进行快速推理。</li> \n</ul> \n<p>学妹赶紧打住了我，好了好了，我知道很🐂🍺了。还给你装起来了，我这就去用。</p> \n<p>但是源码哪里有？我想学一学。</p> \n<p>我又甩给她一串地址：<br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p><img src=\"5.png\" alt></p> \n<p>好好看，好好学，都是CUDA写的，要是看得迷糊，建议先去看看我之前的入门教程嗷：<br><a href=\"https://godweiyang.com/2021/03/28/nn-cuda-example/\">https://godweiyang.com/2021/03/28/nn-cuda-example/</a></p> \n<p>从此，世上又多了一位快如⚡️的👨。</p>', '2022-04-18 18:58:32', '9.5k', 7, 8087);
INSERT INTO `t_article` VALUES ('7845b3248b2b4b61a5b7450d623d205a', '计算机知识', 30, '分析完吴亦凡的所有歌曲，我震惊了', 'https://picsum.photos/1920/1080?random&rand=0.73736555710659', '最近吴亦凡的事件闹的沸沸扬扬，相信不少吃瓜群众也都有所耳闻。 但咱们今天不谈他的事件到底怎么样，咱们来谈谈他的歌到底如何。 收集歌词我写了一个代码，从QQ音乐上收集了吴亦凡所有的歌词信息，自动汇总整理成一个txt文件，代码在下面：https', '<p>最近吴亦凡的事件闹的沸沸扬扬，相信不少吃瓜群众也都有所耳闻。</p> \n<p>但咱们今天不谈他的事件到底怎么样，咱们来谈谈他的歌到底如何。</p> \n<h2 id=\"收集歌词\"><a href=\"#收集歌词\" class=\"headerlink\" title=\"收集歌词\"></a>收集歌词</h2>\n<p>我写了一个代码，从QQ音乐上收集了吴亦凡所有的歌词信息，自动汇总整理成一个txt文件，代码在下面：<br><a href=\"https://github.com/godweiyang/lyric-crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/lyric-crawler</a></p> \n<p>使用方法非常简单，直接运行<code>python run.py</code>，然后输入你要收集的歌手名字即可，比如<code>吴亦凡</code>。</p> \n<p>然后就会在<code>output</code>文件夹下自动生成两个文件<code>吴亦凡_歌词.txt</code>和<code>吴亦凡_歌名.txt</code>，里面分别是他的所有歌词和按专辑分类的所有歌名。</p> \n<p>我们来看看歌词文件具体内容：<br><img src=\"1.png\" alt></p> \n<p>可以看到Kris Wu的《大碗宽面》和《bad girl》等经典作品都在其中。</p> \n<h2 id=\"分析歌词\"><a href=\"#分析歌词\" class=\"headerlink\" title=\"分析歌词\"></a>分析歌词</h2>\n<p>那么有了这些歌词可以干嘛呢？咱们可以做很多有趣的分析，比如今天就来分析一下吴亦凡的歌里面出现最多的词是什么？</p> \n<p>我们可以用jieba对歌词文件进行分词，然后生成词云，相关代码我也都开源在了下面：<br><a href=\"https://github.com/godweiyang/wordcloud\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/wordcloud</a></p> \n<p>只需要运行<code>python create_word_cloud.py 吴亦凡_歌词.txt</code>即可，会自动生成两张词云的图片。</p> \n<p>咱们打开看看效果：<br><img src=\"2.png\" alt></p> \n<p>可以看到，吴亦凡歌曲里出现最多的词竟然是<strong>girl</strong>！其次是一些语气词“yeah”之类的，果然是符合他的rapper身份啊。</p> \n<p>这也就不难想象了，Kris Wu先生对girl如此的痴迷，做出现在的事情也在情理之中。</p> \n<p>而且高频词里面大多都是英文，也表明了Kris Wu成为国际顶流的决心。</p> \n<p>这次事件也为各大顶流和众多粉丝们敲响了警钟。顶流要洁身自好，树立良好的榜样形象。而粉丝们更应该去追求那些正能量、能够激励我们前进的顶流。</p> \n<p>分析完了吴亦凡，我们再来看看我最爱的几位歌手都喜欢用什么词语。</p> \n<p>首先就是我最爱的歌手<strong>周杰伦</strong>：<br><img src=\"3.png\" alt></p> \n<p>可以看到杰伦最爱用的词语是“离开、回忆、微笑、世界、爱情”。杰伦早期的作品主要以苦情歌为主，这也是我最爱的风格，比如“你要离开我知道很简单，你说依赖是我们的阻碍”。而结婚后杰伦就几乎再也没唱过苦情歌了，基本都是甜甜的情歌。</p> \n<p>再来看看我最爱的女歌手<strong>邓紫棋</strong>：<br><img src=\"4.png\" alt></p> \n<p>紫棋最爱用的是“世界、快乐、再见、离开”，可以看到和杰伦有两个词是相同的，大家都喜欢用“世界、离开”等词语。</p> \n<p>更多的歌手我就不在这里分析了，大家可以自己用我的代码收集歌词，然后进行分析。</p> \n<h2 id=\"源码地址\"><a href=\"#源码地址\" class=\"headerlink\" title=\"源码地址\"></a>源码地址</h2>\n<p><strong>收集歌词：</strong><br><a href=\"https://github.com/godweiyang/lyric-crawler\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/lyric-crawler</a></p> \n<p><strong>生成词云：</strong><br><a href=\"https://github.com/godweiyang/wordcloud\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/wordcloud</a></p>', '2019-11-01 16:47:14', '3.8k', 10, 8077);
INSERT INTO `t_article` VALUES ('786dff2a9d484e7186651b3c660aa719', '编程算法', 1, '【LeetCode 327】区间和的个数', 'https://picsum.photos/1920/1080?random&rand=0.4465546288832626', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数数组 $nums$，返回区间和在 $[lower, upper]$ 之间的个数，包含 $lower$ 和 $upper$。区间和 $S(i, j)$ 表示在 $nu', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组 $nums$，返回区间和在 $[lower, upper]$ 之间的个数，包含 $lower$ 和 $upper$。<br>区间和 $S(i, j)$ 表示在 $nums$ 中，位置从 $i$ 到 $j$ 的元素之和，包含 $i$ 和 $j$ $(i \\le j)$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [-2,5,-1], lower = -2, upper = 2,\n输出：\n3\n解释：\n3个区间分别是: [0,0], [2,2], [0,2]，它们表示的和分别为: -2, -1, 2。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>最暴力的解法就是 $O(n^2)$ 枚举所有区间，然后判断，显然会超时。</p> \n<p>对于区间 $[i, j]$ 来说，它的和可以表示为 $pre[j] - pre[i]$ ，其中 $pre[i]$ 是前缀和，表示第 $0$ 个到第 $i$ 个元素之和。</p> \n<p>如果这个区间满足条件，那就有 $lower \\le pre[j] - pre[i] \\le upper$。如果我们遍历每个 $j$ 的话，只要求出满足 $pre[j] - upper \\le pre[i] \\le pre[j] - lower$ 的左端点 $i$ 的数量即可。</p> \n<p>如果将 $pre$ 数组排好序，那就能直接用二分法找出满足条件的数量了。但是这里需要在遍历右端点 $j$ 的时候动态插入 $pre[j]$ ，然后只对 $pre[0]$ 到 $pre[j]$ 进行排序。而目前应该没有什么数据结构能很快的同时支持动态有序插入和二分查找。</p> \n<p>因此这里可以采用树状数组（或线段树），来求取一段区间的和是多少。而树状数组的值表示这个数有没有出现过（0或1）。</p> \n<p>对于注意到这里有负数出现，因此需要先做离散化，对于每个前缀和 $pre[i]$，只需要离散化三个值：$pre[i]$、$pre[i]-lower$、$pre[i]-upper$ 即可。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">BIT</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">100010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">BIT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ID</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    unordered_map<span class=\"token operator\">&lt;</span>ll<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n    set<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        mp<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        st<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        idx <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        st<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">proj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>ll x<span class=\"token operator\">:</span> st<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getID</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> mp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">countRangeSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lower<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> upper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ll sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        ID id <span class=\"token operator\">=</span> <span class=\"token function\">ID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        BIT bit <span class=\"token operator\">=</span> <span class=\"token function\">BIT</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        id<span class=\"token punctuation\">.</span><span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            id<span class=\"token punctuation\">.</span><span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            id<span class=\"token punctuation\">.</span><span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">-</span>lower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            id<span class=\"token punctuation\">.</span><span class=\"token function\">addNum</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">-</span>upper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        id<span class=\"token punctuation\">.</span><span class=\"token function\">proj</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        bit<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> lb <span class=\"token operator\">=</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">-</span>upper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rb <span class=\"token operator\">=</span> id<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">-</span>lower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>rb<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> bit<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>lb<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bit<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">getID</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 05:12:36', '4.8k', 6, 5211);
INSERT INTO `t_article` VALUES ('7ab2948f1e63445099df510f338f93da', '编程算法', 35, '【每日算法Day 96】腾讯面试题：合并两个有序数组', 'https://picsum.photos/1920/1080?random&rand=0.3421396369175278', '昨天腾讯一面上来就给我整的这道 easy 难度的题，然后我太紧张了还想了一会儿，差点炸裂。 题目链接LeetCode 88. 合并两个有序数组 题目描述给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 num', '<blockquote> \n <p>昨天腾讯一面上来就给我整的这道 easy 难度的题，然后我太紧张了还想了一会儿，差点炸裂。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/merge-sorted-array/\" title=\"LeetCode 88. 合并两个有序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 88. 合并两个有序数组</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你两个有序整数数组 <code>nums1</code> 和 <code>nums2</code>，请你将 <code>nums2</code> 合并到 <code>nums1</code> 中，使 <code>nums1</code> 成为一个有序数组。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>初始化 <code>nums1</code> 和 <code>nums2</code> 的元素数量分别为 <code>m</code> 和 <code>n</code> 。</li> \n <li>你可以假设 <code>nums1</code> 有足够的空间（空间大小大于或等于 <code>m + n</code>）来保存 <code>nums2</code> 中的元素。</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6],       n = 3\n输出:\n[1,2,2,3,5,6]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>看到这道题，脑海里应该第一时间想到的是归并排序，但是归并排序需要一个额外的数组用来保存排序后的数组，这里不允许使用额外空间。</p> \n<p>那么我们还是用归并排序的思路来做，试一下两个指针 <code>i = 0</code> 和 <code>j = 0</code> ，初始的时候分别指着 <code>nums1[0]</code> 和 <code>nums2[0]</code> 。然后比较 <code>nums1[i]</code> 和 <code>nums2[j]</code> 大小，如果 <code>nums1[i]</code> 更小，那么就放在原位不动它，然后 <code>i += 1</code>。如果 <code>nums2[j]</code> 更小，那么就交换 <code>nums1[i]</code> 和 <code>nums2[j]</code> ，然后还是 <code>i += 1</code>。这么看貌似可行哦？但是最终一定会先遍历完 <code>nums1</code>，然后 <code>j</code> 还是停留在 <code>0</code> ，然后你会发现 <code>nums2</code> 中的数字还是乱序的，根本没法处理。</p> \n<p>那么怎么利用上 <code>nums1</code> 后面多出的那么多空位呢？我们可以换个思路，从最大的开始遍历。两个指针初始的时候 <code>i = m-1</code> 和 <code>j = n-1</code> ，然后将较大值填充到 <code>nums1</code> 的最后面。最后如果 <code>nums2</code> 中还有剩余，就依次填充到 <code>nums1</code> 最前面就行了。</p> \n<p>这样为什么就可以了呢？因为如果从小到大遍历的话，元素会覆盖掉 <code>nums1</code> 中还没遍历的元素。但是从大到小是填充到尾部，就不会产生覆盖。就算极限情况下 <code>nums2</code> 中元素全部大于 <code>nums1</code> 中元素，也不会覆盖到 <code>nums1</code> 的最后一个元素。</p> \n<p>面试官最后还会问你有啥优化，我当时图省事，最后还把 <code>nums1</code> 中剩下元素填充到 <code>nums1</code> 最前面了，其实完全没有必要，本来就是有序的，等于没有做事。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> nums1<span class=\"token punctuation\">[</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> nums1<span class=\"token punctuation\">[</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> nums1<span class=\"token punctuation\">[</span>k<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums1<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> nums2<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> None<span class=\"token punctuation\">:</span>\n        i<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span>\n        <span class=\"token keyword\">while</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                nums1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                i <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                nums1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                j <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            nums1<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n            j <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-06-12 19:55:06', '2.1k', 4, 8574);
INSERT INTO `t_article` VALUES ('7bce66310b384a758ef523d65283113f', '编程算法', 12, '每日算法系列【LeetCode 115】不同的子序列', 'https://picsum.photos/1920/1080?random&rand=0.8997514302738888', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。 一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。</p> \n<p>一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，”ACE” 是 “ABCDE” 的一个子序列，而 “AEC” 不是）</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nS = \"rabbbit\", T = \"rabbit\"\n输出：\n3\n解释：\n如下图所示, 有 3 种可以从 S 中得到 \"rabbit\" 的方案。\n(上箭头符号 ^ 表示选取的字母)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nS = \"babgbag\", T = \"bag\"\n输出：\n5\n解释：\n如下图所示, 有 5 种可以从 S 中得到 \"bag\" 的方案。 \n(上箭头符号 ^ 表示选取的字母)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"dfs-记忆化搜索\"><a href=\"#dfs-记忆化搜索\" class=\"headerlink\" title=\"dfs+记忆化搜索\"></a>dfs+记忆化搜索</h3>\n<p>这题要求字符串 s 中有多少子序列正好等于字符串 t ，那么我们不如从最后一个字符看起，假设 s 和 t 的长度分别为 n 和 m 。</p> \n<p>如果 s[n-1] 和 t[m-1] 不相等，那么显然只能在 s[0] 到 s[n-2] 之中寻找 t 。</p> \n<p>如果 s[n-1] 和 t[m-1] 相等，那么有两种选择。一种是这两个字符对应上，然后在 s[0] 到 s[n-2] 之中寻找 t[0] 到 t[m-2] 。另一种是不用 s[n-1] ，还是和上一种情况一样，在 s[0] 到 s[n-2] 之中寻找 t 。两种选择的方案数加起来就是答案了。</p> \n<p>那么递归终止条件是什么呢？如果发现 s 已经空了，但是 t 还有字符没有对应上，那么方案数一定为 0 。如果 t 空了，那么不管 s 还剩多少字符，都说明 t 已经找到对应的子序列了，方案数加 1 。</p> \n<p>为了防止重复计算，还要加上记忆化搜索，用数组记录一下每个状态的方案数。状态 (i, j) 就表示在 s[0] 到 s[i] 中寻找 t[0] 到 t[j] 的方案数。</p> \n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3>\n<p>当然一般上面那种 dfs 都可以转化成动态规划的写法。</p> \n<p>这里动态规划就是从长度比较短的字符串开始求解。初始状态是 dp[i][0] ，表示 s[0] 到 s[i] 之中有多少个 t[0] ，这很容易求出来。</p> \n<p>然后两层循环遍历两个的字符串的结尾，跟上面 dfs 方法一样，如果 s[i] 和 t[j] 不相等，那么 dp[i][j] = dp[i-1][j] ；否则的话再加上一个 dp[i-1][j-1] 就行了。</p> \n<h3 id=\"动态规划-空间优化\"><a href=\"#动态规划-空间优化\" class=\"headerlink\" title=\"动态规划+空间优化\"></a>动态规划+空间优化</h3>\n<p>上面动态规划方法有个问题就是字符串如果太长的话，空间会吃不消。而仔细观察就会发现，当循环到 i ，然后遍历 j 的时候，其实只会用到 i-1 的状态。那么我们就可以去掉第一维，只保存 j 的所有状态就行了。</p> \n<p>但是有个注意的点是，第二层循环 j 的顺序要变一下，要从大往小遍历。因为 j 需要用到 (i-1, j-1) 时刻的状态值，如果你从小到大遍历，那么 (i, j-1) 的方案数就会把 (i-1, j-1) 的方案数覆盖掉，之后你获取到的就不是 i-1 时刻的方案数了。</p> \n<p>另一个小区别是 dp[i][0] 的计算被移到了第一层循环的最后，而不是初始化就计算好了。这是因为第一维 i 被去掉了，所以只能在用到的时候再更新计算。</p> \n<h3 id=\"动态规划-空间优化-时间优化\"><a href=\"#动态规划-空间优化-时间优化\" class=\"headerlink\" title=\"动态规划+空间优化+时间优化\"></a>动态规划+空间优化+时间优化</h3>\n<p>其实上面一个方法速度已经不错了，但是时间上还是有优化的余地的。</p> \n<p>可以发现，只有当 s[i] = t[j] 的时候，才需要更新 (i, j) 的方案数。所以我们只需要提前预处理出来每个字母 s[i] 在 字符串 t 中的哪些位置出现过就行了。然后遍历的时候只需要直接取出这些位置来更新就行了。</p> \n<p>而实际运行中也会发现， dfs 要比动态规划快很多！这是因为 dfs 只会遍历合法的那些状态，而动态规划会把所有状态都计算出来，不管对最后的答案有没有帮助。</p> \n<p>举个例子，s = “abcbbbb” ， t = “abc” ，因为 t 只在 s 的前三个字母中出现了，所以如果我们寻找 t 的子串 “ab” 在 s 中出现次数的时候，从第二个 b 开始都是没有任何意义的，因为后面都没有 c 给你匹配了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"dfs-记忆化搜索（c-）\"><a href=\"#dfs-记忆化搜索（c-）\" class=\"headerlink\" title=\"dfs+记忆化搜索（c++）\"></a>dfs+记忆化搜索（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> t<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> dp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> j<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划（c-）\"><a href=\"#动态规划（c-）\" class=\"headerlink\" title=\"动态规划（c++）\"></a>动态规划（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-空间优化（c-）\"><a href=\"#动态规划-空间优化（c-）\" class=\"headerlink\" title=\"动态规划+空间优化（c++）\"></a>动态规划+空间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-空间优化-时间优化（c-）\"><a href=\"#动态规划-空间优化-时间优化（c-）\" class=\"headerlink\" title=\"动态规划+空间优化+时间优化（c++）\"></a>动态规划+空间优化+时间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> string t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">pos</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pos<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> sz<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>p<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"dfs-记忆化搜索（python）\"><a href=\"#dfs-记忆化搜索（python）\" class=\"headerlink\" title=\"dfs+记忆化搜索（python）\"></a>dfs+记忆化搜索（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>m <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> j<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划（python）\"><a href=\"#动态规划（python）\" class=\"headerlink\" title=\"动态规划（python）\"></a>动态规划（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>m <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-空间优化（python）\"><a href=\"#动态规划-空间优化（python）\" class=\"headerlink\" title=\"动态规划+空间优化（python）\"></a>动态规划+空间优化（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> m\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-空间优化-时间优化（python）\"><a href=\"#动态规划-空间优化-时间优化（python）\" class=\"headerlink\" title=\"动态规划+空间优化+时间优化（python）\"></a>动态规划+空间优化+时间优化（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numDistinct</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> m\n        pos <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            pos<span class=\"token punctuation\">[</span>ord<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> pos<span class=\"token punctuation\">[</span>ord<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3>\n<p>这题还有个坑爹的地方，就是用动态规划写的时候，数组数据类型必须定义成 long 类型，否则会爆 int 范围，但是最终的答案又在 int 范围内。这其实就是因为动态规划计算了很多无用的状态，这些状态里有超出 int 范围的。而 dfs 用 int 就完全没有问题。</p> \n<p>本题还是非常不错的，带你一步步从最好写的 dfs ，然后转化成动态规划，然后优化空间，减少数组维度，最后优化时间。优化时间在 c++ 上面提升不明显，但是 python 提升非常大，直接超过了 100% 的方法。</p> \n<p>时间上还有一些小 trick ，我这里没有考虑，留给大家思考。比如对于状态 (i, j) ，如果 n-i &lt; m-j ，那么就没必要更新了，因为 s 中剩下来的字符串都不够 t 剩下来的去匹配的。</p>', '2022-04-22 18:59:50', '3.0k', 7, 3606);
INSERT INTO `t_article` VALUES ('7e770862c674485bbcd052a090f59d8f', '编程算法', 3, '教你如何用代码自动群发邮件（邮件轰炸机）', 'https://picsum.photos/1920/1080?random&rand=0.6165827343121671', '最近碰到个脑子可能不大正常的人，整天给一堆人群发乱七八糟的邮件，各种喷人、编造谣言和绯闻，看的很是心烦。 于是乎我找了段python代码，给她自动发邮件轰炸一下。 代码很简单，如下所示： #coding: utf-8 import t', '<blockquote> \n <p>最近碰到个脑子可能不大正常的人，整天给一堆人群发乱七八糟的邮件，各种喷人、编造谣言和绯闻，看的很是心烦。</p> \n</blockquote> \n<p><img src=\"1.png\" alt=\"一个上午就发了这么多\"><br><img src=\"2.png\" alt=\"都是编造的我老家各种老师、官员的绯闻\"></p> \n<p>于是乎我找了段python代码，给她自动发邮件轰炸一下。</p> \n<p>代码很简单，如下所示：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#coding: utf-8</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> smtplib\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>multipart <span class=\"token keyword\">import</span> MIMEMultipart\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>mime<span class=\"token punctuation\">.</span>text <span class=\"token keyword\">import</span> MIMEText\n<span class=\"token keyword\">from</span> email<span class=\"token punctuation\">.</span>header <span class=\"token keyword\">import</span> Header\n\nsmtpserver <span class=\"token operator\">=</span> <span class=\"token string\">\'smtp.163.com\'</span>\nusername <span class=\"token operator\">=</span> <span class=\"token string\">\'username@163.com\'</span>\npassword <span class=\"token operator\">=</span> <span class=\"token string\">\'password\'</span>\nsender <span class=\"token operator\">=</span> <span class=\"token string\">\'username@163.com\'</span>\nreceiver <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\'username@qq.com\'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># receiver = [\'username1@qq.com\', \'username2@163.com\']</span>\n\nmsg <span class=\"token operator\">=</span> MIMEMultipart<span class=\"token punctuation\">(</span><span class=\"token string\">\'mixed\'</span><span class=\"token punctuation\">)</span>\nsubject <span class=\"token operator\">=</span> <span class=\"token string\">\'发送主题\'</span>\nsubject <span class=\"token operator\">=</span> Header<span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">,</span> <span class=\"token string\">\'utf-8\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmsg<span class=\"token punctuation\">[</span><span class=\"token string\">\'Subject\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> subject\nmsg<span class=\"token punctuation\">[</span><span class=\"token string\">\'From\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'username &lt;username@163.com&gt;\'</span>\nmsg<span class=\"token punctuation\">[</span><span class=\"token string\">\'To\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'username &lt;username@163.com&gt;\'</span>\n<span class=\"token comment\" spellcheck=\"true\"># msg[\'To\'] = \'username1 &lt;username1@163.com&gt;; username2 &lt;username2@163.com&gt;\'</span>\nmsg<span class=\"token punctuation\">[</span><span class=\"token string\">\'Date\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\'2021-1-26\'</span>\n\ntext <span class=\"token operator\">=</span> <span class=\"token string\">\"邮件正文\"</span>\ntext_plain <span class=\"token operator\">=</span> MIMEText<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\'plain\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\'utf-8\'</span><span class=\"token punctuation\">)</span>\nmsg<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>text_plain<span class=\"token punctuation\">)</span>\n\ntotal <span class=\"token operator\">=</span> <span class=\"token number\">1000</span>\nsend <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\nerror <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token keyword\">while</span> error <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">and</span> send <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        smtp <span class=\"token operator\">=</span> smtplib<span class=\"token punctuation\">.</span>SMTP<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        smtp<span class=\"token punctuation\">.</span>connect<span class=\"token punctuation\">(</span><span class=\"token string\">\'smtp.163.com\'</span><span class=\"token punctuation\">)</span>\n        smtp<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> send <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">:</span>\n            smtp<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第{}封邮件发送成功！\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>send<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            send <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            error <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n            time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">60</span><span class=\"token punctuation\">)</span>\n        smtp<span class=\"token punctuation\">.</span>sendmail<span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> receiver<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>as_string<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        smtp<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"发生错误，重新发送\"</span><span class=\"token punctuation\">)</span>\n        error <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">continue</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>首先你需要开启你的邮箱的<strong>POP3/SMTP</strong>和<strong>IMAP/SMTP</strong>服务，一般在邮箱设置的账户里，找找都能找到，注意开启后会获得一段<strong>授权码</strong>，牢记它！之后的操作用它来替换你原本的邮箱密码。</p> \n<p>上面代码详细含义如下：</p> \n<ul> \n <li><code>smtpserver</code>替换成你自己邮箱的服务器地址，百度可以搜到。</li> \n <li><code>username</code>替换成你的邮箱账号，也就是登陆的时候的账号名。</li> \n <li><code>password</code>替换成你的<strong>授权码</strong>，而不是原本的邮箱密码！</li> \n <li><code>sender</code>是你的发件人，替换成你的邮箱账号。</li> \n <li><code>receiver</code>是你的收件人，注释部分可以发送给多个人。注意<strong>很多邮箱有最大收件人个数的限制</strong>。</li> \n <li><code>subject</code>是你的邮件主题。</li> \n <li><code>msg[\'From\']</code>是发邮件时显示的发件人信息。</li> \n <li><code>msg[\'To\']</code>是发邮件时显示的收件人信息，注释部分也可以显示多个人信息，用分号隔开。</li> \n <li><code>msg[\'Date\']</code>是发邮件日期。</li> \n <li><code>text</code>是邮件正文，这里我省略了图片、附件等发送方法，可以参考文末链接。</li> \n <li><code>total</code>是我设置的邮件轰炸次数，这里发送1000次，如果你是正常群发目的，设置成1次就行了。</li> \n <li><code>error</code>是允许报错次数，如果连续超过10次依然发送失败，那么就停止发送了。</li> \n <li>注意我这里设置了<code>time.sleep(60)</code>，也就是60秒发送一次。这个时间不能太短，不然发送过于频繁，会被判断成垃圾邮件！</li> \n</ul> \n<p>如果运行提示缺少库，那就用<code>pip install xxx</code>安装一下就行了。</p> \n<p>像大家平时如果有群发邮件的正当需求，都可以用这个代码试试。不建议用它来轰炸其他人哦，这是不好的行为。</p> \n<p><strong>参考文献：</strong><br><a href=\"https://www.cnblogs.com/yufeihlf/p/5726619.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/yufeihlf/p/5726619.html</a></p>', '2022-04-22 15:45:03', '2.7k', 3, 6654);
INSERT INTO `t_article` VALUES ('7ea33b62c73b407fb02c4bda83655d04', '计算机知识', 11, '2019.2.4时GitHub超过15个粉丝就可以领取3000元啦！', 'https://picsum.photos/1920/1080?random&rand=0.6949535842792638', '前言看了标题，你可能会觉得这又是个诈骗或者广告，但是这次确实是在送钱。白嫖一时爽，一直白嫖一直爽。 怎么回事呢，官网在这：https://www.namebase.io/airdrop，原话是这么说的： The Handshake Org', '<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>看了标题，你可能会觉得这又是个诈骗或者广告，但是这次确实是在送钱。白嫖一时爽，一直白嫖一直爽。</p> \n<p>怎么回事呢，官网在这：<a href=\"https://www.namebase.io/airdrop\" target=\"_blank\" rel=\"noopener\">https://www.namebase.io/airdrop</a>，原话是这么说的：</p> \n<blockquote> \n <p>The Handshake Organization raised money from top Silicon Valley investors including A16Z and Sequoia. They donated $10.2mm to GNU, Mozilla, and other internet foundations. Now they’re giving away ~4662 Handshake coins to qualifying developers on GitHub.</p> \n</blockquote> \n<p>翻译成中文，大致意思就是握手（handshake）组织筹集到了一笔资金，分给了好几个组织，还给 github 每个符合要求的用户捐了 4662 个握手币。握手币可以兑换成比特币，再换成人民币。具体多少呢？<strong>大概也就 0.05 个左右比特币，人民币三五千左右吧</strong>。</p> \n<p>那么重点来了，要符合什么要求呢？要求如下，主要有两点：</p> \n<ul> \n <li>你的 github 账号在 2019 年 2 月 4 号那一周之前拥有 <strong>15 个及以上的粉丝</strong>。</li> \n <li>你的 github 账号在 2019 年 2 月 4 号那一周之前创建过 <strong>SSH key</strong>，并且现在还保留着。</li> \n</ul> \n<p>如果你不知道是否符合要求，也不要紧，按照下面步骤做就是了，不符合会弹出提示的。</p> \n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2>\n<blockquote> \n <p>本人电脑系统 Windows 10 专业版 1909，Node.js 版本 10.16.0，npm 版本 6.13.7，其他环境操作大致相同，可能会有小问题，欢迎评论区留言。</p> \n</blockquote> \n<p>首先你电脑里需要 Node.js 和 python 2 的运行环境，安装地址在下面：</p> \n<p><strong>Node.js：</strong><br><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/zh-cn/</a></p> \n<p><strong>python2：</strong><br><a href=\"https://www.anaconda.com/distribution/#download-section\" target=\"_blank\" rel=\"noopener\">https://www.anaconda.com/distribution/#download-section</a></p> \n<h2 id=\"下载-hs-airdrop\"><a href=\"#下载-hs-airdrop\" class=\"headerlink\" title=\"下载 hs-airdrop\"></a>下载 hs-airdrop</h2>\n<p>运行下面命令：</p> \n<pre><code>git clone https://github.com/handshake-org/hs-airdrop.git</code></pre>\n<h2 id=\"安装-hs-airdrop-需要的依赖\"><a href=\"#安装-hs-airdrop-需要的依赖\" class=\"headerlink\" title=\"安装 hs-airdrop 需要的依赖\"></a>安装 hs-airdrop 需要的依赖</h2>\n<pre><code>cd hs-airdrop &amp;&amp; npm install</code></pre>\n<h2 id=\"找到你的-SSH-key-存放目录\"><a href=\"#找到你的-SSH-key-存放目录\" class=\"headerlink\" title=\"找到你的 SSH key 存放目录\"></a>找到你的 SSH key 存放目录</h2>\n<p>如果你是 Linix ，存放目录一般是 <code>~/.ssh</code> 。如果你跟我一样是 Windows 10，存放目录一般是 <code>C:\\Users\\你的用户名\\.ssh</code> 。</p> \n<p>然后在目录下找到你的 SSH key 文件，注意一定要是符合要求（2019 年 2 月 4 号之前）的那个。例如我的文件路径是 <code>C:\\Users\\godweiyang\\.ssh\\id_rsa</code> 。</p> \n<h2 id=\"生成你的握手币钱包地址\"><a href=\"#生成你的握手币钱包地址\" class=\"headerlink\" title=\"生成你的握手币钱包地址\"></a>生成你的握手币钱包地址</h2>\n<p>打开 <a href=\"https://www.namebase.io/airdrop\" target=\"_blank\" rel=\"noopener\">https://www.namebase.io/airdrop</a>，跳转到第 4 步，点击 <code>Click To Show Your Handshake Wallet Address</code> ，然后就会生成出一串如下字符，就是你的钱包地址：</p> \n<p><img src=\"1.jpg\" alt></p> \n<h2 id=\"生成加密证明\"><a href=\"#生成加密证明\" class=\"headerlink\" title=\"生成加密证明\"></a>生成加密证明</h2>\n<p>直接运行如下命令：</p> \n<pre><code>./bin/hs-airdrop &lt;path to key&gt; &lt;address&gt; &lt;fee&gt;</code></pre>\n<p>其中 <code>&lt;path to key&gt;</code> 是刚刚 SSH key 文件路径，<code>&lt;address&gt;</code> 是上一步生成的钱包地址，<code>&lt;fee&gt;</code> 是手续费（单位是握手币），设为默认 0.01 就行了。</p> \n<p>例如我的命令是：</p> \n<pre><code>./bin/hs-airdrop C:\\Users\\godweiyang\\.ssh\\id_rsa hs1qxxxxxxxxxxx 0.01</code></pre>\n<p>然后会让你输入 <code>Passphrase</code> ，一般都是空，直接回车就行了。</p> \n<p>运行成功了之后界面是这样的：<br><img src=\"2.jpg\" alt></p> \n<p><strong>报错解决 1 ：</strong><br>如果你是 Windows，你可能会遇到 <code>TypeError: stdin.setRawMode is not a function</code> 错误，不用担心，只需要将命令修改为下面这样：</p> \n<pre><code>node bin/hs-airdrop &lt;path to key&gt; &lt;address&gt; &lt;fee&gt;</code></pre>\n<p>也就是前面加一个 <code>node</code> ，并且运行程序路径最前面去掉 <code>./</code> 就行了。</p> \n<p><strong>报错解决 2 ：</strong><br>可能运行了三四分钟之后，会弹出 <code>Error: read ECONNRESET</code> 错误，这是因为要下载一个 github 仓库，太大了下不下来。</p> \n<p>解决方法就是先下载 <a href=\"https://gitee.com/shidenggui/hs-tree-data\" target=\"_blank\" rel=\"noopener\">https://gitee.com/shidenggui/hs-tree-data</a> 这个仓库内容，然后将仓库内容复制到 <code>C:\\Users\\你的用户名\\.hs-tree-data</code> 目录下。这样运行的时候就不需要下载了，直接就能运行。</p> \n<h2 id=\"复制-base64-代码\"><a href=\"#复制-base64-代码\" class=\"headerlink\" title=\"复制 base64 代码\"></a>复制 base64 代码</h2>\n<p>等待三五分钟，如果成功了，你有资格，那么就会生成一串下面这样的 base64 代码：<br><img src=\"4.png\" alt></p> \n<p>将它复制到 <a href=\"https://www.namebase.io/airdrop\" target=\"_blank\" rel=\"noopener\">https://www.namebase.io/airdrop</a> 最后一步如下框框里（<strong>注意一定要去除 base64 代码中的换行符，让它只有一行！</strong>）：<br><img src=\"3.jpg\" alt></p> \n<h2 id=\"到账后提现\"><a href=\"#到账后提现\" class=\"headerlink\" title=\"到账后提现\"></a>到账后提现</h2>\n<p>到账时间不好说，至少需要 16 个小时，至多你就等着吧，到账的是 HNS 币，也就是握手币。</p> \n<p>然后打开 <a href=\"https://www.namebase.io/kyc/basic\" target=\"_blank\" rel=\"noopener\">https://www.namebase.io/kyc/basic</a> 进行实名认证（不然没法转成比特币），提供身份证、驾照或者护照都可以。</p> \n<p>打开 <a href=\"https://www.namebase.io/sell\" target=\"_blank\" rel=\"noopener\">https://www.namebase.io/sell</a> 将握手币兑换成比特币。</p> \n<p>具体比特币钱包地址如何获取、比特币怎么转换成人民币等操作就不介绍了，网上教程很多。</p> \n<blockquote> \n <p>笔者写这篇文章的时候还没到账，就不截图了，我先去等着了。</p> \n</blockquote>', '2022-04-22 17:27:25', '1.4k', 8, 9345);
INSERT INTO `t_article` VALUES ('7fcc2c8b244d4591898904cfb19c16b4', '编程算法', 16, '每日算法系列【LeetCode 289】生命游戏', 'https://picsum.photos/1920/1080?random&rand=0.5337255445118119', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。 给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>根据百度百科，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在1970年发明的细胞自动机。</p> \n<p>给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞具有一个初始状态 live（1）即为活细胞， 或 dead（0）即为死细胞。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p> \n<ul> \n <li>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；</li> \n <li>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；</li> \n <li>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；</li> \n <li>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；</li> \n</ul> \n<p>根据当前状态，写一个函数来计算面板上细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\n  [0,1,0],\n  [0,0,1],\n  [1,1,1],\n  [0,0,0]\n]\n输出：\n[\n  [0,0,0],\n  [1,0,1],\n  [0,1,1],\n  [0,1,0]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>进阶</strong></p> \n<ul> \n <li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li> \n <li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题要求你根据数组每个元素四周的状态来更新数组元素。如果使用一个辅助数组，遍历原数组，然后保存更新后的状态到辅助数组里。这样的话轻轻松松，没有任何难度。但是这题意思是让你不使用辅助数组，直接修改原数组元素，达到一样的目的。</p> \n<p>这样的话就不能直接修改原数组元素了，不然当你遍历下一个元素的时候，它周围的值都变掉了，还怎么看它要不要变呢？所以我们应该想办法把变化前变化后的元素都保存下来。</p> \n<p>因为这题只有两个状态 0 和 1 ，所以我们可以用两位二进制来表示变化前和后的状态，第一位表示变化后，第二位表示变化前。 00，10，01，11 分别表示 0 不变、0 变到 1 、1 变到 0 、1 不变四种变化情况。这样的话就算你直接修改了元素值，也能获取到它的原来的值。最后只需要进行第二遍扫描，取出变化后的值，也就是第一位就行了。</p> \n<p>判断和修改都可以通过位运算来完成。判断修改前是否为 1 可以通过 $x\\&amp;1$ 来看。用 m 表示修改（1）或者不修改（0），那么更新后元素就变成了 $x + (m &lt;&lt; 1)$ 。最后更新后的数组元素就是 $x &gt;&gt; 1$ 了。</p> \n<p>而边界问题很好处理，只需要判断一下有没有超出边界就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">gameOfLife</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> board<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> board<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> nx <span class=\"token operator\">&amp;&amp;</span> nx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ny <span class=\"token operator\">&amp;&amp;</span> ny <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> cnt <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">gameOfLife</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> board<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> None<span class=\"token punctuation\">:</span>\n        dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    nx<span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> nx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">and</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> ny <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span>board<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">if</span> board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                    board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> cnt<span class=\"token operator\">==</span><span class=\"token number\">2</span> <span class=\"token operator\">or</span> cnt<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> cnt<span class=\"token operator\">==</span><span class=\"token number\">3</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                board<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 05:03:33', '4.7k', 8, 8163);
INSERT INTO `t_article` VALUES ('7fd9f2a271f748c58dda205808334d9c', '编程算法', 37, '【每日算法Day 85】图解算法：一行代码解决约瑟夫环的变体', 'http://47.96.31.161:9000/my-file/img71.jpg', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 390. 消除游戏 题目描述给定一个从 $1$ 到 $n$ 排序的整数列表。首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。第二步，在', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/elimination-game/\" title=\"LeetCode 390. 消除游戏\" target=\"_blank\" rel=\"noopener\">LeetCode 390. 消除游戏</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个从 $1$ 到 $n$ 排序的整数列表。<br>首先，从左到右，从第一个数字开始，每隔一个数字进行删除，直到列表的末尾。<br>第二步，在剩下的数字中，从右到左，从倒数第一个数字开始，每隔一个数字进行删除，直到列表开头。<br>我们不断重复这两步，从左到右和从右到左交替进行，直到只剩下一个数字。<br>返回长度为 $n$ 的列表中，最后剩下的数字。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 9,\n1 2 3 4 5 6 7 8 9\n2 4 6 8\n2 6\n6\n输出:\n6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>还记得几天前讲过的约瑟夫环问题吗？不记得了就回顾一下吧：</p> \n<p><a href=\"https://godweiyang.com/2020/03/19/leetcode-interview-62/\" title=\"韦阳的博客：【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！\">韦阳的博客：【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！</a></p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/114391147\" title=\"知乎专栏：【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！\" target=\"_blank\" rel=\"noopener\">知乎专栏：【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！</a></p> \n<p>当时我们的方法是通过编号映射来递归寻找下一轮存活的人的，那么这题也可以尝试用同样的方法。</p> \n<p>我们分奇偶两种情况来考虑。</p> \n<p><img src=\"1.jpg\" alt><br>如果 $n=2k$ ，那么如上图所示，第一轮消除完了之后，剩下的数字就是绿色的偶数部分。</p> \n<p>接着就要从右往左递归地消除了，那我们从右往左给绿色数字重新编号为 $1$ 到 $k$ ，问题就转化为了 $k$ 个数字的情况下，最后剩余的数字是几了。</p> \n<p>假设我们用 $f(2k)$ 表示初始时 $n=2k$ 个数字最后剩下的编号，那么绿色部分重新编号后最后剩下的数字就是 $f(k)$ 。但是怎么将 $f(k)$ 重新映射回绿色的数字编号呢？</p> \n<p>通过观察我们可以发现，绿色数字整除 $2$ ，再加上蓝色的映射后的编号，结果一定等于 $k+1$ 。所以我们就得到了映射回去的公式：<br>$$<br>f(2k) = 2(k+1-f(k))<br>$$</p> \n<p>比如说你求出来 $f(k) = 2$ ，也就是蓝色部分最后剩下的数字是 $2$ ，那么映射成绿色的编号就是 $2k-2$ ，这就是最初的编号了。</p> \n<p><img src=\"2.jpg\" alt></p> \n<p>如果 $n=2k+1$ ，那么如上图所示，只需要在后面加个橙色的 $2k+1$ 就行了。</p> \n<p>但是第一轮的时候它就被消除了，所以绿色的剩下的编号和之前偶数情况没有任何区别。所以最终的答案也是：<br>$$<br>f(2k+1) = 2(k+1-f(k))<br>$$</p> \n<p>最后发现奇偶情况下，公式其实可以统一起来，用 $n$ 来替换 $k$ 就得到了：<br>$$<br>f(n) = 2\\left(\\left\\lfloor\\frac{n}{2}\\right\\rfloor-f\\left(\\left\\lfloor\\frac{n}{2}\\right\\rfloor\\right)\\right)<br>$$</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span><span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lastRemaining</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">1</span> <span class=\"token keyword\">else</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>lastRemaining<span class=\"token punctuation\">(</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>', '2022-04-22 05:03:20', '5.0k', 9, 9574);
INSERT INTO `t_article` VALUES ('802bc0ad37524e169b8db4371abaa531', '编程算法', 17, '每日算法系列【LeetCode 1039】多边形三角剖分的最低得分', 'https://picsum.photos/1920/1080?random&rand=0.6910597637091553', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定 N，想象一个凸 N 边多边形，其顶点按顺时针顺序依次标记为 A[0], A[i], …, A[N-1]。 假设您将多边形剖分为 N-2 个三角形。对于每个三角形，该三角形', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定 N，想象一个凸 N 边多边形，其顶点按顺时针顺序依次标记为 A[0], A[i], …, A[N-1]。</p> \n<p>假设您将多边形剖分为 N-2 个三角形。对于每个三角形，该三角形的值是顶点标记的乘积，三角剖分的分数是进行三角剖分后所有 N-2 个三角形的值之和。</p> \n<p>返回多边形进行三角剖分后可以得到的最低分。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3]\n输出：\n6\n解释：\n多边形已经三角化，唯一三角形的分数为 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong><br><img src=\"1.png\" alt></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,7,4,5]\n输出：\n144\n解释：\n有两种三角剖分，可能得分分别为：3*7*5 + 4*5*7 = 245，或 3*4*5 + 3*4*7 = 144。最低分数为 144。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,3,1,4,1,5]\n输出：\n13\n解释：\n最低分数三角剖分的得分情况为 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>3 &lt;= A.length &lt;= 50</li> \n <li>1 &lt;= A[i] &lt;= 100</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>一个凸 $n$ 边多边形，不停切割下去，最终一定是能切割成 $n-2$ 个三角形。那么按照什么顺序切割才能方便求解呢？</p> \n<p>可以发现，一刀下去，两个多边形只有一条边是在内部，其他边都是连续的外围的边，如下图所示：</p> \n<p><img src=\"2.jpg\" alt></p> \n<p>所以右边的多边形我们可以用 $(i, j)$ 二维状态来表示。</p> \n<p>那么继续切割下去，例如切割左边那块多边形，我们应该先把 $(i, j)$ 这条边对应的三角形给找出来，那就是在 $(i, j)$ 之间找到第三个点 $k$ ，如下图所示：</p> \n<p><img src=\"3.jpg\" alt></p> \n<p>这样右边多边形就被划分为了 3 块，其中除了 $(i, j, k)$ 这个三角形外，两外两块多边形仍然满足只有一条内边的性质，所以可以继续用二位状态表示为 $(i, k)$ 和 $(k, j)$。</p> \n<p>那如果不先找三角形 $(i, j, k)$ 会怎么样呢。如下图所示：</p> \n<p><img src=\"4.jpg\" alt></p> \n<p>这样的话，多边形 $(i, k_1, k_2, j)$ 就会出现两条内边，那么这种多边形就很难用简单的二维状态来表示了，程序中很难实现。</p> \n<p>最后就能用二维动态规划来递归求解了。用 $(i, j)$ 表示多边形 $i \\to i+1 \\to \\cdots j$ ，其中只有 $j \\to i$ 是内边。设 $dp[i][j]$ 表示多边形 $(i, j)$ 切割后最小得分，那么只需要找到上面所说的切割点 $k$ 就行了，转移方程为：<br>$$<br>dp[i][j] = \\min(dp[i][k] + dp[k][j] + A[i] \\cdot A[j] \\cdot A[k])<br>$$</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">minScoreTriangulation</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    tmp <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>A<span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>A<span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minScoreTriangulation</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>n <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n                tmp <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span>\n                <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    tmp <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>A<span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>A<span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>dp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-02-12 18:17:41', '4.6k', 10, 7842);
INSERT INTO `t_article` VALUES ('8101dda673354cd08bcfea8301b3faec', '编程算法', 18, '训练BERT，我只花了一半的时间', 'https://picsum.photos/1920/1080?random&rand=0.3301979360628312', '相信很多人都知道Hugging Face，也都用过它的Transformers预训练语言模型，但你们有没有觉得它训练的有点太慢了呢？ 这时候，字节第二快的男人要站出来了（第一快是我mentor），手把手教你怎么让训练时间缩短一半。 训练BE', '<p>相信很多人都知道Hugging Face，也都用过它的Transformers预训练语言模型，但你们有没有觉得它训练的有点太慢了呢？</p> \n<p>这时候，字节第二快的男人要站出来了（第一快是我mentor），手把手教你怎么让训练时间缩短一半。</p> \n<h2 id=\"训练BERT\"><a href=\"#训练BERT\" class=\"headerlink\" title=\"训练BERT\"></a>训练BERT</h2>\n<p>首先我们要安装Transformers库，这很简单：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install transformers<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>然后我们直接把官方的例子拷贝下来，这里我们用的是GLUE任务，地址是<a href=\"https://github.com/huggingface/transformers/blob/master/examples/pytorch/text-classification/run_glue.py\" target=\"_blank\" rel=\"noopener\">https://github.com/huggingface/transformers/blob/master/examples/pytorch/text-classification/run_glue.py</a>。因为代码太长了，这里就不放了，拷贝下来后文件名是<code>run_glue.py</code>。</p> \n<p>接着我们就可以直接运行这个代码了，我们采用mrpc数据集，开启FP16训练，命令如下：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python run_glue.py \\\n  --model_name_or_path bert-base-cased \\\n  --task_name mrpc \\\n  --do_train \\\n  --do_eval \\\n  --max_seq_length 128 \\\n  --per_device_train_batch_size 32 \\\n  --num_train_epochs 3 \\\n  --output_dir /tmp/mrpc/ \\\n  --overwrite_output_dir \\\n  --fp16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>我这里是单卡训练的，训练完后输出如下：</p> \n<pre class=\"line-numbers language-txt\"><code class=\"language-txt\">***** train metrics *****\n  epoch                    =        3.0\n  train_loss               =     0.3921\n  train_runtime            = 0:00:45.06\n  train_samples            =       3668\n  train_samples_per_second =    244.166\n  train_steps_per_second   =      7.655<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>可以看出，训练总共耗时<strong>45秒</strong>，是不是有点等不及了呢？</p> \n<h2 id=\"加速训练\"><a href=\"#加速训练\" class=\"headerlink\" title=\"加速训练\"></a>加速训练</h2>\n<p>首先我们需要安装训练加速库，这里我们用到的是LightSeq，项目地址是<a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a>。不过我们还是直接<code>pip</code>安装：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">pip install lightseq<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>然后我们需要做的就是将Hugging Face的BERT替换成LightSeq的BERT，代码如下，放在文件<code>replace_module.py</code>中。</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> lightseq<span class=\"token punctuation\">.</span>training<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>pytorch<span class=\"token punctuation\">.</span>transformer_encoder_layer <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    LSTransformerEncoderLayer<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LSHFTransformerEncoderLayer</span><span class=\"token punctuation\">(</span>LSTransformerEncoderLayer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>LSHFTransformerEncoderLayer<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> hidden_states<span class=\"token punctuation\">,</span> encoder_padding_mask<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        encoder_padding_mask <span class=\"token operator\">/=</span> <span class=\"token operator\">-</span><span class=\"token number\">10000.0</span>\n        output <span class=\"token operator\">=</span> super<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span>hidden_states<span class=\"token punctuation\">,</span> encoder_padding_mask<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">gen_ls_bert_config</span><span class=\"token punctuation\">(</span>training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bert_config <span class=\"token operator\">=</span> LSTransformerEncoderLayer<span class=\"token punctuation\">.</span>get_config<span class=\"token punctuation\">(</span>\n        max_batch_tokens<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        max_seq_len<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>max_position_embeddings<span class=\"token punctuation\">,</span>\n        hidden_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span>\n        intermediate_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>intermediate_size<span class=\"token punctuation\">,</span>\n        nhead<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>num_attention_heads<span class=\"token punctuation\">,</span>\n        attn_prob_dropout_ratio<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>attention_probs_dropout_prob<span class=\"token punctuation\">,</span>\n        activation_dropout_ratio<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span>\n        hidden_dropout_ratio<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>hidden_dropout_prob<span class=\"token punctuation\">,</span>\n        pre_layer_norm<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span>training_args<span class=\"token punctuation\">.</span>fp16<span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span>training_args<span class=\"token punctuation\">.</span>local_rank<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> bert_config\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">inject_ls_enc_layer</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>num_hidden_layers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bert_config <span class=\"token operator\">=</span> gen_ls_bert_config<span class=\"token punctuation\">(</span>training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n        model<span class=\"token punctuation\">.</span>bert<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSHFTransformerEncoderLayer<span class=\"token punctuation\">(</span>bert_config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里<code>LSHFTransformerEncoderLayer</code>是继承的LightSeq中的<code>LSTransformerEncoderLayer</code>类，然后重写了<code>forward</code>函数。原因是Hugging Face的输入格式和LightSeq略有不同，需要在<code>forward</code>之前转换一下。</p> \n<p><code>gen_ls_bert_config</code>函数是用来定义LightSeq的encoder参数配置，这里直接从Hugging Face的主函数入口获取即可。</p> \n<p><code>inject_ls_enc_layer</code>函数就是用来替换BERT中的每一层encoder的，首先定义每一层的参数配置，然后用<code>LSHFTransformerEncoderLayer</code>类去替换原始的encoder层即可。</p> \n<p>然后我们打开<code>run_glue.py</code>，在头文件处加上<code>inject_ls_enc_layer</code>的引用：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> replace_module <span class=\"token keyword\">import</span> inject_ls_enc_layer<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>最后在定义完model后，将model中的encoder替换即可，利用上面引用的替换函数：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">model <span class=\"token operator\">=</span> AutoModelForSequenceClassification<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>\n    model_args<span class=\"token punctuation\">.</span>model_name_or_path<span class=\"token punctuation\">,</span>\n    from_tf<span class=\"token operator\">=</span>bool<span class=\"token punctuation\">(</span><span class=\"token string\">\".ckpt\"</span> <span class=\"token keyword\">in</span> model_args<span class=\"token punctuation\">.</span>model_name_or_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">=</span>config<span class=\"token punctuation\">,</span>\n    cache_dir<span class=\"token operator\">=</span>model_args<span class=\"token punctuation\">.</span>cache_dir<span class=\"token punctuation\">,</span>\n    revision<span class=\"token operator\">=</span>model_args<span class=\"token punctuation\">.</span>model_revision<span class=\"token punctuation\">,</span>\n    use_auth_token<span class=\"token operator\">=</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> model_args<span class=\"token punctuation\">.</span>use_auth_token <span class=\"token keyword\">else</span> None<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 在model定义后立刻替换</span>\ninject_ls_enc_layer<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>我们重新运行上一次运行的命令：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python run_glue.py \\\n  --model_name_or_path bert-base-cased \\\n  --task_name mrpc \\\n  --do_train \\\n  --do_eval \\\n  --max_seq_length 128 \\\n  --per_device_train_batch_size 32 \\\n  --num_train_epochs 3 \\\n  --output_dir /tmp/mrpc/ \\\n  --overwrite_output_dir \\\n  --fp16<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>最终输出如下：</p> \n<pre class=\"line-numbers language-txt\"><code class=\"language-txt\">***** train metrics *****\n  epoch                    =        3.0\n  train_loss               =     0.6077\n  train_runtime            = 0:00:25.08\n  train_samples            =       3668\n  train_samples_per_second =    438.603\n  train_steps_per_second   =     13.751<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这次运行时间只有<strong>25秒</strong>！不愧是字节最快的男人。</p> \n<h2 id=\"加载预训练参数\"><a href=\"#加载预训练参数\" class=\"headerlink\" title=\"加载预训练参数\"></a>加载预训练参数</h2>\n<p>有眼尖的小伙伴可能发现了，上面加速后效果变差了呀。没错，因为新建了encoder类之后，参数都是随机初始化的了，所以要重新加载一下预训练参数。</p> \n<p>LightSeq的encoder类初始化的时候提供了预训练参数初始化的选项，我们只需要将预训练参数从Hugging Face的BERT中提取出来即可：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_hf_bert_enc_layer_params</span><span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    init_ws <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    init_bs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>self<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>attention<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>intermediate<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_ws<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    init_bs<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>layer<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span>LayerNorm<span class=\"token punctuation\">.</span>bias<span class=\"token punctuation\">.</span>detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clone<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> init_ws<span class=\"token punctuation\">,</span> init_bs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>注意参数在列表中的顺序不能错了，然后将这两个列表加入到<code>LSHFTransformerEncoderLayer</code>类的初始化参数中去：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">inject_ls_enc_layer</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>num_hidden_layers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bert_config <span class=\"token operator\">=</span> gen_ls_bert_config<span class=\"token punctuation\">(</span>training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 提取预训练参数</span>\n        init_ws<span class=\"token punctuation\">,</span> init_bs <span class=\"token operator\">=</span> get_hf_bert_enc_layer_params<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>bert<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 利用预训练参数进行初始化</span>\n        model<span class=\"token punctuation\">.</span>bert<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> LSHFTransformerEncoderLayer<span class=\"token punctuation\">(</span>\n            bert_config<span class=\"token punctuation\">,</span> init_ws<span class=\"token punctuation\">,</span> init_bs\n        <span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>接着运行命令不变，效果就上来啦。</p> \n<h2 id=\"和竞品比如何？\"><a href=\"#和竞品比如何？\" class=\"headerlink\" title=\"和竞品比如何？\"></a>和竞品比如何？</h2>\n<p>另一款知名的训练加速库DeepSpeed你们可能也听过，那和它比速度怎么样呢？</p> \n<p>Hugging Face已经内置了DeepSpeed，可以直接开启。不过它并没有替换掉encoder，所以模型还是用PyTorch写的，速度依然很慢。因此我们需要手动替换一下encoder。</p> \n<p>代码和上面类似，也是定义参数配置和encoder类：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> deepspeed<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>transformer <span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n    DeepSpeedTransformerConfig<span class=\"token punctuation\">,</span>\n    DeepSpeedTransformerLayer\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">gen_ds_bert_config</span><span class=\"token punctuation\">(</span>training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    bert_config <span class=\"token operator\">=</span> DeepSpeedTransformerConfig<span class=\"token punctuation\">(</span>\n        batch_size<span class=\"token operator\">=</span><span class=\"token number\">4096</span><span class=\"token punctuation\">,</span>\n        hidden_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>hidden_size<span class=\"token punctuation\">,</span>\n        intermediate_size<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>intermediate_size<span class=\"token punctuation\">,</span>\n        heads<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>num_attention_heads<span class=\"token punctuation\">,</span>\n        attn_dropout_ratio<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>attention_probs_dropout_prob<span class=\"token punctuation\">,</span>\n        hidden_dropout_ratio<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>hidden_dropout_prob<span class=\"token punctuation\">,</span>\n        num_hidden_layers<span class=\"token operator\">=</span>config<span class=\"token punctuation\">.</span>num_hidden_layers<span class=\"token punctuation\">,</span>\n        initializer_range<span class=\"token operator\">=</span><span class=\"token number\">0.02</span><span class=\"token punctuation\">,</span>\n        layer_norm_eps<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n        local_rank<span class=\"token operator\">=</span>training_args<span class=\"token punctuation\">.</span>local_rank<span class=\"token punctuation\">,</span>\n        fp16<span class=\"token operator\">=</span>training_args<span class=\"token punctuation\">.</span>fp16<span class=\"token punctuation\">,</span>\n        pre_layer_norm<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span>\n        huggingface<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>\n        training<span class=\"token operator\">=</span><span class=\"token boolean\">True</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> bert_config\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">inject_ds_enc_layer</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">.</span>num_hidden_layers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        bert_config <span class=\"token operator\">=</span> gen_ds_bert_config<span class=\"token punctuation\">(</span>training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span>\n        model<span class=\"token punctuation\">.</span>bert<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> DeepSpeedTransformerLayer<span class=\"token punctuation\">(</span>bert_config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>然后在<code>run_glue.py</code>里引用<code>inject_ds_enc_layer</code>替换函数，并对model进行替换：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> replace_module <span class=\"token keyword\">import</span> inject_ds_enc_layer\n\nmodel <span class=\"token operator\">=</span> AutoModelForSequenceClassification<span class=\"token punctuation\">.</span>from_pretrained<span class=\"token punctuation\">(</span>\n    model_args<span class=\"token punctuation\">.</span>model_name_or_path<span class=\"token punctuation\">,</span>\n    from_tf<span class=\"token operator\">=</span>bool<span class=\"token punctuation\">(</span><span class=\"token string\">\".ckpt\"</span> <span class=\"token keyword\">in</span> model_args<span class=\"token punctuation\">.</span>model_name_or_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">=</span>config<span class=\"token punctuation\">,</span>\n    cache_dir<span class=\"token operator\">=</span>model_args<span class=\"token punctuation\">.</span>cache_dir<span class=\"token punctuation\">,</span>\n    revision<span class=\"token operator\">=</span>model_args<span class=\"token punctuation\">.</span>model_revision<span class=\"token punctuation\">,</span>\n    use_auth_token<span class=\"token operator\">=</span><span class=\"token boolean\">True</span> <span class=\"token keyword\">if</span> model_args<span class=\"token punctuation\">.</span>use_auth_token <span class=\"token keyword\">else</span> None<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 在model定义后立刻替换</span>\ninject_ds_enc_layer<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> training_args<span class=\"token punctuation\">,</span> config<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>最后我们还需要定义一个DeepSpeed需要用到的运行参数配置<code>ds_config.json</code>：</p> \n<pre class=\"line-numbers language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"train_micro_batch_size_per_gpu\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"optimizer\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"AdamW\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"lr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"betas\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0.999</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"eps\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1e-8</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"weight_decay\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"torch_adam\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scheduler\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"WarmupDecayLR\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"params\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"warmup_num_steps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"warmup_min_lr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"warmup_max_lr\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"total_num_steps\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"gradient_clipping\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"fp16\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"enabled\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"auto\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"loss_scale\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"initial_scale_power\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>运行命令需要稍稍修改，采用DeepSpeed的启动器：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">deepspeed --num_gpus=1 run_glue.py \\\n  --model_name_or_path bert-base-cased \\\n  --task_name mrpc \\\n  --do_train \\\n  --do_eval \\\n  --max_seq_length 128 \\\n  --per_device_train_batch_size 32 \\\n  --num_train_epochs 3 \\\n  --output_dir /tmp/mrpc/ \\\n  --overwrite_output_dir \\\n  --fp16 \\\n  --deepspeed ds_config.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>输出结果如下：</p> \n<pre class=\"line-numbers language-txt\"><code class=\"language-txt\">***** train metrics *****\n  epoch                    =        3.0\n  train_loss               =     0.5865\n  train_runtime            = 0:00:37.17\n  train_samples            =       3668\n  train_samples_per_second =    296.032\n  train_steps_per_second   =      9.281<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>发现DeepSpeed用了整整<strong>37秒</strong>才训练完，和LightSeq的<strong>25秒</strong>相比还是有差距的。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>最终对比下来，Hugging Face花了<strong>45秒</strong>训练完成，DeepSpeed花了<strong>37秒</strong>，而LightSeq只花了<strong>25秒</strong>。</p> \n<p><strong>项目地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p><strong>技术原理：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/383657837\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/383657837</a></p> \n<p><strong>其它使用例子：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/382961951\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/382961951</a></p> \n<p>如果你对字节的技术比较感兴趣，欢迎加入我们，一起开发牛X的项目，做最快的男人。 </p> \n<p><strong>我的内推码：</strong><br>A7FSJMK<br><strong>内推链接：</strong><br><a href=\"https://jobs.toutiao.com/s/egpham5\" target=\"_blank\" rel=\"noopener\">https://jobs.toutiao.com/s/egpham5</a></p>', '2022-04-22 08:41:07', '6.9k', 7, 9265);
INSERT INTO `t_article` VALUES ('811cada746f64ace8bb01b2b7cbfaae1', '编程算法', 23, '【每日算法Day 67】经典面试题：手动开根号，你知道几种方法？', 'https://picsum.photos/1920/1080?random&rand=0.8988239499217914', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 69. x 的平方根 题目描述实现 int sqrt(int n) 函数。 计算并返回 $n$ 的平方根，其中 $n$ 是非负整数。 由于返回类型是整数，结果', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/sqrtx/\" title=\"LeetCode 69. x 的平方根\" target=\"_blank\" rel=\"noopener\">LeetCode 69. x 的平方根</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>实现 <code>int sqrt(int n)</code> 函数。</p> \n<p>计算并返回 $n$ 的平方根，其中 $n$ 是非负整数。</p> \n<p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n4\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n8\n输出：\n2\n解释：\n8 的平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>为了更加通用，我们这里直接实现 <code>double sqrt(double n)</code> 函数。也就是求出 $\\sqrt{n}$ 的精确值，然后取整就行了。</p> \n<p>今天要教给大家的主要有三种方法：<strong>牛顿法</strong>、<strong>二分法</strong>和<strong>梯度下降法</strong>，速度上是依次下降的。</p> \n<p>首先令 $\\sqrt{n} = x$ ，也就是 $x^2 - n = 0$ ，也就是我们要求 $x^2 - n$ 的零点。</p> \n<p>如果我们把 $x^2 - n$ 当作某个函数的导数，那么原函数就是 $f(x) = \\frac{1}{3}x^3 - nx$ ，它的导数就是 $f’(x) = x^2 - n$ 。</p> \n<p>现在问题很明朗了，要求 $\\sqrt{n}$ 的值，等价于求 $f’(x) = 0$ 的根，等价于求 $f(x)$ 的极小值点（因为导数在非负数区间上零点唯一）。</p> \n<h3 id=\"牛顿法\"><a href=\"#牛顿法\" class=\"headerlink\" title=\"牛顿法\"></a>牛顿法</h3>\n<p>求 $f’(x) = 0$ 的根可以采用牛顿法。</p> \n<p>首先选取一个初值 $x_0$ ，然后在函数 $(x_0, f’(x_0))$ 处作切线，求出切线与 $x$ 轴交点 。接着将交点坐标作为新的 $x_0$ ，然后重复上面步骤，直到 $f’(x_0)$ 和 $0$ 差值小于某个阈值。</p> \n<p>直接给出计算得到的更新公式吧，大家也可以自己通过切线方程推导一下：<br>$$<br>x_0 \\leftarrow x_0 - \\frac{f’(x_0)}{f’’(x_0)} = \\frac{1}{2}(x_0+\\frac{n}{x_0})<br>$$<br>还可以通过泰勒展开得到这个公式，这里就不详细阐述了。</p> \n<h3 id=\"梯度下降法\"><a href=\"#梯度下降法\" class=\"headerlink\" title=\"梯度下降法\"></a>梯度下降法</h3>\n<p>求 $f(x)$ 的极小值点可以采用梯度下降法。</p> \n<p>首先选取一个初值 $x_0$ ，然后按照 $f(x_0)$ 的导数的逆方向更新 $x_0$ ，具体更新多少取决于你设置的学习率 $lr$ 。</p> \n<p>更新公式就是：<br>$$<br>x_0 \\leftarrow x_0 - lr \\cdot f’(x_0) = x_0 - lr \\cdot (x_0^2 - n)<br>$$</p> \n<h3 id=\"二分法\"><a href=\"#二分法\" class=\"headerlink\" title=\"二分法\"></a>二分法</h3>\n<p>这就是很普通的二分方法了，因为 $f’(x)$ 在 $[0,\\infty)$ 区间上是单调递增的，所以可以采用二分法求出零点，这里就不赘述了。</p> \n<h3 id=\"速度比较\"><a href=\"#速度比较\" class=\"headerlink\" title=\"速度比较\"></a>速度比较</h3>\n<p>我运行了一下从 $100$ 到 $10000$ 每 $100$ 个数开根号的结果，统计了一下三种方法需要的计算次数，如下图所示：<br><img src=\"1.jpg\" alt><br>可以发现，牛顿法和二分法都是速度很快的，随着 $n$ 增大，需要的次数越来越多。但是梯度下降法的次数和学习率关系很大，学习率大了可能收敛次数变小，但是可能不收敛（左右振荡）。随着 $n$ 的增大，梯度下降法所需要的次数反而下降了，因为 $n$ 越大，函数越陡峭， $x_0$ 处的导数就越大，这样 $x_0$ 的更新幅度特别大。但是 $n$ 特别大了以后，梯度下降法需要的时间就非常长了，学习率不是很好设置了。而导数也已经超出了 <code>int</code> 范围，实现上也不是很方便。</p> \n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3>\n<p>具体实现上这题有几个注意的点，因为这题只要求你返回取整结果，所以要特别当心浮点数误差。</p> \n<p>而梯度下降法实现时，学习率不能太大，不然会产生振荡，此外还会导致 $x_0$ 更新幅度过大，直接变成负数，然后就陷入了死循环。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">mySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">long</span> y <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token function\">newtonSqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">&gt;</span> x <span class=\"token operator\">?</span> y<span class=\"token number\">-1</span> <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">newtonSqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> x0 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x0<span class=\"token operator\">*</span>x0<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1e-6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            x0 <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">/</span>x0<span class=\"token operator\">+</span>x0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> x0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">binarySqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1e-6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m<span class=\"token operator\">*</span>m <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 超时</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">gdSqrt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">double</span> x0 <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>x0<span class=\"token operator\">*</span>x0<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1e-6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">double</span> lr <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1e-3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1e-1</span><span class=\"token operator\">*</span>x0<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>x0<span class=\"token operator\">*</span>x0<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            x0 <span class=\"token operator\">=</span> x0<span class=\"token operator\">-</span>lr<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>x0<span class=\"token operator\">*</span>x0<span class=\"token operator\">-</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> x0<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 17:13:37', '1.9k', 4, 8603);
INSERT INTO `t_article` VALUES ('825e80aa7e914dfbaaaf5c77bd0e34af', '编程算法', 18, '【每日算法Day 108】一道简单的二叉树题目，写法还是挺多的。', 'https://picsum.photos/1920/1080?random&rand=0.36396044161916186', '题目链接LeetCode 199. 二叉树的右视图 题目描述给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。 示例1 输入： [1,2,3,null,5,null,4] 输出: [1,3,4] 解释', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/binary-tree-right-side-view/\" title=\"LeetCode 199. 二叉树的右视图\" target=\"_blank\" rel=\"noopener\">LeetCode 199. 二叉树的右视图</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一棵二叉树，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,null,5,null,4]\n输出:\n[1,3,4]\n解释：\n   1            &lt;---\n /   \\\n2     3         &lt;---\n \\     \\\n  5     4       &lt;---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"dfs\"><a href=\"#dfs\" class=\"headerlink\" title=\"dfs\"></a>dfs</h3>\n<p>dfs 的思路就是直接递归求解左右子树各自能看到的右视图是什么，然后判断两个视图长度。</p> \n<p>如果右子树右视图长度大于等于左子树右视图长度，那左子树完全被挡住。不用管左子树了，直接返回根结点加上右子树右视图就行了。</p> \n<p>否则的话，左子树中超出右子树深度的部分不会被挡住，也会被看到，所以得拼接在右子树右视图后面。</p> \n<h3 id=\"bfs\"><a href=\"#bfs\" class=\"headerlink\" title=\"bfs\"></a>bfs</h3>\n<p>bfs 的思路就是层次遍历了。对二叉树的每一层，只取最后一个结点就行了。</p> \n<p>bfs 的话就得用一个队列来维护结点值了，那么怎么知道哪些结点是同一层的呢？最初的想法是用一个 <code>pair</code> 再保存一个深度值，但是这样有点多余了。</p> \n<p>我们只需要每次队列中只保存同一层的结点，然后记录下队列大小。然后依次出队，直到出队个数达到之前记录的大小。并且同时将所有的下一层结点入队。这样就能保证这一层的结点全部出队之后，队列中只剩下了下一层的结点。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"dfs（c-）\"><a href=\"#dfs（c-）\" class=\"headerlink\" title=\"dfs（c++）\"></a>dfs（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">rightSideView</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>root<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> left <span class=\"token operator\">=</span> <span class=\"token function\">rightSideView</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> right <span class=\"token operator\">=</span> <span class=\"token function\">rightSideView</span><span class=\"token punctuation\">(</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>root<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> right<span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"bfs（c-）\"><a href=\"#bfs（c-）\" class=\"headerlink\" title=\"bfs（c++）\"></a>bfs（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">rightSideView</span><span class=\"token punctuation\">(</span>TreeNode<span class=\"token operator\">*</span> root<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>TreeNode<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>sz<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                TreeNode<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sz<span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-07-31 01:10:01', '1.3k', 11, 3188);
INSERT INTO `t_article` VALUES ('849c2fca54b148a39b6cb7bb61e59b14', '深度学习', 24, '2020国际机器翻译大赛：火山翻译力夺五项冠军', 'https://picsum.photos/1920/1080?random&rand=0.14976274334634532', '马上体验火山翻译：https://translate.volcengine.cn 在11月下旬结束的自然语言处理顶级学术会议EMNLP2020上，国际机器翻译大赛（WMT20）公布了赛事最终结果，来自字节跳动火山引擎旗下的火山翻译（Volc', '<p>马上体验<strong>火山翻译</strong>：<br><a href=\"https://translate.volcengine.cn\" target=\"_blank\" rel=\"noopener\">https://translate.volcengine.cn</a></p> \n<p>在11月下旬结束的自然语言处理顶级学术会议EMNLP2020上，国际机器翻译大赛（WMT20）公布了赛事最终结果，来自字节跳动火山引擎旗下的火山翻译（Volctrans）在39支参赛队伍中杀出重围，以显著优势在「中文-英语」语向翻译项目上拿下了冠军。</p> \n<p>此外，火山翻译团队还拿下了「德语 -英语」和「德语-法语」语向机器翻译项目的冠军，更斩获了平行语料过滤对齐项目普什图语和高棉语的两项第一。</p> \n<p><img src=\"1.jpeg\" alt></p> \n<h2 id=\"39支队伍角逐国际顶级机器翻译大赛WMT\"><a href=\"#39支队伍角逐国际顶级机器翻译大赛WMT\" class=\"headerlink\" title=\"39支队伍角逐国际顶级机器翻译大赛WMT\"></a>39支队伍角逐国际顶级机器翻译大赛WMT</h2>\n<p>国际机器翻译大赛（WMT）由国际计算语言学协会（ACL）举办，是全球学术界公认的国际顶级机器翻译比赛，也是各大科技公司、顶尖院校与学术机构展示自身机器翻译实力的较量舞台。</p> \n<p>自2006年至今，国际机器翻译大赛（WMT）已经成功举办15届，本届比赛共有39支队伍参赛，包括微软、Facebook、Google DeepMind、腾讯、小牛翻译、华为、滴滴等实力雄厚的参赛团队。</p> \n<p>组委会根据中英、英中、英德等22个不同翻译任务提供测试数据集，并引入科学的语言专家人工评估流程。每个参赛系统首先由多名经验丰富的语言学家进行评估，然后对最终分数进行标准化加权，最后进行排名。整个评估过程历时四个月，评价结果有非常高的置信度。</p> \n<h2 id=\"语言专家评估得分第一-火山翻译拿下「中文-英语」语向冠军\"><a href=\"#语言专家评估得分第一-火山翻译拿下「中文-英语」语向冠军\" class=\"headerlink\" title=\"语言专家评估得分第一 火山翻译拿下「中文-英语」语向冠军\"></a>语言专家评估得分第一 火山翻译拿下「中文-英语」语向冠军</h2>\n<p>历年比赛中，「中文-英语」语向的翻译任务都是参赛队伍最多、竞争最为激烈的机器翻译任务之一，今年更胜往年。</p> \n<p>火山翻译团队参加了非受限场景的比赛，也就是在给定测试集的情况下，可以使用任何数据和方法探索翻译效果极限的比赛方式，组织方也引入了四个权威的在线机器翻译商业系统（Online-A、G、Z、B）作为对比，这也是最能体现翻译团队数据和算法综合能力的场景。在人工评估中，火山翻译团队（Volctrans) 力压群雄，以明显的优势夺得了冠军。</p> \n<p><img src=\"2.jpeg\" alt=\"WMT2020 中英翻译前几名系统得分。Ave.z代表人工评估标准化分数，也是目前机器翻译最受认可的指标。\"></p> \n<p>相比「中文-英语」，「德语-英语」在 WMT 比赛上是传统项目，也是欧洲国家最关注的语向。在最后的人工评价中，火山翻译依然表现出色，取得了第一名的成绩。国际机器翻译大赛组委会给出了很高的评价，“作为新的参与者，火山翻译表现尤为出色（particularly well），超越了很多传统队伍”。</p> \n<p>复旦大学计算机学院教授、EMNLP2021大会程序主席黄萱菁表示：“WMT是非常硬核的比赛，火山翻译取得了出色成绩。火山翻译的LightSeq、mRASP等技术让人眼前一亮，机器翻译有广阔的发展空间，非常期待火山翻译为机器翻译的技术研究和产品应用探索更多可能性。”</p> \n<h2 id=\"领先的背后：火山翻译致力于打造前沿研究、产品研发和用户反馈的闭环\"><a href=\"#领先的背后：火山翻译致力于打造前沿研究、产品研发和用户反馈的闭环\" class=\"headerlink\" title=\"领先的背后：火山翻译致力于打造前沿研究、产品研发和用户反馈的闭环\"></a>领先的背后：火山翻译致力于打造前沿研究、产品研发和用户反馈的闭环</h2>\n<p>火山翻译（Volctrans）是由字节跳动计算机研究科学家、工程师、产品经理、产品运营和语言专家组成的专业团队研发，其基于自主研发的机器学习技术，积累了百亿多种语言语料，已支持超过50个语种、2500个语对之间的互译，翻译效果和速度业界领先。</p> \n<p><img src=\"3.jpeg\" alt=\"火山翻译官网。可以通过 https://translate.volcengine.cn 体验火山翻译，并了解更多产品能力。\"></p> \n<p>目前，火山翻译具备文本翻译、语音翻译、图像翻译、语种识别四种能力，在办公、娱乐、新闻等场景表现优异。</p> \n<p>基于这些能力，火山翻译推出了一系列形态多样的产品与服务，包括机器翻译云服务、智能视频翻译、智能同传、翻译浏览器插件等。此外，火山翻译支持API、SDK、私有部署等多种接入方式，且支持垂直领域的快速模型定制，能够满足不同群体和不同行业的翻译需求。</p> \n<p>在视频翻译场景，火山翻译提供简单高效的视频“转写-打轴-翻译”全流程服务，轻松听译、智能打轴、高效编辑、专业审校，集四大能力于一身，帮助创作者轻松高效地应对跨语言视频创作。</p> \n<p>在语音翻译领域，火山翻译的智能同传技术也表现卓越，能够根据现场发言提供高品质、低延时的实时语音识别字幕结果，同时提供人工字幕保障方案，让会议现场以及直播字幕更精准流畅。</p> \n<p>火山翻译的技术来源于字节跳动团队多年机器学习和自然语言处理领域的深耕。团队拥有百余项技术发明专利，在人工智能顶级国际学术会议发表50余篇学术论文。在机器翻译技术上更是独创了mRASP多语言预训练算法，把几十种语言语料融合在一起训练，获得的模型在具体语对上微调取得了44个语对的业界最佳性能，整体效果力压Facebook研发的mBART方法。同时，火山翻译研发的LUT和COSTT语音到文本翻译算法，从语音输入（例如英语）可以直接输出目标语言文字（例如中文），减少了错误累积，在效果上取得了业界领先。</p> \n<p>字节跳动杰出科学家、人工智能实验室总监李磊称：“火山翻译核心优势在打造前沿研究、产品研发和用户反馈的闭环，研发团队分布全世界多个国家，工作中也在使用自己打造的产品来跨语言沟通，在迭代中快速进步。”</p> \n<p>火山翻译团队还研发了多项机器翻译前沿技术，目前已经集成到火山翻译系列产品中，例如镜像式生成模型MGNMT、CTNMT算法、交互式翻译算法CAMIT、胶囊翻译网络、并行翻译算法PNAT和GLAT等。火山翻译还采用了自研的高性能序列推理引擎LightSeq，推理速度业界最快，比原生系统提高10倍，可以达到每秒两万词的翻译速度。</p> \n<p>李磊表示：“火山翻译已经为飞书、今日头条等多款海内外产品提供稳定和高质量的翻译服务，每天处理数亿次翻译请求，为来自全球的过亿用户群体提供优质的翻译体验。未来，火山翻译希望为更多用户提供服务，帮助用户更高效地实现国际信息无障碍交流。”</p>', '2022-04-22 07:58:56', '4.3k', 4, 3608);
INSERT INTO `t_article` VALUES ('86aa3e79761049d996995e195713eee9', '编程算法', 14, '每日算法系列【LeetCode 386】字典序排数', 'https://picsum.photos/1920/1080?random&rand=0.4022526610273912', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数 n, 返回从 1 到 n 的字典顺序。 例如，给定 n = 13，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。 请尽可能的优化算法的时', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数 n, 返回从 1 到 n 的字典顺序。</p> \n<p>例如，给定 n = 13，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p> \n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据 n 小于等于 5,000,000。</p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"排序法\"><a href=\"#排序法\" class=\"headerlink\" title=\"排序法\"></a>排序法</h3>\n<p>首先把 1 到 n 所有整数的字符串形式放进数组，然后对这个字符串数组进行排序，最后把所有字符串转换成对应的整数就行了。</p> \n<p>时间复杂度是 $O(n \\log n)$ ，空间复杂度是 $O(n)$。</p> \n<h3 id=\"字典树法\"><a href=\"#字典树法\" class=\"headerlink\" title=\"字典树法\"></a>字典树法</h3>\n<p>还可以按从小到大顺序直接生成所有整数，首先观察如下的字典树：</p> \n<p><img src=\"1.jpg\" alt=\"字典树\"></p> \n<p>可以看出来，这是一棵 10 叉的字典树，第一层根节点，第二层没有 0 （因为不能有前导 0 ），后面的每一层都是在上一层的基础上添加一位 0 到 9 。</p> \n<p>而如果按照前序遍历的顺序遍历这棵树，得到的整数序列就是字典序从小到大的。但是这棵树深度是没有限制的啊，所以如果遍历到的数字 x 大于 n 的话，就要结束遍历，回溯到上一层。</p> \n<p>时间复杂度是 $O(n)$ ，空间复杂度是 $O(n)$。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"排序法（c-）\"><a href=\"#排序法（c-）\" class=\"headerlink\" title=\"排序法（c++）\"></a>排序法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lexicalOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            s<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序法（python）\"><a href=\"#排序法（python）\" class=\"headerlink\" title=\"排序法（python）\"></a>排序法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lexicalOrder</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> res<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"字典树法（c-）\"><a href=\"#字典树法（c-）\" class=\"headerlink\" title=\"字典树法（c++）\"></a>字典树法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lexicalOrder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"字典树法（python）\"><a href=\"#字典树法（python）\" class=\"headerlink\" title=\"字典树法（python）\"></a>字典树法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">lexicalOrder</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> x <span class=\"token operator\">&gt;</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n        res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>字典序法的递归需要耗费更大的空间，而在实际运行中， python 代码排序法的运行速度甚至比字典序法更快，这说明了 python 递归是真的慢。</p>', '2022-04-22 15:41:10', '5.4k', 7, 8678);
INSERT INTO `t_article` VALUES ('86c4a7658e1a4df39d47996bcd2f47de', '编程算法', 4, '昨晚学妹参加了B站秋招笔试，还想考考我？', 'https://picsum.photos/1920/1080?random&rand=0.8396797878216896', '学妹昨晚参加了B站的2022届秋招算法笔试，做完给我发来了一道题，想考考我，说挺难的。 我看了两分钟，给她发去了我的思路。然后学妹一眼就看懂了，立马秒过。 那么这道题到底是怎么做的呢？ 题目要求将$n$个数切分成$k$块，求每块的序号乘上该', '<p>学妹昨晚参加了B站的2022届秋招算法笔试，做完给我发来了一道题，想考考我，说挺难的。<br><img src=\"2.jpg\" alt></p> \n<p>我看了两分钟，给她发去了我的思路。然后学妹一眼就看懂了，立马秒过。<br><img src=\"1.jpg\" alt></p> \n<p>那么这道题到底是怎么做的呢？</p> \n<p>题目要求将$n$个数切分成$k$块，求每块的序号乘上该块内数字之和的最大值。</p> \n<p>那么首先我们可以用$S_i$来表示前缀和，也就是$S_i = \\sum_{j &lt; i}{a_j}$。</p> \n<p>然后假设$k$个子序列中，第$i$个子序列的末尾元素为$a_{d_i}$，其中$1 \\le i \\le k$。那么第$i$个子序列的元素和就可以用前缀和来表示为$S_{d_i} - S_{d_{i-1}}$。</p> \n<p>然后题目要求的最大值就可以表示为：<br>$$<br>\\sum_{1 \\le i \\le k}{i \\cdot (S_{d_i} - S_{d_{i-1}})}<br>$$</p> \n<p>展开并化简就可以得到：<br>$$<br>-\\sum_{0 \\le i \\le k-1}{S_{d_i}} + k \\cdot S_{d_k}<br>$$</p> \n<p>后面一项$k \\cdot S_{d_k}$就是整个数组之和的$k$倍，是一个定值。所以要求这个式子的最大值，就是求$\\sum_{0 \\le i \\le k-1}{S_{d_i}}$的最小值。</p> \n<p>又因为$S_{d_0} = 0$，所以就是求$\\sum_{1 \\le i \\le k-1}{S_{d_i}}$的最小值。</p> \n<p>可以发现，这$k-1$个前缀和其实是互不干扰的，所以只需要对所有的前缀和进行排序，取最小的$k-1$个就行了。</p> \n<p>C++代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h&gt;</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">300010</span><span class=\"token punctuation\">;</span>\n\nll a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ll res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    res <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>res <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> a<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>Python代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\">n<span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\na <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nS <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\nS<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nres <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>sum<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">*</span> sum<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-02-05 10:07:52', '7.4k', 5, 3739);
INSERT INTO `t_article` VALUES ('88eb6790a68041fb84f3aca33568e6bb', '编程算法', 15, '每日算法系列【LeetCode 354】俄罗斯套娃信封问题', 'https://picsum.photos/1920/1080?random&rand=0.4092804948558232', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一些标记了宽度和高度的信封，宽度和高度以整数对形式 (w, h) 出现。当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。</p> \n<p>请计算最多能有多少个信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。</p> \n<p><strong>说明:</strong><br>不允许旋转信封。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nenvelopes = [[5,4],[6,4],[6,7],[2,3]]\n输出：\n3\n解释：\n最多信封的个数为 3, 组合为: [2,3] =&gt; [5,4] =&gt; [6,7]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>题目要求矩形一个套着一个，然后求出最多套多少个，而一个矩形能套在另一个矩形上面的条件是长宽都大于另一个。</p> \n<p>那么我们可以按照长度从小到大排个序，这样只有排在后面的矩形可以套在前面的矩形上。但是宽度也有限制条件，也得大于前面的矩形，那么问题就转化成了，把宽度看成一个序列，找到一个最长的上升序列，序列的长度就是我们要的答案。但是这里有个问题，就是矩形如果是相同长度，它们的宽度按照什么来排序呢？如果也是从小到大排，那么可能会出现多个相同长度的矩形套在一起，这是不符合题意的。所以我们对相同长度的矩形采取宽度降序的方法排序，这样它们之中最多只会被选中一个了。</p> \n<p>那么问题就变成了经典的<strong>最长上升子序列问题了</strong>。</p> \n<h3 id=\"方法1\"><a href=\"#方法1\" class=\"headerlink\" title=\"方法1\"></a>方法1</h3>\n<p>用 dp[i] 表示以第 i 个元素 a[i] 结尾的最长子序列的长度，那么我们可以遍历所有 a[i] 之前的元素 a[j] ，如果 a[j] 小于 a[i] ，那就说明 a[i] 可以加在 a[j] 后面，然后长度就变成了 dp[j] + 1 。所以遍历所有符合条件的 j ，找到长度最长的，然后更新 dp[i] = dp[j] + 1 。最后的答案就是 dp 数组中最大的值。</p> \n<p>这种方法时间复杂度是 $O(n^2)$，如果序列太长会超时。本题中 c++ 没有超时，但是 python 超时了。</p> \n<h3 id=\"方法2\"><a href=\"#方法2\" class=\"headerlink\" title=\"方法2\"></a>方法2</h3>\n<p>那么有什么方法来优化呢？下面介绍一种二分优化方法。</p> \n<p>这次假设 dp[len] 表示长度为 len 的上升子序列最后一个元素的最小值。这个值要尽量小，什么意思呢？也就是相同长度的上升序列，最后一个元素小的那个序列，后面可以加的元素可选择余地肯定更大。那么这个数组怎么更新呢？</p> \n<p>初始的时候 len 就是 0 ，因为没有找到任何上升子序列。如果现在找到了长度为 len 的子序列，然后最后一个元素最小值是 dp[len] ，这时候来了一个新元素 a[i] ，如果它比 dp[len] 大，说明 a[i] 可以加在 dp[len] 后面，那么 len 就变成了 len + 1 ， 并且 dp[len + 1] 更新为 a[i]。那如果 a[i] 小于等于 dp[len] 呢？那就继续往前遍历，找到第一个 dp[l] &lt; a[i] &lt;= dp[l+1] 的位置，这个位置说明了什么呢？说明了 a[i] 可以加在 dp[l] 后面构成长度为 l + 1 的子序列，并且 dp[l+1] 可以变得更小，所以更新为 a[i] 。这样 a[i] 就处理完了，最后 len 就是答案。</p> \n<p>但是这样看起来复杂度没有变啊，其实这里有一个很好的性质，因为长度越大的序列，最后一个元素的最小值一定是大于长度小的序列最后一个元素的，所以 dp 数组是单调递增的，这样我们就可以用二分来寻找 a[i] 适合插入的位置。时间复杂度降到了 $O(n\\log n)$。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"方法1（c-）\"><a href=\"#方法1（c-）\" class=\"headerlink\" title=\"方法1（c++）\"></a>方法1（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxEnvelopes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> envelopes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envelopes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> envelopes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法1（python）\"><a href=\"#方法1（python）\" class=\"headerlink\" title=\"方法1（python）\"></a>方法1（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxEnvelopes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        arr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">]</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法2（c-）\"><a href=\"#方法2（c-）\" class=\"headerlink\" title=\"方法2（c++）\"></a>方法2（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxEnvelopes</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> envelopes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> envelopes<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> envelopes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> dp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dp<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> envelopes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            len <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">cmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法2（python）\"><a href=\"#方法2（python）\" class=\"headerlink\" title=\"方法2（python）\"></a>方法2（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bisect <span class=\"token keyword\">import</span> bisect_left\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxEnvelopes</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        arr<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">]</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            idx <span class=\"token operator\">=</span> bisect_left<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> idx <span class=\"token operator\">==</span> len<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                dp<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题还有智障解法：就是两两遍历每一个矩形对，根据包含关系建立一个拓扑图，然后求图上的最长距离。没错，我刚开始就是这么想的，我是智障。这个方法没有错，还真能过这题，就是时间太慢了。</p>', '2022-04-22 18:29:57', '7.9k', 4, 8279);
INSERT INTO `t_article` VALUES ('8a30254dd66a47999cc7f8acff32a69c', '编程算法', 7, '每日算法系列【LeetCode 376】摆动序列', 'https://picsum.photos/1920/1080?random&rand=0.05057279238415269', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。 例如， [1,7,4,9,2', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。</p> \n<p>例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 [6,-3,5,-7,3] 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</p> \n<p>给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,7,4,9,2,5]\n输出：\n6\n解释：\n整个序列均为摆动序列。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,17,5,10,13,15,10,5,16,8]\n输出：\n7\n解释：\n这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,4,5,6,7,8,9]\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题题面说的啰里啰唆的，其实就一句话：给你一个序列，找出最长的一个子序列，其中子序列相邻两个数的大小是波形的（也就是大小大小大等等这样的）。</p> \n<h3 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h3>\n<p>用 dfs 枚举所有可能的子序列，然后看最长的是多少，这种方法显然会超时。</p> \n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3>\n<p>其实看到这道题，我第一个想到了最长上升子序列，这不就变了个形式嘛，于是动态规划解法直接就有了。</p> \n<p>用 $dp[i][s]$ 表示以 $nums[i]$ 结尾的符合条件的最长子序列长度，其中 s 取 1 表示在 $nums[i]$ 处子序列上升，取 0 表示下降。那么我们只需要遍历之前的所有 j ，如果 $nums[j] &lt; nums[i]$ ，那么在 j 处必须是要下降的，更新：<br>$$<br>dp[i][1] = \\max_j{\\{dp[j][0]\\}}<br>$$<br>如果 $nums[j] &gt; nums[i]$ ，那么在 j 处必须是要上升的，更新：<br>$$<br>dp[i][0] = \\max_j{\\{dp[j][1]\\}}<br>$$<br>然后取数组中最大值就是答案了，时间复杂度 $O(n^2)$ 。</p> \n<h3 id=\"动态规划-时间优化\"><a href=\"#动态规划-时间优化\" class=\"headerlink\" title=\"动态规划+时间优化\"></a>动态规划+时间优化</h3>\n<p>换个定义，用 $dp[i][s]$ 表示 $nums[i]$ 之前的最长子序列，注意和上面的区别就是不一定以 $nums[i]$ 结尾了。 s 取 1 表示最后两个数是上升的，取 0 表示最后两个数是下降的。</p> \n<p>这里分为几种情况：</p> \n<ul> \n <li>$nums[i-1] &lt; nums[i]$ :\n  <ul> \n   <li>考虑 $dp[i][0]$ ，也就是最后两个数下降的，那肯定不能取 $nums[i]$ ，因为 $nums[i-1]$ 比它更小、更优，所以直接更新为 $dp[i-1][0]$ 。</li> \n   <li>考虑 $dp[i][1]$ ，也就是最后两个数上升的，那如果不取 $nums[i]$ ，那更新为 $dp[i-1][1]$ ；如果取的话，我们就要保证 i-1 之前最后两个数是下降的，并且之前的最后一个数小于 $nums[i]$ 。我们可以证明， i-1 之前的最后两个下降的数一定满足：第二个数 $nums[j]$ 是小于 $nums[i]$ 的，因为如果 $nums[j] &gt;= nums[i]$ ，那么 j 到 i 之间的数一定是单调下降的，否则存在更长的子序列，那么就和 $nums[i-1] &lt; nums[i]$ 矛盾了。综上，取的话 $dp[i][1]$ 更新为 $dp[i-1][0]+1$ 。</li> \n  </ul> </li> \n <li>$nums[i-1] &gt; nums[i]$ :<br> 同样考虑最后两个数上升还是下降，分析和上面一样。</li> \n</ul> \n<p>综上考虑，时间复杂度可以降为 $O(n)$ ，空间复杂度是 $O(n)$ 。</p> \n<h3 id=\"动态规划-空间优化\"><a href=\"#动态规划-空间优化\" class=\"headerlink\" title=\"动态规划+空间优化\"></a>动态规划+空间优化</h3>\n<p>在上面优化的基础上，我们还可以观察到，每一次 $dp[i][s]$ 其实只会用到 $dp[i-1][s]$ ，所以我们只需要保存当前和前一时刻的状态就行了，空间复杂度可以降为 $O(1)$ 。</p> \n<h3 id=\"贪心法\"><a href=\"#贪心法\" class=\"headerlink\" title=\"贪心法\"></a>贪心法</h3>\n<p>其实这题还可以直接贪心做，考虑一段连续的上升序列，最优子序列一定是包括了首尾两个数的，因为首是最小的数，选了它才能给前一个数留出更大的上升空间，而尾是最大的数，选了它才能给下一个数留出更多的下降空间。</p> \n<p>所以我们贪心的扫描一遍数组，遇到上升或者下降的转折点就选取这个数。而如果数组不升不降，也就是不变的话，就不用管它，因为这些相同的数里面只需要选取一个就行了。</p> \n<p>时间复杂度是 $O(n)$ ，空间复杂度是 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"动态规划（c-）\"><a href=\"#动态规划（c-）\" class=\"headerlink\" title=\"动态规划（c++）\"></a>动态规划（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">wiggleMaxLength</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-时间优化（c-）\"><a href=\"#动态规划-时间优化（c-）\" class=\"headerlink\" title=\"动态规划+时间优化（c++）\"></a>动态规划+时间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">wiggleMaxLength</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-空间优化（c-）\"><a href=\"#动态规划-空间优化（c-）\" class=\"headerlink\" title=\"动态规划+空间优化（c++）\"></a>动态规划+空间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">wiggleMaxLength</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"贪心（c-）\"><a href=\"#贪心（c-）\" class=\"headerlink\" title=\"贪心（c++）\"></a>贪心（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">wiggleMaxLength</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pre_ord <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> ord <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ord <span class=\"token operator\">!=</span> pre_ord<span class=\"token punctuation\">)</span> res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            pre_ord <span class=\"token operator\">=</span> ord<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>鼠年快乐，新年献给大家的第一道题，尽量写的详细一点。</p> \n<p>官方题解没有严谨的证明，虽然方法也是这 5 种，但是没有说清楚，不能令人信服。</p>', '2020-03-05 01:13:00', '2.3k', 9, 5796);
INSERT INTO `t_article` VALUES ('8a3ba566f80345d9aaabe658f1f0ddbf', '深度学习', 29, '一文看懂AutoML', 'https://picsum.photos/1920/1080?random&rand=0.9509013519904255', '论文地址：AutoML: A survey of the state-of-the-art 最近看了些NAS的论文，发现上面这篇综述写的很不错，非常全面，详细拜读了一下。有很多细节不是很懂，也没空去精读原论文，但是能够对大致的脉络有个初步', '<p><strong>论文地址：</strong><br><a href=\"https://arxiv.org/abs/1908.00709\" title=\"AutoML: A survey of the state-of-the-art\" target=\"_blank\" rel=\"noopener\">AutoML: A survey of the state-of-the-art</a></p> \n<blockquote> \n <p>最近看了些NAS的论文，发现上面这篇综述写的很不错，非常全面，详细拜读了一下。有很多细节不是很懂，也没空去精读原论文，但是能够对大致的脉络有个初步的了解。因此简单写一下这篇综述讲了些啥，第一次接触NAS，可能有理解有误，望指正批评。</p> \n</blockquote> \n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2>\n<p>首先这篇综述是讲AutoML的，不单单是NAS，但是因为NAS是AutoML中最最重要的一部分，所以主要篇章还是用来讲NAS了。据作者所说，应该是第一篇完整讲述AutoML整个流程的综述。</p> \n<p>首先，本文将AutoML划分成了如下几个流程：</p> \n<p><img src=\"1.png\" alt></p> \n<p>先是数据准备，然后是特征工程，接着是模型生成，最后就是模型评估了。其中模型生成又可以分为搜索空间和优化方法，搜索空间有传统的ML模型或者DL模型，优化方法又分为超参数优化和结构优化。NAS的话主要就涉及到DL模型的搜索空间定义、结构优化和模型评估策略这三块。</p> \n<p>因为我主要关注NAS这块，所以其他部分就只简单介绍一下，不做过多解读。</p> \n<h3 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h3>\n<p><img src=\"2.png\" alt></p> \n<p>看上面这个图应该很清楚了，数据准备主要分为数据收集、数据清洗和数据增强三个部分。</p> \n<h3 id=\"数据收集\"><a href=\"#数据收集\" class=\"headerlink\" title=\"数据收集\"></a>数据收集</h3>\n<p>有开源的就去下开源的，没开源的就去互联网上爬，要是什么都没有呢，那就通过GAN之类的技术来生成伪数据，有总比没有好嘛。</p> \n<h3 id=\"数据清洗\"><a href=\"#数据清洗\" class=\"headerlink\" title=\"数据清洗\"></a>数据清洗</h3>\n<p>就是清洗数据中的噪声、脏数据，这一过程可能需要一些知识去判断什么是噪声。还有一个研究主题就是如何清洗每天更新的源源不断的新数据。</p> \n<h3 id=\"数据增强\"><a href=\"#数据增强\" class=\"headerlink\" title=\"数据增强\"></a>数据增强</h3>\n<p><img src=\"3.png\" alt></p> \n<p>数据增强某种程度上也可以被视为数据收集的一种工具，因为效果都是一样的，增加了新数据。但是它的目的有所不同，主要是为了防止模型过拟合。上图针对不同数据有很多增强方法，这里就不介绍了。</p> \n<h2 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h2>\n<p>有句话叫：数据和特征决定了机器学习的上界，而模型和算法只是为了去近似这个上界。主要可以分成三块，特征选择、特征构建和特征提取。这里也不多介绍了，因为在DL里特征工程用得很少，DL模型可以自己从数据中学出特征，很少需要自己手动构造特征了。</p> \n<h2 id=\"模型生成\"><a href=\"#模型生成\" class=\"headerlink\" title=\"模型生成\"></a>模型生成</h2>\n<p>从这块开始进入到了NAS的领域。之前说了，搜索空间分为ML和DL两块，本文只关注DL，而优化方法又分为超参优化和网络架构优化，本文也主要只关注网络架构优化，因为超参优化是挑选出最优网络架构之后的事情了，不过也有工作将NAS用在超参优化上的，这个就不在讨论范围内了。</p> \n<p><img src=\"4.png\" alt></p> \n<p><img src=\"5.png\" alt></p> \n<p>上面两张图是NAS的一般流程：</p> \n<ul> \n <li>首先针对不同的任务定义一个搜索空间，这个搜索空间就决定了你搜出来的网络架构可能长什么样子，也决定了你搜出来的架构可能性有多少，当然是越大越好，但是带来的后果就是搜索速度太慢。 </li> \n <li>然后在这个搜索空间里进行搜索，采样出一个比较好的模型架构，这里方法就非常多了，最简单的就是随机搜索，随机采样一个网络架构。 </li> \n <li>最后就是在训练集上评估你采样出的架构效果，反馈给架构优化，让它优化，然后继续采样，循环下去。评估方法也有很多，最简单的就是像正常训练模型那样完整训练一遍，得到效果，但是这样太慢了，因此需要其他方法来加速训练或者估计效果。 </li> \n</ul> \n<h3 id=\"搜索空间\"><a href=\"#搜索空间\" class=\"headerlink\" title=\"搜索空间\"></a>搜索空间</h3>\n<p>神经网络可以看作是一个DAG，而如何定义这个DAG，其实你可以用生成图的方式做加法生成它，也可以做减法，从大图中抽取出子图等等，有很多方法。</p> \n<p>定义搜索空间需要人类知识，这一步目前还不够Auto，定义的好，生成出来的架构才可能好。而有些工作发现只要你搜索空间定义的足够好，随机搜索都能达到和各种架构优化方法相似的效果，那么NAS将变得毫无意义，所以这一块还是挺玄学的。</p> \n<h4 id=\"整体结构搜索\"><a href=\"#整体结构搜索\" class=\"headerlink\" title=\"整体结构搜索\"></a>整体结构搜索</h4>\n<p>就是按照DAG的拓扑序，依次生成出模型架构出来。一般来说，用一个RNN来生成，每生成一个node，都要预测出它的输入是哪些node（残差）、作用在它上面的op有哪些。</p> \n<p>但是这种方法太慢了，搜索的复杂度是指数级别的，因此在最初的几篇RL论文里，都用了几百个GPU训练了几十天才搜出来，穷苦人家可搜不起。</p> \n<h4 id=\"cell搜索\"><a href=\"#cell搜索\" class=\"headerlink\" title=\"cell搜索\"></a>cell搜索</h4>\n<p>这种方式也是借鉴了人类设计神经网络的经验，像ResNet系列都是将一个个cell层层堆叠得到的，因此如果只搜一个cell，然后将相同的cell堆叠起来岂不是大大减小了搜索空间。后面的很多工作都是基于cell来搜索的，比如NASNet。</p> \n<p><img src=\"6.png\" alt></p> \n<p>在NASNet中，cell被分成了两种，一种是normal cell，它的输入输出维度保持相同，另一种是reduction cell，它的结构和normal cell相似，但是输出的宽度和高度减半，通道数加倍。</p> \n<p>最后搜索出最优cell之后，根据需要堆叠不同层数的cell就行了，这个层数也是人为定义的。但是这里就会存在一个训练和评估不一致的问题，一般来说，在搜索的时候，为了减小显存占用，会堆叠比较少的层数去评估。但是在得到最优cell之后，用来retrain时会堆叠比较多的层数，这里就不一定是最优解了。也有工作做这方面的优化，比如P-DARTS，在搜索阶段逐渐增加堆叠的层数。</p> \n<p><img src=\"7.png\" alt></p> \n<h4 id=\"分层搜索\"><a href=\"#分层搜索\" class=\"headerlink\" title=\"分层搜索\"></a>分层搜索</h4>\n<p>当然搜索cell也是存在问题的，忽视了整体结构的优化，而且每一层的cell相同也不一定最好啊。因此后来的工作又提出了分层搜索的方法。</p> \n<p>比如Auto-deeplab在搜索cell的同时，还搜索了不同层的分辨率，下一层的分辨率可以是一半、不变或两倍，这一步限制一是为了减小搜索空间，二是为了增加稳定性，防止分辨率变化太大。</p> \n<p><img src=\"8.png\" alt></p> \n<p>再如HierNAS，按照层次结构来搜索网络架构，第一层是一些原子操作，第二层用这些原子操作生成一些比较小的网络，第三层用第二层的小网络再搭建出一个更大的网络，依次下去。</p> \n<p><img src=\"9.png\" alt></p> \n<p>再如progressive NAS，为了减小一个cell里面的搜索空间大小，从一个cell里面只有一个block开始搜索，每次挑出top-k个cell，在基础上衍生出两个block，依次下去。评估性能用的是代理模型直接预测，不需要真的训练一遍。</p> \n<p>再如MnasNet，它将整个网络分为了若干个cell，每个cell串行了若干个block，每个cell的block数量可能不同，而单个cell里面的block结构是相同的，这样就考虑到了整体的网络搜索空间。和堆叠cell不同的是，每个block的结构比较简单，不然的话整体上搜索复杂度还是太大了。当然这篇主要还是为了做移动端部署，因此做了多目标NAS，将延时也考虑到了目标函数中去。</p> \n<p><img src=\"10.png\" alt></p> \n<p>之前的方法还存在一个问题，就是基本都是在小数据集上做的搜索评估，最后将最优结构运用到大数据集上，这就存在不一致性。因此例如ProxylessNAS就直接在大数据集上搜索评估，为了减小显存消耗，采用BinaryConnect，每次只激活两个结点之间的一条边。</p> \n<h4 id=\"网络态射\"><a href=\"#网络态射\" class=\"headerlink\" title=\"网络态射\"></a>网络态射</h4>\n<p>这类方法主要思想就是在已经训练好的成熟网络基础上增加宽度、深度等等，继承父网络的参数，加速子网络的训练。</p> \n<p>首先是Net2Net，扩展分为两个方向，一种是宽度上的，一种是深度上的，不能同时进行。</p> \n<p><img src=\"11.png\" alt></p> \n<p>因此后来就有了网络态射，可以处理任意线性层和非线性层，并且深度和宽度上可以同时扩展。</p> \n<h3 id=\"架构优化\"><a href=\"#架构优化\" class=\"headerlink\" title=\"架构优化\"></a>架构优化</h3>\n<p>定义好搜索空间后，就要采用架构优化算法来搜索出最优的架构了。</p> \n<h4 id=\"演化算法\"><a href=\"#演化算法\" class=\"headerlink\" title=\"演化算法\"></a>演化算法</h4>\n<p><img src=\"12.png\" alt></p> \n<p>演化算法就是模仿的生物进化过程。首先要对网络架构进行编码，方便之后的操作。可以将图结构编码为二进制串，但是这样固定长度不灵活。于是就有了Cartesian genetic programming、Neuro evolution of augmenting topologies、Cellular encoding等各种编码方法，详细就不介绍了。</p> \n<p>一般演化算法分为四步：选择、交叉、变异、替换。</p> \n<ul> \n <li>选择。就是从候选的网络架构中挑选出适应度最高的，一种可以直接挑绝对值最高的，另一种可以挑相对值最高的，第三种比较有名的是锦标赛选择算法，也就是放回抽样，每次等概率随机选k个，挑出最好的那一个，进入下一代，其余放回，重复上述操作。 </li> \n <li>交叉。交叉方式和编码方式有很大关系， </li> \n <li>变异。上面两步做完后，有很多方式可以对个体进行变异，比如随机翻转某一位，随机增加或者删除两层之间的连接等等。 </li> \n <li>替换。新的个体加入种群后，旧的个体要被删除掉。可以删除最久之前的，也可以删除效果最差的，也有工作一个都不删除，只要你内存和时间顶得住。 </li> \n</ul> \n<h4 id=\"强化学习\"><a href=\"#强化学习\" class=\"headerlink\" title=\"强化学习\"></a>强化学习</h4>\n<p><img src=\"13.png\" alt></p> \n<p>强化学习主要思想就是用一个控制器（一般是RNN）来生成网络架构，然后评估得到得分作为反馈更新控制器参数。有用策略梯度的，也有用Q-learning的，还有用PPO算法的等等。第一篇NAS论文就是用的RL，但是这一类方法普遍很费卡，一般人玩不起。</p> \n<h4 id=\"梯度下降\"><a href=\"#梯度下降\" class=\"headerlink\" title=\"梯度下降\"></a>梯度下降</h4>\n<p><img src=\"14.png\" alt></p> \n<p>前两种都是在离散空间搜结构，梯度下降方法是将离散空间变为了连续空间。第一个提出的是DARTS，在两个结点之间定义了若干种操作，然后做softmax，最后在评估的时候取argmax。</p> \n<p>这种方法也有不好，比如成倍增加了显存，本来一条边现在需要成倍的计算量，此外用了代理任务，在小数据集上训的层数比较少，迁移到大数据集上层数又很多。也有解决方法，比如P-DARTS，随着训练进行逐渐加层数，为了减小计算量，还逐渐减少了每条边上的操作数。而GDAS每次只选概率最大的那个操作边做前向，反向传播用gumbel softmax。</p> \n<p>两套参数联合优化也是很困难的，DARTS用的是交替优化，一次优化结构参数，一次优化模型权重。</p> \n<p>最后还有个问题，就是搜索后期会倾向于搜索残差连接之类的操作，这不好。于是DARTS+发现一个cell里出现两个或以上残差连接后就直接停止。P-DARTS则是给残差加了正则化，减小出现的次数。</p> \n<h4 id=\"代理模型\"><a href=\"#代理模型\" class=\"headerlink\" title=\"代理模型\"></a>代理模型</h4>\n<p>这一类方法（SMBO）使用一个代理模型来指导最优模型的生成。传统的方法有贝叶斯优化（高斯过程、随机森林、TPE等等），就不详细介绍传统方法了。</p> \n<p>也有用神经网络当作代理模型的，比如PNAS、EPNAS、NAO都用一个LSTM或者MLP将离散的结构编码成连续的表示，然后预测性能，接着找出性能最高的最优表示，用解码器还原出离散的结构。</p> \n<h4 id=\"网格和随机搜索\"><a href=\"#网格和随机搜索\" class=\"headerlink\" title=\"网格和随机搜索\"></a>网格和随机搜索</h4>\n<p>这就是最原始最普通的优化方法，比如直接在搜索空间随机搜索结构，然后评估，最后取最优的就行了。虽说随机搜索听起来不大行，但实际出来的效果，能和大多数NAS方法达到相似效果，还很简单。</p> \n<h4 id=\"混合优化方法\"><a href=\"#混合优化方法\" class=\"headerlink\" title=\"混合优化方法\"></a>混合优化方法</h4>\n<p>上面这么多方法混合在一起，可能效果会更好。演化算法是全局优化的，鲁棒性很强，但是随机性有点大，不稳定，计算消耗也大。强化学习也是的，训练很不稳定。梯度下降方法训练快，但是需要提前定义好超网络结构，限制了结构的多样性。</p> \n<p>演化算法可以结合强化学习、梯度下降、SMBO，梯度下降也可以结合SMBO等等，这里就不详细介绍了，典型的例子有Evo-NAS、NAO等等。</p> \n<h3 id=\"超参优化\"><a href=\"#超参优化\" class=\"headerlink\" title=\"超参优化\"></a>超参优化</h3>\n<p>这一步其实是脱离了NAS的，就和一般的超参优化一样，网络搜索、随机搜索、贝叶斯优化、梯度优化等等方法，这里不做过多介绍了。</p> \n<h2 id=\"模型评估\"><a href=\"#模型评估\" class=\"headerlink\" title=\"模型评估\"></a>模型评估</h2>\n<p>在模型生成之后，需要对模型进行评估，然后指导架构优化模块生成更好的架构。最一般的方法就是从头开始训练到收敛，但是这样太慢了，一般都要生成个几百万以上的架构的，训练时间太久了。</p> \n<h3 id=\"低保真度\"><a href=\"#低保真度\" class=\"headerlink\" title=\"低保真度\"></a>低保真度</h3>\n<p>可以在评估时降低数据集的分辨率，降低cell堆叠的层数，使用小数据集等等，这样可以快速得到架构的大致效果，但是最后得到的架构可能在目标数据集上不是全局最优的。</p> \n<h3 id=\"权重共享\"><a href=\"#权重共享\" class=\"headerlink\" title=\"权重共享\"></a>权重共享</h3>\n<p>比如ENAS，可以在多次评估模型性能时，继承之前相同node的参数，可以加快收敛速度。网络态射也是用到了权重共享。</p> \n<h3 id=\"代理模型-1\"><a href=\"#代理模型-1\" class=\"headerlink\" title=\"代理模型\"></a>代理模型</h3>\n<p>直接学习一个预测器，输入是网络架构，输出是它的性能，当然这需要提前先训练一些模型，得到（架构，性能）的若干数据，然后才能学习出这个预测器，PNAS就是这么干的。当然预测器的学习数据肯定不会多，所以SemiNAS就用半监督的方法，利用大量无标注的结构去预测出性能，加入到训练集中继续优化预测器。</p> \n<h3 id=\"early-stop\"><a href=\"#early-stop\" class=\"headerlink\" title=\"early stop\"></a>early stop</h3>\n<p>可以只训练几轮，然后根据前期的学习曲线预测出最终的性能。</p> \n<h2 id=\"一些讨论\"><a href=\"#一些讨论\" class=\"headerlink\" title=\"一些讨论\"></a>一些讨论</h2>\n<h3 id=\"效果对比\"><a href=\"#效果对比\" class=\"headerlink\" title=\"效果对比\"></a>效果对比</h3>\n<p><img src=\"15.png\" alt><br><img src=\"16.png\" alt></p> \n<p>可以看出，演化算法和强化学习搜索时间都非常长，除了个别几个用了权重共享之类技巧的。梯度下降方法全部都挺快的，但是整体效果都不如其他几类方法。</p> \n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3>\n<p>从整体流程上来看，NAS方法还可以分为一阶段和两阶段。两阶段是一般做法，第一个阶段就是搜索评估阶段，选出最好的架构，第二个阶段就是retrain这个最优架构，在验证集上评估。而一阶段就是只需要训练一次超网络，联合优化架构参数和模型权重，之后不需要再retrain了。比如比较有名的Once-for-all，采用了progressive shrinking算法来使得子网络之间的性能相互不受到影响。</p> \n<p>NAS还可以分为one-shot和non-one-shot，one-shot意思就是搜索空间重合的，可以重复利用之前的参数，比如ENAS、网络态射、ProxylessNAS等都是的。</p> \n<p>大多数NAS都只是把最终的效果当作目标，其实在移动端部署上还要考虑延时、模型大小、计算量等目标，一般都是解帕累托最优，比如MnasNet考虑到了延时。</p> \n<h2 id=\"开放性问题\"><a href=\"#开放性问题\" class=\"headerlink\" title=\"开放性问题\"></a>开放性问题</h2>\n<h3 id=\"搜索空间的灵活性\"><a href=\"#搜索空间的灵活性\" class=\"headerlink\" title=\"搜索空间的灵活性\"></a>搜索空间的灵活性</h3>\n<p>现在的搜索空间基本都还是人为定义的，参考了很多人类设计神经网络的经验，比如原子操作定义成conv、pooling之类的，结构上cell堆叠等等，但是真正的auto应该是模型自动设计网络架构和原子操作，比如AutoML-Zero就用最基本的原子操作（sin、cos、mean、std等）设计出了两层的神经网络。这一块应该是今后的一大方向，例如目前工作主要在CV上，而对于NLP的Transformer模型，搜索空间如何定义的很好？目前工作还寥寥无几，看了几篇也都是堆叠conv，分支结构之类的。</p> \n<h3 id=\"探索更多的领域\"><a href=\"#探索更多的领域\" class=\"headerlink\" title=\"探索更多的领域\"></a>探索更多的领域</h3>\n<p>如上所说，目前大多数工作都是在CV上，搜的是conv结构，而像NLP、语音等领域探索甚少，像多目标领域也只有很少的工作（韩松老师组工作很多），即使是在CV，任务也大多数局限在CIFAR-10和ImageNet上。</p> \n<h3 id=\"可解释性\"><a href=\"#可解释性\" class=\"headerlink\" title=\"可解释性\"></a>可解释性</h3>\n<p>搜出来的网络为什么好？现在人类设计的网络大多数都能强行解释一下好处，即使它仍然是个黑盒。但是NAS搜出来的基本看不出设计的逻辑。</p> \n<h3 id=\"可复现\"><a href=\"#可复现\" class=\"headerlink\" title=\"可复现\"></a>可复现</h3>\n<p>之前也说了，例如演化算法和强化学习这一类方法训练很不稳定，很难复现出结果。很多论文也都只是公开了最好的模型，都不放出源码的（当然我并没有质疑他们），超参数之类的也有些没有公布，这导致我们平民玩家没法复现，没法用啊。而且大家评测的环境都不相同，众说纷纭，没法公平比较，因此也有一些工作提出了NAS统一的数据集来评测。</p> \n<h3 id=\"鲁棒性\"><a href=\"#鲁棒性\" class=\"headerlink\" title=\"鲁棒性\"></a>鲁棒性</h3>\n<p>如果目标领域数据添加了噪声，可能会对搜出来的模型产生很大影响。所以如何搜出更加鲁棒、能适应不同领域或者有噪声数据的结构可能是未来的一个研究方向。</p> \n<h3 id=\"联合超参优化和架构优化\"><a href=\"#联合超参优化和架构优化\" class=\"headerlink\" title=\"联合超参优化和架构优化\"></a>联合超参优化和架构优化</h3>\n<p>目前大多数NAS方法都是先搜出最优架构，再调整超参在目标领域上retrain，如何同时学好这两块也是一个方向。</p> \n<h3 id=\"完全的AutoML的pipeline\"><a href=\"#完全的AutoML的pipeline\" class=\"headerlink\" title=\"完全的AutoML的pipeline\"></a>完全的AutoML的pipeline</h3>\n<p>做到从数据收集开始一直到最后的模型生成训练全部流程化，不需要人为参与，那样才是真正的智能。目前的话有一些比较好的开源工具了，AutoKeras、NNI等等。</p> \n<h3 id=\"终身学习\"><a href=\"#终身学习\" class=\"headerlink\" title=\"终身学习\"></a>终身学习</h3>\n<p>当新的数据源源不断进来时，当只有少量有标签数据或者有大量无标签数据时，如何做NAS，有几个不错的工作，比如UnNAS是做无监督NAS的，MetaNAS是结合meta-learning的。</p> \n<h2 id=\"经典论文简析\"><a href=\"#经典论文简析\" class=\"headerlink\" title=\"经典论文简析\"></a>经典论文简析</h2>\n<h3 id=\"（NAS）-ICLR-17-Neural-Architecture-Search-with-Reinforcement-Learning\"><a href=\"#（NAS）-ICLR-17-Neural-Architecture-Search-with-Reinforcement-Learning\" class=\"headerlink\" title=\"（NAS）[ICLR 17] Neural Architecture Search with Reinforcement Learning\"></a>（NAS）[ICLR 17] Neural Architecture Search with Reinforcement Learning</h3>\n<p><strong>动机</strong><br>用强化学习来采样网络，生成出最优网络结构，避免人工设计。</p> \n<p><strong>方法</strong><br>用RNN来预测CNN或者RNN的结构，采样结构，下游任务效果作为强化学习得分，策略梯度更新参数。</p> \n<p>CNN预定义好层数，LSTM每5层预测CNN一层的5个参数。</p> \n<p><img src=\"17.png\" alt></p> \n<p>RNN预定义好cell的计算拓扑图，LSTM预测每个node的计算逻辑。</p> \n<p><img src=\"18.png\" alt></p> \n<p><strong>实验</strong><br><img src=\"19.png\" alt></p> \n<p>接近人类设计网络的最好水平。速度超慢，800 K40，28天，只适用于小数据集例如CIFAR-10。</p> \n<p><strong>评价</strong><br>强化学习应用到NAS的第一篇论文。</p> \n<h3 id=\"（NASNet）-CVPR-18-Learning-Transferable-Architectures-for-Scalable-Image-Recognition\"><a href=\"#（NASNet）-CVPR-18-Learning-Transferable-Architectures-for-Scalable-Image-Recognition\" class=\"headerlink\" title=\"（NASNet）[CVPR 18] Learning Transferable Architectures for Scalable Image Recognition\"></a>（NASNet）[CVPR 18] Learning Transferable Architectures for Scalable Image Recognition</h3>\n<p><strong>动机</strong><br>RL直接搜太慢了，只能用在小数据集，ImageNet之类的大数据集没法用。</p> \n<p><strong>方法</strong><br>提出了NASNet，用堆叠相同cell的方式减小搜索空间。在CIFAR-10上面学习cell结构，通过增加堆叠层数的方式迁移到ImageNet上去。用PPO替代策略梯度。</p> \n<p><img src=\"20.png\" alt></p> \n<p>选择之前的两个node，分别预测对应op，然后预测合并op。</p> \n<p><img src=\"21.png\" alt></p> \n<p><strong>实验</strong><br><img src=\"22.png\" alt><br><img src=\"23.png\" alt></p> \n<p>效果和参数量都好于前作，达到了SOTA水平。速度加快很多，500 P100，4天，相比于前作加速7倍。</p> \n<p><strong>评价</strong><br>NASNet，通过cell堆叠加快了结构搜索的速度，同时效果达到了SOTA，并且容易迁移到其他任务上去。</p> \n<h3 id=\"（ENAS）-ICML-18-Efficient-Neural-Architecture-Search-via-Parameter-Sharing\"><a href=\"#（ENAS）-ICML-18-Efficient-Neural-Architecture-Search-via-Parameter-Sharing\" class=\"headerlink\" title=\"（ENAS）[ICML 18] Efficient Neural Architecture Search via Parameter Sharing\"></a>（ENAS）[ICML 18] Efficient Neural Architecture Search via Parameter Sharing</h3>\n<p><strong>动机</strong><br>之前的方法采样出一个结构，在dev上得到acc，然后就会抛弃权重，重新采样训练，非常耗时。</p> \n<p><strong>方法</strong><br>定义一个超图，每次搜出的子图共享权重。</p> \n<p>对于RNN cell，LSTM的每两个step预测之前某个node作为输入，再预测op，最后出度0的node拼接作为输出。</p> \n<p><img src=\"24.png\" alt></p> \n<p>对于CNN，一种策略是直接生成整个网络，每个node先预测之前哪些作为输入，然后预测op。</p> \n<p><img src=\"25.png\" alt></p> \n<p>另一种策略和NASNet类似，堆叠cell，搜索空间缩小到一个cell。</p> \n<p><strong>实验</strong><br><img src=\"26.png\" alt></p> \n<p>优于NAS和NASNet，1 1080Ti，16小时，相比NAS加速1000倍。</p> \n<p><strong>评价</strong><br>训练速度很快，AutoKeras背后就采用了ENAS。</p> \n<h3 id=\"（DARTS）-ICLR-19-DARTS-Differentiable-Architecture-Search\"><a href=\"#（DARTS）-ICLR-19-DARTS-Differentiable-Architecture-Search\" class=\"headerlink\" title=\"（DARTS）[ICLR 19] DARTS: Differentiable Architecture Search\"></a>（DARTS）[ICLR 19] DARTS: Differentiable Architecture Search</h3>\n<p><strong>动机</strong><br>离散结构搜索太慢了，采样+验证+反馈的循环很耗时。</p> \n<p><strong>方法</strong><br>连续域结构搜索代替离散域结构搜索，用微分来优化结构。</p> \n<p>两套参数：模型参数$w$（训练集优化）、结构参数$\\alpha$（验证集优化）。</p> \n<p>交替优化两套参数，softmax+relax学习最终结构。</p> \n<p><img src=\"27.png\" alt></p> \n<p><strong>实验</strong><br><img src=\"28.png\" alt></p> \n<p>效果达到或接近了SOTA，速度上比ENAS慢，比其他的方法快。</p> \n<p><strong>评价</strong><br>第一个用可微分方法做NAS的，第一个连续空间搜索代替离散空间搜索。</p> \n<h3 id=\"ICLR-19-Rethinking-the-Value-of-Network-Pruning\"><a href=\"#ICLR-19-Rethinking-the-Value-of-Network-Pruning\" class=\"headerlink\" title=\"[ICLR 19] Rethinking the Value of Network Pruning\"></a>[ICLR 19] Rethinking the Value of Network Pruning</h3>\n<p><strong>动机</strong><br>现有的剪枝方法存在问题，很多操作不合理，没有必要。</p> \n<p><strong>方法</strong><br>传统剪枝方法基于两个假设：</p> \n<ul> \n <li>过参数化很重要，训练大模型再剪枝优于直接训练剪枝后的模型。 </li> \n <li>继承大模型参数，再finetune很重要，优于随机初始化剪枝后模型再重新训练。 </li> \n</ul> \n<p>本文认为都不一定对：</p> \n<ul> \n <li>对于预定义好的模型，直接训练可以达到和训练-剪枝-finetune相同甚至更好的效果。 </li> \n <li>大模型剪枝后，随机初始化重新训练，效果和继承参数finetune差不多。</li> \n</ul> \n<p>所以本文认为剪枝后的结构重要，而参数不是那么重要。</p> \n<p><strong>实验</strong><br><img src=\"29.png\" alt></p> \n<p>一系列实验结果验证了猜想，此外本文还否定了彩票假设，认为剪枝后随机初始化即可，没必要和原始初始化相同。</p> \n<p><strong>评价</strong><br>仍然有一些局限性，比如数据分布均衡、模型比较大，估计在其他设置下不一定work。而且不如finetune速度快。</p> \n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2>\n<h3 id=\"不错的综述或讨论\"><a href=\"#不错的综述或讨论\" class=\"headerlink\" title=\"不错的综述或讨论\"></a>不错的综述或讨论</h3>\n<p><a href=\"https://lilianweng.github.io/lil-log/2020/08/06/neural-architecture-search.html\" target=\"_blank\" rel=\"noopener\">https://lilianweng.github.io/lil-log/2020/08/06/neural-architecture-search.html</a><br><a href=\"https://jinzhuojun.blog.csdn.net/article/details/84698471\" target=\"_blank\" rel=\"noopener\">https://jinzhuojun.blog.csdn.net/article/details/84698471</a><br><a href=\"http://www.tensorinfinity.com/paper_136.html\" target=\"_blank\" rel=\"noopener\">http://www.tensorinfinity.com/paper_136.html</a><br><a href=\"https://zhuanlan.zhihu.com/p/73785074\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/73785074</a><br><a href=\"https://www.zhihu.com/question/359162202\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/359162202</a><br><a href=\"https://github.com/pzhren/Awesome-NAS\" target=\"_blank\" rel=\"noopener\">https://github.com/pzhren/Awesome-NAS</a><br>Neural Architecture Search: A Survey<br>A Comprehensive Survey of Neural Architecture Search: Challenges and Solutions<br>AutoML: A Survey of the State-of-the-Art<br>A Comprehensive Survey of Neural Architecture Search: Challenges and Solutions</p> \n<h3 id=\"一些经典论文\"><a href=\"#一些经典论文\" class=\"headerlink\" title=\"一些经典论文\"></a>一些经典论文</h3>\n<p>Neural Architecture Search with Reinforcement Learning<br>Designing Neural Network Architectures using Reinforcement Learning<br>Efficient Neural Architecture Search via Parameter Sharing<br>Learning Transferable Architectures for Scalable Image Recognition<br>DARTS: Differentiable Architecture Search<br>Neural Architecture Optimization<br>FP-NAS: Fast Probabilistic Neural Architecture Search<br>SNAS: Stochastic Neural Architecture Search<br>EfficientNet: Rethinking Model Scaling for Convolutional Neural Networks<br>Once for All: Train One Network and Specialize it for Efficient Deployment<br>Rethinking the Value of Network Pruning<br>TextNAS: A Neural Architecture Search Space Tailored for Text Representation<br>The Evolved Transformer<br>HAT: Hardware-Aware Transformers for Efficient Natural Language Processing<br>Searching Better Architectures for Neural Machine Translation</p> \n<h3 id=\"一些经典源码或工具\"><a href=\"#一些经典源码或工具\" class=\"headerlink\" title=\"一些经典源码或工具\"></a>一些经典源码或工具</h3>\n<p><a href=\"https://github.com/quark0/darts\" target=\"_blank\" rel=\"noopener\">https://github.com/quark0/darts</a><br><a href=\"https://github.com/melodyguan/enas\" target=\"_blank\" rel=\"noopener\">https://github.com/melodyguan/enas</a><br><a href=\"https://github.com/mit-han-lab/once-for-all\" target=\"_blank\" rel=\"noopener\">https://github.com/mit-han-lab/once-for-all</a><br><a href=\"https://github.com/mit-han-lab/hardware-aware-transformers\" target=\"_blank\" rel=\"noopener\">https://github.com/mit-han-lab/hardware-aware-transformers</a><br><a href=\"https://github.com/microsoft/nni\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoft/nni</a><br><a href=\"https://github.com/IntelLabs/distiller\" target=\"_blank\" rel=\"noopener\">https://github.com/IntelLabs/distiller</a><br><a href=\"https://autokeras.com/\" target=\"_blank\" rel=\"noopener\">https://autokeras.com/</a></p>', '2022-04-22 15:05:45', '1.7k', 2, 6282);
INSERT INTO `t_article` VALUES ('8d16362b73044e6883c61ed432e0775a', '编程算法', 7, '每日算法系列【LeetCode 714】买卖股票的最佳时机含手续费', 'https://picsum.photos/1920/1080?random&rand=0.7030415393993513', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。 你可以无限次地完成交易，但是你每次交易都需要付手续', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。</p> \n<p>你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p> \n<p>返回获得利润的最大值。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nprices = [1, 3, 2, 8, 4, 9], fee = 2\n输出：\n8\n解释：\n能够达到的最大利润:  \n在此处买入 prices[0] = 1\n在此处卖出 prices[3] = 8\n在此处买入 prices[4] = 4\n在此处卖出 prices[5] = 9\n总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>0 &lt; prices.length &lt;= 50000.</li> \n <li>0 &lt; prices[i] &lt; 50000.</li> \n <li>0 &lt;= fee &lt; 50000.</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第五题。</p> \n<p>这题其实就是在系列题目第二题基础上加了个手续费，也就是无限次买卖股票，但是每次卖的时候都得交一笔手续费。</p> \n<p>这时候就不能和第二题一样，每次连续上升子区间都买卖一次了，因为如果买卖一次都不够交手续费的话，就不能进行买卖。或者一段连续下降子区间的差值小于手续费，那么就得把这段下降子区间也包含进去，前后只卖买一次。</p> \n<p>所以我们换个思路，还是沿用第四题的动态规划思路。令 $dp0[i]$ 为第 $i$ 只股票之前（包含）买卖（最后一次操作是买）可以获得的最大利润， $dp1[i]$ 为第 $i$ 只股票之前（包含）买卖（最后一次操作是卖）可以获得的最大利润。那么类似的有如下转移方程：<br>$$<br>\\begin{aligned}<br>dp0[i] &amp;= \\max{\\left\\{dp0[i-1], dp1[i-1] - price[i]\\right\\}} \\\\<br>dp1[i] &amp;= \\max{\\left\\{dp1[i-1], dp0[i-1] + price[i] - fee\\right\\}}<br>\\end{aligned}<br>$$</p> \n<p>初始情况就是 $dp0[0] = -price[0]$ 和 $dp1[0] = 0$ 。</p> \n<p>此外这里还可以优化去掉一个维度，因为每个时刻状态只与前一个时刻有关。</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        dp0<span class=\"token punctuation\">,</span> dp1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            dp1 <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">,</span> dp0<span class=\"token operator\">+</span>p<span class=\"token operator\">-</span>fee<span class=\"token punctuation\">)</span>\n            dp0 <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">,</span> dp1<span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dp1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-08-21 14:24:40', '7.9k', 10, 9318);
INSERT INTO `t_article` VALUES ('8d8d694190244326b155ee5f0674e43d', '编程算法', 9, '每日算法系列【LeetCode 122】买卖股票的最佳时机 II', 'https://picsum.photos/1920/1080?random&rand=0.15604628708455703', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意：你不能同时参', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。</p> \n<p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[7,1,5,3,6,4]\n输出：\n7\n解释：\n在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,4,5]\n输出：\n4\n解释：\n在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。\n注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。\n因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第二题。</p> \n<p>这题买卖次数变成了不限，但是仍然要求在买之前必须先卖掉股票。那么观察股票的价格曲线，最优策略就是在每一段单调上升的子区间里，区间开始时购买，区间结束时卖出。这样就能保证所有的上升区间全部充分利用到了。正确性证明也不难，假设买卖过程中包含了一段下降的子区间，那么去掉它，在下降区间开头卖出，在下降区间末尾买入，得到的利润一定大于包含这段下降区间。</p> \n<p>在具体实现时，我们可以计算相邻两个股票价格差，如果价格是上升的，那就在利润上加上它，否则就不用管。</p> \n<p>最终的答案就是：<br>$$<br>\\sum_{0 &lt; i &lt; n}{\\max{\\left\\{price[i] - price[i-1], 0\\right\\}}}<br>$$</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> max<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-04-05 19:09:49', '9.0k', 3, 5264);
INSERT INTO `t_article` VALUES ('8e3e3efffe4f4e8190ed764ebf74d97c', '编程算法', 21, '一个函数解决【LeetCode 买卖股票的最佳时机】系列所有题目！', 'https://picsum.photos/1920/1080?random&rand=0.423366872934994', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目和题解汇总之前介绍了【LeetCode 买卖股票的最佳时机】系列一共六道题目，这里把之前的题解还有题目链接汇总一下，方便大家查找。 第一题LeetCode 121. 买卖股票的最佳', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目和题解汇总\"><a href=\"#题目和题解汇总\" class=\"headerlink\" title=\"题目和题解汇总\"></a>题目和题解汇总</h2>\n<p>之前介绍了【LeetCode 买卖股票的最佳时机】系列一共六道题目，这里把之前的题解还有题目链接汇总一下，方便大家查找。</p> \n<h3 id=\"第一题\"><a href=\"#第一题\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/\" title=\"LeetCode 121. 买卖股票的最佳时机\" target=\"_blank\" rel=\"noopener\">LeetCode 121. 买卖股票的最佳时机</a><br><a href=\"https://zhuanlan.zhihu.com/p/108895299\" title=\"每日算法系列【LeetCode 121】买卖股票的最佳时机\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 121】买卖股票的最佳时机</a></p> \n<h3 id=\"第二题\"><a href=\"#第二题\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/\" title=\"LeetCode 122. 买卖股票的最佳时机 II\" target=\"_blank\" rel=\"noopener\">LeetCode 122. 买卖股票的最佳时机 II</a><br><a href=\"https://zhuanlan.zhihu.com/p/108902700\" title=\"每日算法系列【LeetCode 122】买卖股票的最佳时机 II\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 122】买卖股票的最佳时机 II</a></p> \n<h3 id=\"第三题\"><a href=\"#第三题\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/\" title=\"LeetCode 123. 买卖股票的最佳时机 III\" target=\"_blank\" rel=\"noopener\">LeetCode 123. 买卖股票的最佳时机 III</a><br><a href=\"https://zhuanlan.zhihu.com/p/108908636\" title=\"每日算法系列【LeetCode 123】买卖股票的最佳时机 III\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 123】买卖股票的最佳时机 III</a></p> \n<h3 id=\"第四题\"><a href=\"#第四题\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/\" title=\"LeetCode 188. 买卖股票的最佳时机 IV\" target=\"_blank\" rel=\"noopener\">LeetCode 188. 买卖股票的最佳时机 IV</a><br><a href=\"https://zhuanlan.zhihu.com/p/108925381\" title=\"每日算法系列【LeetCode 188】买卖股票的最佳时机 IV\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 188】买卖股票的最佳时机 IV</a></p> \n<h3 id=\"第五题\"><a href=\"#第五题\" class=\"headerlink\" title=\"第五题\"></a>第五题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\" title=\"LeetCode 714. 买卖股票的最佳时机含手续费\" target=\"_blank\" rel=\"noopener\">LeetCode 714. 买卖股票的最佳时机含手续费</a><br><a href=\"https://zhuanlan.zhihu.com/p/108930022\" title=\"每日算法系列【LeetCode 714】买卖股票的最佳时机含手续费\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 714】买卖股票的最佳时机含手续费</a></p> \n<h3 id=\"第六题\"><a href=\"#第六题\" class=\"headerlink\" title=\"第六题\"></a>第六题</h3>\n<p><a href=\"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\" title=\"LeetCode 309. 买卖股票的最佳时机\" target=\"_blank\" rel=\"noopener\">LeetCode 309. 最佳买卖股票时机含冷冻期</a><br><a href=\"https://zhuanlan.zhihu.com/p/108931927\" title=\"每日算法系列【LeetCode 309】最佳买卖股票时机含冷冻期\" target=\"_blank\" rel=\"noopener\">每日算法系列【LeetCode 309】最佳买卖股票时机含冷冻期</a></p> \n<h2 id=\"通用解法\"><a href=\"#通用解法\" class=\"headerlink\" title=\"通用解法\"></a>通用解法</h2>\n<p>上面六道题目中，前四题限制了买卖的次数，第五题加入了手续费，第六题加入了冻结时间。所以我们提出一般性的问题：</p> \n<p><strong>给定每天的价格 $prices$，最大买卖次数 $k$，手续费 $fee$，冻结时间 $freeze$，求最大利润。</strong></p> \n<p>观察前面六题的代码，我们可以在第四题基础上进行修改，这样代码量比较小。</p> \n<p>首先是增加手续费，这个很简单，只需要在 $dp1$ 更新时减去一个手续费 $fee$ 就行了。</p> \n<p>有点麻烦的是冻结时间。在第六题代码中，增加了一个维度用来保存每一只股票之前（包含）的最大利润，目的是为了获取相隔一个冻结时间之前的股票以前可以获得的最大利润。但是通用情况下不能这么保存，不然的话空间复杂度就变成了 $O(nk)$ ，极限情况下会爆掉。</p> \n<p>解决方法就是，因为对于第 $i$ 只股票来说，只需要访问它与 $dp1[i-freeze-1]$ 之间的数值，那么我们只需要保存 $freeze + 1$ 大小的数组就行了。在访问的时候，采用取模的方法，来让数组滚动起来。</p> \n<p>还有一些细节，比如如果 $k \\ge n / 2$，那么问题就退化为了没有买卖次数限制，也就是第五题和第六题的情况。如果不这样处理的话，按照上面方法做，时间复杂度和空间复杂度都是 $O(nk)$ ，可能会吃不消。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"通用函数\"><a href=\"#通用函数\" class=\"headerlink\" title=\"通用函数\"></a>通用函数</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">solve</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> k <span class=\"token operator\">&gt;=</span> n<span class=\"token operator\">//</span><span class=\"token number\">2</span> <span class=\"token keyword\">else</span> <span class=\"token number\">1</span>\n        k <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> k <span class=\"token operator\">&gt;=</span> n<span class=\"token operator\">//</span><span class=\"token number\">2</span> <span class=\"token keyword\">else</span> k\n        dp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        dp1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>freeze<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                dp0<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp0<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>freeze<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span> <span class=\"token keyword\">if</span> limit <span class=\"token keyword\">else</span> j<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                dp1<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>freeze<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>freeze<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp0<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>fee<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">(</span>dp1<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>freeze<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第一题-1\"><a href=\"#第一题-1\" class=\"headerlink\" title=\"第一题\"></a>第一题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第二题-1\"><a href=\"#第二题-1\" class=\"headerlink\" title=\"第二题\"></a>第二题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第三题-1\"><a href=\"#第三题-1\" class=\"headerlink\" title=\"第三题\"></a>第三题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第四题-1\"><a href=\"#第四题-1\" class=\"headerlink\" title=\"第四题\"></a>第四题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第五题-1\"><a href=\"#第五题-1\" class=\"headerlink\" title=\"第五题\"></a>第五题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fee<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"第六题-1\"><a href=\"#第六题-1\" class=\"headerlink\" title=\"第六题\"></a>第六题</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>solve<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span>len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fee<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> freeze<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>', '2022-04-22 01:35:44', '4.8k', 2, 2207);
INSERT INTO `t_article` VALUES ('8ee4d7cb116846c795b071323d12e9e3', '随笔', 9, '心有所鼠，鼠年快乐~', 'https://picsum.photos/1920/1080?random&rand=0.45688809204959346', '关注公众号【算法码上来】，每日算法干货马上就来！ 首先，新的一年祝大家鼠年快乐啦。不要问我心有所鼠到底是什么意思，我心里只有学习~ 虽然这个年发生了很多事情，可能不是很好过，但是我相信一切都会过去的。我们应该微笑着面对困难，奥里给~', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<blockquote> \n <p>首先，新的一年祝大家鼠年快乐啦。不要问我心有所鼠到底是什么意思，我心里只有学习~ 虽然这个年发生了很多事情，可能不是很好过，但是我相信一切都会过去的。我们应该微笑着面对困难，奥里给~</p> \n</blockquote> \n<p>今年因为武汉新型冠状病毒的传播，哪里都不敢去了呢。大家最好还是宅在家里，不要去拜年串门了。但是长辈们说了不听啊，特别是广大农村里的老人们，他们可不在意，一口一个没事，劝了也不听呢。反正我是打算好了，初一开始哪里都不去了，死宅在家里啦~</p> \n<p><img src=\"4.jpg\" alt=\"钟南山院士友情提示\"></p> \n<p>不过我还是恰了顿百人年夜饭，现在新闻都劝人别聚会，别串门，想想都有点怕，希望没事！</p> \n<p>也不知道来吃饭的有没有武汉回来的，应该没有吧。老人特别多，抵抗力差，疾病多，希望一切安康~</p> \n<p><img src=\"1.jpg\" alt=\"村里的农家乐，还有小舞台可以K歌\"></p> \n<p><img src=\"2.jpg\" alt=\"一共11桌，估摸着一百多号人，后怕！\"></p> \n<p>两个表外甥女也越长越可爱啦，也在上海读书，这次回来过年了~</p> \n<p><img src=\"3.jpg\" alt=\"卡哇伊的小妹妹\"></p> \n<p>很多武汉小伙伴都逃到上海去了，我马上也要“逃回去”了，这不票都买好了。</p> \n<p><img src=\"5.jpg\" alt=\"大年初七就溜咯\"></p> \n<p>都说大城市传染源更多，看起来更危险。而我这苏北农村，情况可能好很多，也没有太多武汉务工回来的人。但是我更相信上海的防护措施，相信上海的医疗条件，相信我们学校的封闭管理。我觉得我宿舍-实验室两点一线，死宅着应该问题不大。</p> \n<p>现在口罩是真的难买，我爸街上药店逛了几圈才买到了10个普通医用口罩，还限购。幸亏我哥给我留了几个N95和一次性无纺布的。这下去上海的路上安心多了，希望到时候能平安到达！</p> \n<p><img src=\"7.jpg\" alt=\"今年过节不收礼，收礼只收N95\"></p> \n<p><img src=\"6.jpg\" alt=\"不要问我头发哪里去了，问就是没有了\"></p> \n<p>最后在鼠年，我只有四个愿望：</p> \n<ul> \n <li>疫情快快好，大家都安康~</li> \n <li>ACL 2020 accepted~</li> \n <li>粉丝up up up~</li> \n <li>心有所鼠~（暗示属老鼠的？）</li> \n</ul> \n<p>最后衷心的祝愿大家鼠年心想事成~</p>', '2022-04-22 22:39:38', '7.5k', 6, 9358);
INSERT INTO `t_article` VALUES ('8f3da92b05db41659b38f7c03407aa7c', '编程算法', 26, '每日算法系列【LeetCode 153】寻找旋转排序数组中的最小值', 'https://picsum.photos/1920/1080?random&rand=0.7384409600915045', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述假设按照升序排序的数组在预先未知的某个点上进行了旋转。 (例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2])。 请找出其中最小的元素。 你可', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。</p> \n<p>(例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2])。</p> \n<p>请找出其中最小的元素。</p> \n<p>你可以假设数组中不存在重复元素。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,4,5,1,2]\n输出：\n1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[4,5,6,7,0,1,2]\n输出：\n0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题如果直接遍历一遍的话，时间复杂度是 $O(n)$ ，也能过。但是这题显然想要你更快，也就是用 $O(\\log n)$ 的时间复杂度来做出来，那我们只能选择用二分法。</p> \n<p>因为序列从中间切开来，然后调换过顺序，所以是先上升，再下降一下，然后再上升。并且第二段上升的最大值 $nums[n-1]$ 是一定小于第一段上升的最小值 $nums[0]$ 的，所以最小值一定是第二段的第一个数。</p> \n<p>假设我们二分的时候，左端点 l ，右端点 r ，中间点是 m 。</p> \n<p>如果 $nums[l] &gt; nums[r]$ ，那说明左端点在第一段，右端点在第二段。这时如果 $nums[m] \\ge nums[l]$ ，那么 m 也在第一段，所以 l 需要右移；否则的话 m 在第二段， r 需要左移。</p> \n<p>如果 $nums[l] \\le nums[r]$ ，那么两个端点都在第二段，是单调上升的，那最小值一定就是 l 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                r <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findMin</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">elif</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    r <span class=\"token operator\">=</span> m\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> l\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 10:44:13', '9.0k', 6, 9051);
INSERT INTO `t_article` VALUES ('8fc0919bf4b04caf89940667d591786b', '编程算法', 10, '【每日算法Day 81】面试经典题：关于丑数，你真的理解为什么这么算吗？', 'https://picsum.photos/1920/1080?random&rand=0.6285989633407795', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题 17.09. 第 k 个数 题目描述有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/get-kth-magic-number-lcci/\" title=\"LeetCode 面试题 17.09. 第 k 个数\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 17.09. 第 k 个数</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>有些数的素因子只有 3，5，7，请设计一个算法找出第 k 个数。注意，不是必须有这些素因子，而是必须不包含其他的素因子。例如，前几个数按顺序应该是 1，3，5，7，9，15，21。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nk = 5\n输出：\n9<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题和主站的<strong>LeetCode 264. 丑数 II</strong>是一个意思：<br><a href=\"https://leetcode-cn.com/problems/ugly-number-ii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/ugly-number-ii/</a></p> \n<p>最直观的想法就是，假设已经生成了 $n$ 个丑数，那么我们把每个丑数都乘上 3，5，7，得到的结果中大于已经生成的所有丑数并且最小的那个就是下一个丑数。</p> \n<p>但是这样会产生很多重复的丑数，所以也可以用一个优先队列，将已经生成的丑数从小到大保存下来。然后取出队首最小的那个丑数，给它乘上 3，5，7，将新的三个数入队，并且队首的这个数出队，这样就不会再产生重复的数了。</p> \n<p>上面这种方法已经可以过这道题了，但是还有更简单的方法。</p> \n<p>假设我们用一个数组 $f$ 来从小到大保存每一个丑数，那么 $f[0]$ 就保存着最小的丑数 1 。用三个指针 $p_3, p_5, p_7$ 分别指着最小的那个可以和 $3,5,7$ 相乘的丑数。那么初始的时候都是 0，因为 $f[0]$ 可以和三个因子相乘。</p> \n<p>然后判断 $3f[p_3], 5f[p_5], 7f[p_7]$ 三个数谁最小，哪个新丑数最小，就让那个指针往后加 1 ，同时把那个新丑数作为下一个更大的丑数。</p> \n<p>这么做为什么是对的呢？我们将 $f$ 数组写成三行相同的形式：</p> \n<p><img src=\"1.jpg\" alt></p> \n<p>那么每一行的指针就表示了有资格和 3，5，7 相乘的最小的丑数。比如 $p_3=3$ ，那就说明只有 $f[3]$ 才有资格和 3 相乘，生成新的丑数，而之前的 $f[2]$ 早就和 3 乘过了，再乘就重复了没有意义。但是可能这时 $p_5=2$，也就是 $f[2]$ 还没和 5 乘过，所以还是有资格乘 5 生成新的丑数的。</p> \n<p>本质上相当于用了三个优先队列，来存储已生成的丑数。但是因为已生成的丑数是递增的，所以就用普通的队列也就是数组+指针就行了。每次三个队首元素乘上对应因子比较一下，取最小的那个出队，并且三个队列都要入队新丑数。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getKthMagicNumber</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx3 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx5 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>idx3<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>idx5<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>idx7<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx3<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> idx3<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx5<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> idx5<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx7<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> idx7<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">getKthMagicNumber</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> k\n        idx3<span class=\"token punctuation\">,</span> idx5<span class=\"token punctuation\">,</span> idx7 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>idx3<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>idx5<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>idx7<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx3<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span> idx3 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx5<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">5</span><span class=\"token punctuation\">:</span> idx5 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> res<span class=\"token punctuation\">[</span>idx7<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">7</span><span class=\"token punctuation\">:</span> idx7 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-02-10 21:07:04', '1.3k', 11, 2100);
INSERT INTO `t_article` VALUES ('8fc7d0f84a05484394ce453feba93217', '编程算法', 21, '每日算法系列【LeetCode 556】下一个更大元素 III', 'http://47.96.31.161:9000/my-file/img8.jpg', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个32位正整数 n，你需要找到最小的32位整数，其与 n 中存在的位数完全相同，并且其值大于n。如果不存在这样的32位整数，则返回-1。 示例1 输入： 12 输出： 2', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个32位正整数 n，你需要找到最小的32位整数，其与 n 中存在的位数完全相同，并且其值大于n。如果不存在这样的32位整数，则返回-1。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n12\n输出：\n21<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n21\n输出：\n-1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先要发现一个性质，如果调换两个数位之后，整个数字变大了，那说明第一个数位的数字小于第二个数位的数。所以我们只需要找到一个顺序对，调换它俩顺序就行了。</p> \n<p>但是如果存在两个顺序对 $(i_1, j_1)$ 和 $(i_2, j_2)$ ，那我们就要找 $i$ 更大的那个，因为前面的尽量不动才会使调换后的数字最小。</p> \n<p>如果 $i$ 相同的话，就要在 $i$ 右边找最小的使得 $nums[j] &gt; nums[i]$ 的数，这样 $i$ 处的数字才是最小的，同时整体数字还会变大。</p> \n<p>最后因为 $i$ 处已经变大了，所以 $i$ 后面的数字全部都要升序排列，这样整体数字才是最小的。</p> \n<p>所以整体算法就有了，我们从右往左找，找到第一个上升的位置 $i$ ，也就是 $nums[i] &lt; nums[j]$ 。这样 $i$ 右边就是降序了，不存在顺序对。然后在 $i$ 右边的数字中二分查找最小的大于 $nums[i]$ 的数 $nums[j]$ ，调换它俩位置。最后把 $i$ 右边的数字变成升序即可。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">nextGreaterElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> INT_MIN<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ok <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> <span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                ok <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ok<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> res <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token operator\">&gt;</span> INT_MAX <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">nextGreaterElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        s <span class=\"token operator\">=</span> str<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token string\">\'\'</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span> <span class=\"token operator\">and</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">=</span> <span class=\"token string\">\'\'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>sorted<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                        res <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                        <span class=\"token keyword\">break</span>\n                s <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> res\n                <span class=\"token keyword\">return</span> int<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> int<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> pow<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题还可以直接用 c++ 标准库函数 <code>next_permutation</code> 直接生成下一个更大的字符串排列，然后转换成整数就行了，代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">nextGreaterElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        string s <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">next_permutation</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> <span class=\"token function\">stoll</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res <span class=\"token operator\">&gt;</span> INT_MAX <span class=\"token operator\">||</span> res <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 13:30:10', '4.7k', 10, 9642);
INSERT INTO `t_article` VALUES ('921f331a08aa4fa898a5d4e137d4dc1d', '编程算法', 16, '每日算法系列【LeetCode 239】滑动窗口最大值', 'https://picsum.photos/1920/1080?random&rand=0.13809582215783478', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。 返回滑动窗口中的最大', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。</p> \n<p>返回滑动窗口中的最大值。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,3,-1,-3,5,3,6,7], 和 k = 3\n输出：\n[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong><br>你可以假设 k 总是有效的，在输入数组不为空的情况下，1 ≤ k ≤ 输入数组的大小。</p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"双端单调队列\"><a href=\"#双端单调队列\" class=\"headerlink\" title=\"双端单调队列\"></a>双端单调队列</h3>\n<p>本题要找长度为 k 的区间的最大值。模拟这个区间的移动过程，可以发现，右边增加一个数，左边必然会去掉一个数。</p> \n<p>那么最大的数有什么性质呢？可以发现，如果扫描区间末尾，在已经遍历过的数之中，一个数 a 在 b 前面，并且 a 还比 b 小，那么 a 在之后的区间里永远无法成为最大值。</p> \n<p>所以我们遍历到一个数时，它之前的所有比它小的数都可以去掉了，只保留比它大的数就行了。这就让人想到了之前介绍过的单调栈，但是本题中是先进先出，所以要改用单调队列。此外队列末尾不仅要增加元素，还得维护单调递减，适当去除一些元素，所以队列两端都得有插入和删除的功能。所以本题要使用双端队列，而队列中的元素又是单调递减的，所以又是双端单调队列。</p> \n<p>这样思路就很明确了：</p> \n<ul> \n <li>遍历元素 nums[i] ，然后跟队列尾部元素比较，如果比尾部元素大，就出队，然后继续比较，直到 nums[i] 小于尾部元素，然后将它入队。</li> \n <li>然后用一下队列首部元素的下标，计算出队列中区间的长度，如果大于 k 了，那么队首元素就要出队。</li> \n <li>最后队首元素就是当前区间的最大值。</li> \n</ul> \n<h3 id=\"分块法\"><a href=\"#分块法\" class=\"headerlink\" title=\"分块法\"></a>分块法</h3>\n<p>试想如果我们将数组划分为相同大小的若干块，每一块中最大值都是知道的话，那么要求区间最大值，只需要看它在哪几块里就行了。</p> \n<p>那么块的大小应该设成多少呢？</p> \n<p>如果块大小为 k ，就可以发现长度为 k 的区间 [i, j] 要么正好就是一个完整的块，要么跨越了两个相邻块。那么我们只需要知道 i 到它那块末尾元素中最大值，以及 j 到它那块开头最大值就行了，两个部分合并求最大值就是区间的最大值了。而每个元素到它自己那块的开头和末尾的最大值都可以预处理出来，方法和求前缀和类似。</p> \n<p>那为什么块大小不能是其他值呢？如果块大小大于 k ，那么会出现区间完全包含于一块之中的情况，那就和不分块一样了。如果块大小小于 k ，那么就会出现区间横跨了好几块，那么还得遍历中间块的最大值。极端情况下如果块大小为 1 ，那么就等于暴力求解。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"双端单调队列（c-）\"><a href=\"#双端单调队列（c-）\" class=\"headerlink\" title=\"双端单调队列（c++）\"></a>双端单调队列（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        deque<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"双端单调队列-数组实现（c-）\"><a href=\"#双端单调队列-数组实现（c-）\" class=\"headerlink\" title=\"双端单调队列+数组实现（c++）\"></a>双端单调队列+数组实现（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">Q</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span>r<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">[</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"分块法（c-）\"><a href=\"#分块法（c-）\" class=\"headerlink\" title=\"分块法（c++）\"></a>分块法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lmax</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rmax</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> i <span class=\"token operator\">==</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> rmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> rmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"双端单调队列（python）\"><a href=\"#双端单调队列（python）\" class=\"headerlink\" title=\"双端单调队列（python）\"></a>双端单调队列（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        Q <span class=\"token operator\">=</span> collections<span class=\"token punctuation\">.</span>deque<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                Q<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            Q<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">:</span>\n                Q<span class=\"token punctuation\">.</span>popleft<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;=</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">:</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"双端单调队列-数组实现（python）\"><a href=\"#双端单调队列-数组实现（python）\" class=\"headerlink\" title=\"双端单调队列+数组实现（python）\"></a>双端单调队列+数组实现（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        Q <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span>r<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            Q<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            r <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">-</span> Q<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> \n            <span class=\"token keyword\">if</span> i <span class=\"token operator\">&gt;=</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">:</span>\n                res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>Q<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"分块法（python）\"><a href=\"#分块法（python）\" class=\"headerlink\" title=\"分块法（python）\"></a>分块法（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> collections\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxSlidingWindow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        lmax<span class=\"token punctuation\">,</span> rmax <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> res\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> i<span class=\"token operator\">%</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> i <span class=\"token operator\">==</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">:</span>\n                rmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                rmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>rmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3>\n<p>双端队列在 c++ 和 python 中都有 deque 的实现，如果你不会用的话，也可以用一个数组自己模拟一下，我觉得反而更加方便一点。</p>', '2022-04-22 20:51:52', '3.1k', 9, 3150);
INSERT INTO `t_article` VALUES ('924a305eb49d42f7b090baec9a9d45ed', '编程算法', 18, '【每日算法Day 92】经典面试题：编辑距离', 'https://picsum.photos/1920/1080?random&rand=0.2857455976381855', '题目链接LeetCode 72. 编辑距离 题目描述给你两个单词 word1 和 word2，请你计算出将 word1 转换成 word2 所使用的最少操作数 。 你可以对一个单词进行如下三种操作： 插入一个字符 删除一个字符 替换一个字', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/edit-distance/\" title=\"LeetCode 72. 编辑距离\" target=\"_blank\" rel=\"noopener\">LeetCode 72. 编辑距离</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你两个单词 <code>word1</code> 和 <code>word2</code>，请你计算出将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数 。</p> \n<p>你可以对一个单词进行如下三种操作：</p> \n<ul> \n <li>插入一个字符</li> \n <li>删除一个字符</li> \n <li>替换一个字符</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nword1 = \"horse\", word2 = \"ros\"\n输出:\n3\n解释：\nhorse -&gt; rorse (将 \'h\' 替换为 \'r\')\nrorse -&gt; rose (删除 \'r\')\nrose -&gt; ros (删除 \'e\')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nword1 = \"intention\", word2 = \"execution\"\n输出:\n5\n解释：\nintention -&gt; inention (删除 \'t\')\ninention -&gt; enention (将 \'i\' 替换为 \'e\')\nenention -&gt; exention (将 \'n\' 替换为 \'x\')\nexention -&gt; exection (将 \'n\' 替换为 \'c\')\nexection -&gt; execution (插入 \'u\')<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是一道典型的动态规划题目，我们用 $dp[i][j]$ 表示 $word1_{1:i}$ 转换成 $word2_{1:j}$ 所需要的最小步数。那么对于最后一个字符来说，有如下四种情况：</p> \n<ul> \n <li>如果 $word1_{i} = word2_{j}$ ，那么最后一个字符不需要操作，答案就是 $dp[i-1][j-1]$ 。</li> \n <li>如果 最后一步操作是插入得到的，那么问题就转化为了 $word1_{1:i}$ 转换成 $word2_{1:j-1}$ 所需要的最小步数。最后再插入 $word2_{j}$ 就行了，答案就是 $dp[i][j-1] + 1$ 。</li> \n <li>如果 最后一步操作是删除得到的，那么问题就转化为了 $word1_{1:i-1}$ 转换成 $word2_{1:j}$ 所需要的最小步数。最后再删除 $word1_{i}$ 就行了，答案就是 $dp[i-1][j] + 1$ 。</li> \n <li>如果 最后一步操作是替换得到的，那么问题就转化为了 $word1_{1:i-1}$ 转换成 $word2_{1:j-1}$ 所需要的最小步数。最后再将 $word1_{i}$ 替换为 $word2_{j}$ 就行了，答案就是 $dp[i-1][j-1] + 1$ 。</li> \n</ul> \n<p>综上，如果 $word1_{i} = word2_{j}$ ，那么 $dp[i][j] = dp[i-1][j-1]$ 。否则的话：<br>$$<br>dp[i][j] = \\min{\\{dp[i][j-1], dp[i-1][j], dp[i-1][j-1]\\}} + 1<br>$$</p> \n<p>初始化就是，所有的 $dp[0][i] = i$ ，因为需要插入 $i$ 次。所有的 $dp[i][0] = i$ ，因为需要删除 $i$ 次。</p> \n<p>总的时间复杂度就是 $O(nm)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">minDistance</span><span class=\"token punctuation\">(</span>string word1<span class=\"token punctuation\">,</span> string word2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> word1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> word2<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>word1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> word2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 插入</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 删除</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 替换</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minDistance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word1<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> word2<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>word1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>word2<span class=\"token punctuation\">)</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> word1<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> word2<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">continue</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-03-31 14:38:35', '7.1k', 8, 1238);
INSERT INTO `t_article` VALUES ('93ceab339e3447859f5659dcd269cb8b', '编程算法', 3, '进字节一年了，分享一下当初刷的一百多篇算法题解', 'https://picsum.photos/1920/1080?random&rand=0.023528729746299604', '前言写算法题解也有 110 天了，今天就简单给题目归归类吧。 其实不是很想归类的，主要是有些题目类别太杂，或者多解，或者甚至根本看不出叫啥类别。 因为题目实在太多，所以就不放链接了，只放了标题，大家可以 收藏这篇文章，然后去各大平台（博客、', '<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>写算法题解也有 110 天了，今天就简单给题目归归类吧。</p> \n<p>其实不是很想归类的，主要是有些题目类别太杂，或者多解，或者甚至根本看不出叫啥类别。</p> \n<p>因为题目实在太多，所以就不放链接了，只放了标题，大家可以 <strong>收藏这篇文章，然后去各大平台（博客、公众号、知乎、CSDN、腾讯云社区）或者搜索引擎直接搜索标题</strong> 就行了</p> \n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2>\n<ul> \n <li>【每日算法Day 78】面试经典题：能说出全部四种方法，不录用你都不可能！</li> \n <li>【每日算法Day 92】经典面试题：编辑距离</li> \n <li>每日算法系列【LeetCode 115】不同的子序列</li> \n <li>每日算法系列【LeetCode 124】二叉树中的最大路径和</li> \n <li>【每日算法Day 65】你能顺利救出地下城里的公主吗？</li> \n <li>每日算法系列【LeetCode 188】买卖股票的最佳时机 IV</li> \n <li>【每日算法Day 104】偷电瓶的周某今天放出来了，还不赶紧做这道题防范一下！</li> \n <li>【每日算法Day 105】打家劫舍第二弹：看好你的电瓶车！</li> \n <li>每日算法系列【LeetCode 233】数字 1 的个数</li> \n <li>每日算法系列【LeetCode 309】最佳买卖股票时机含冷冻期</li> \n <li>每日算法系列【LeetCode 312】戳气球</li> \n <li>【每日算法Day 106】打家劫舍系列最后一弹，撑住你就赢了！</li> \n <li>每日算法系列【LeetCode 354】俄罗斯套娃信封问题</li> \n <li>每日算法系列【LeetCode 376】摆动序列</li> \n <li>【每日算法Day 85】图解算法：一行代码解决约瑟夫环的变体</li> \n <li>每日算法系列【LeetCode 689】三个无重叠子数组的最大和</li> \n <li>每日算法系列【LeetCode 714】买卖股票的最佳时机含手续费</li> \n <li>每日算法系列【LeetCode 907】子数组的最小值之和</li> \n <li>每日算法系列【LeetCode 943】最短超级串</li> \n <li>每日算法系列【LeetCode 1031】两个非重叠子数组的最大和</li> \n <li>每日算法系列【LeetCode 1039】多边形三角剖分的最低得分</li> \n <li>每日算法系列【LeetCode 1186】删除一次得到子数组最大和</li> \n <li>一个函数解决【LeetCode 买卖股票的最佳时机】系列所有题目！</li> \n <li>【每日算法Day 109】五大解法，带你深入了解完全背包方案数</li> \n <li>【每日算法Day 98】慈善赌神godweiyang教你算骰子点数概率！</li> \n <li>【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！</li> \n <li>【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！</li> \n <li>【每日算法Day 86】面试经典题：把数字翻译成字符串</li> \n <li>【每日算法Day 95】美团笔试题：四面体方案个数</li> \n</ul> \n<h2 id=\"贪心\"><a href=\"#贪心\" class=\"headerlink\" title=\"贪心\"></a>贪心</h2>\n<ul> \n <li>【每日算法Day 78】面试经典题：能说出全部四种方法，不录用你都不可能！</li> \n <li>每日算法系列【LeetCode 121】买卖股票的最佳时机</li> \n <li>每日算法系列【LeetCode 122】买卖股票的最佳时机 II</li> \n <li>每日算法系列【LeetCode 123】买卖股票的最佳时机 III</li> \n <li>每日算法系列【LeetCode 42】接雨水</li> \n <li>【每日算法Day 69】面试经典题：分发糖果问题</li> \n <li>【每日算法Day 91】求解数组中出现次数超过1/3的那个数</li> \n <li>每日算法系列【LeetCode 330】按要求补齐数组</li> \n <li>每日算法系列【LeetCode 376】摆动序列</li> \n <li>每日算法系列【LeetCode 495】提莫攻击</li> \n <li>每日算法系列【LeetCode 556】下一个更大元素 III</li> \n <li>【每日算法Day 64】LeetCode 861. 翻转矩阵后的得分</li> \n <li>每日算法系列【LeetCode 926】将字符串翻转到单调递增</li> \n <li>每日算法系列【LeetCode 927】三等分</li> \n <li>每日算法系列【LeetCode 1053】交换一次的先前排列</li> \n <li>【每日算法Day 87】今天我脱单了，所以大家不用做题了！</li> \n <li>【每日算法Day 88】超越妹妹教你如何做这道排序题</li> \n <li>每日算法系列【kentln供题】模糊的数字</li> \n</ul> \n<h2 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h2>\n<ul> \n <li>【每日算法Day 67】经典面试题：手动开根号，你知道几种方法？</li> \n <li>每日算法系列【LeetCode 233】数字 1 的个数</li> \n <li>每日算法系列【LeetCode 319】灯泡开关</li> \n <li>每日算法系列【LeetCode 357】计算各个位数不同的数字个数</li> \n <li>每日算法系列【LeetCode 470】用 Rand7() 实现 Rand10()</li> \n <li>每日算法系列【LeetCode 523】连续的子数组和</li> \n <li>【每日算法Day 61】LeetCode 672. 灯泡开关 Ⅱ</li> \n <li>每日算法系列【LeetCode 829】连续整数求和</li> \n <li>每日算法系列【LeetCode 1006】笨阶乘</li> \n <li>【每日算法Day 68】脑筋急转弯：只要一行代码，但你会证吗？</li> \n <li>每日算法系列【LeetCode 1250】检查「好数组」</li> \n <li>每日算法系列【LeetCode 1363】形成三的最大倍数</li> \n <li>【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法</li> \n <li>【每日算法Day 98】慈善赌神godweiyang教你算骰子点数概率！</li> \n <li>【每日算法Day 74】经典面试题：约瑟夫环，我敢打赌你一定不会最后一种方法！</li> \n <li>【每日算法Day 80】所有人都会做的入门题，高级解法来了！</li> \n <li>【每日算法Day 81】面试经典题：关于丑数，你真的理解为什么这么算吗？</li> \n</ul> \n<h2 id=\"双指针（滑动窗口）\"><a href=\"#双指针（滑动窗口）\" class=\"headerlink\" title=\"双指针（滑动窗口）\"></a>双指针（滑动窗口）</h2>\n<ul> \n <li>每日算法系列【LeetCode 16】最接近的三数之和</li> \n <li>每日算法系列【LeetCode 42】接雨水</li> \n <li>【每日算法Day 96】腾讯面试题：合并两个有序数组</li> \n <li>每日算法系列【LeetCode 287】寻找重复数</li> \n <li>每日算法系列【LeetCode 328】奇偶链表</li> \n <li>每日算法系列【LeetCode 658】找到 K 个最接近的元素</li> \n <li>每日算法系列【LeetCode 881】救生艇</li> \n <li>每日算法系列【LeetCode 992】K个不同整数的子数组</li> \n <li>每日算法系列【LeetCode 1004】最大连续1的个数 III</li> \n <li>【每日算法Day 107】面试必考：良心推荐，一题三解，不看后悔一辈子</li> \n <li>【每日算法Day 97】经典面试题：求两个数组最小差</li> \n <li>【每日算法Day 81】面试经典题：关于丑数，你真的理解为什么这么算吗？</li> \n</ul> \n<h2 id=\"哈希\"><a href=\"#哈希\" class=\"headerlink\" title=\"哈希\"></a>哈希</h2>\n<ul> \n <li>【每日算法Day 75】字节跳动面试题：手撕困难题，看过我Day 71的人都会做了！</li> \n <li>每日算法系列【LeetCode 128】最长连续序列</li> \n <li>每日算法系列【LeetCode 825】适龄的朋友</li> \n <li>【每日算法Day 103】老题新做，几乎不会有人想到的解法，它来了</li> \n <li>【每日算法Day 99】你们可能不知道只用20万赢到578万是什么概念</li> \n <li>每日算法系列【LeetCode 992】K个不同整数的子数组</li> \n <li>【每日算法Day 107】面试必考：良心推荐，一题三解，不看后悔一辈子</li> \n <li>每日算法系列【LeetCode 面试题 17.05】字母与数字</li> \n <li>【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法</li> \n <li>【每日算法Day 90】5种方法：求解数组中出现次数超过一半的那个数</li> \n</ul> \n<h2 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h2>\n<ul> \n <li>每日算法系列【LeetCode 153】寻找旋转排序数组中的最小值</li> \n <li>每日算法系列【LeetCode 287】寻找重复数</li> \n <li>每日算法系列【LeetCode 556】下一个更大元素 III</li> \n <li>每日算法系列【LeetCode 658】找到 K 个最接近的元素</li> \n <li>【每日算法Day 83】邻居小孩一年级就会的乘法表，你会吗？</li> \n <li>每日算法系列【LeetCode 719】找出第 k 小的距离对</li> \n <li>每日算法系列【LeetCode 825】适龄的朋友</li> \n <li>每日算法系列【LeetCode 875】爱吃香蕉的珂珂</li> \n</ul> \n<h2 id=\"单调栈（队列）\"><a href=\"#单调栈（队列）\" class=\"headerlink\" title=\"单调栈（队列）\"></a>单调栈（队列）</h2>\n<ul> \n <li>每日算法系列【LeetCode 42】接雨水</li> \n <li>【每日算法Day 69】面试经典题：分发糖果问题</li> \n <li>每日算法系列【LeetCode 239】滑动窗口最大值</li> \n <li>每日算法系列【LeetCode 503】下一个更大元素 II</li> \n <li>每日算法系列【LeetCode 907】子数组的最小值之和</li> \n</ul> \n<h2 id=\"DFS（BFS）\"><a href=\"#DFS（BFS）\" class=\"headerlink\" title=\"DFS（BFS）\"></a>DFS（BFS）</h2>\n<ul> \n <li>每日算法系列【LeetCode 115】不同的子序列</li> \n <li>【每日算法Day 108】一道简单的二叉树题目，写法还是挺多的。</li> \n <li>每日算法系列【LeetCode 312】戳气球</li> \n <li>每日算法系列【LeetCode 329】矩阵中的最长递增路径</li> \n <li>【每日算法Day 62】LeetCode 815. 公交路线</li> \n <li>每日算法系列【LeetCode 827】最大人工岛</li> \n <li>【每日算法Day 70】图解算法：小学生都会的数块数问题，你会吗？</li> \n <li>【每日算法Day 94】经典面试题：机器人的运动范围</li> \n</ul> \n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2>\n<ul> \n <li>【每日算法Day 72】谷歌面试题：又双叒叕是位运算，最详细的自动机推导过程</li> \n <li>【每日算法Day 61】LeetCode 672. 灯泡开关 Ⅱ</li> \n <li>每日算法系列【LeetCode 810】黑板异或游戏</li> \n <li>【每日算法Day 64】LeetCode 861. 翻转矩阵后的得分</li> \n <li>【每日算法Day 71】面试官想考我这道位运算题，结果我给出了三种解法</li> \n <li>【每日算法Day 66】经典面试题：不用四则运算如何做加法？</li> \n</ul> \n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2>\n<ul> \n <li>【每日算法Day 89】手动实现字符串转整数（atoi）函数，你会吗？</li> \n <li>【每日算法Day 84】面试必考题：Trie（字典树/前缀树）的实现</li> \n <li>每日算法系列【LeetCode 386】字典序排数</li> \n <li>每日算法系列【LeetCode 926】将字符串翻转到单调递增</li> \n <li>每日算法系列【LeetCode 943】最短超级串</li> \n</ul> \n<h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2>\n<ul> \n <li>【每日算法Day 73】学妹大半夜私聊我有空吗，然后竟然做出这种事！</li> \n <li>每日算法系列【LeetCode 124】二叉树中的最大路径和</li> \n <li>【每日算法Day 108】一道简单的二叉树题目，写法还是挺多的。</li> \n <li>【每日算法Day 106】打家劫舍系列最后一弹，撑住你就赢了！</li> \n <li>【每日算法Day 76】经典面试题：中序遍历的下一个元素，5大解法汇总！</li> \n</ul> \n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2>\n<ul> \n <li>每日算法系列【LeetCode 128】最长连续序列</li> \n <li>每日算法系列【LeetCode 684】冗余连接</li> \n <li>每日算法系列【LeetCode 685】冗余连接 II</li> \n</ul> \n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2>\n<ul> \n <li>【每日算法Day 82】面试经典题：求第K大数，我写了11种实现，不来看看吗？</li> \n <li>【每日算法Day 84】面试必考题：Trie（字典树/前缀树）的实现</li> \n <li>每日算法系列【LeetCode 315】计算右侧小于当前元素的个数</li> \n <li>每日算法系列【LeetCode 386】字典序排数</li> \n</ul> \n<h2 id=\"模拟\"><a href=\"#模拟\" class=\"headerlink\" title=\"模拟\"></a>模拟</h2>\n<ul> \n <li>每日算法系列【LeetCode 289】生命游戏</li> \n <li>每日算法系列【LeetCode 810】黑板异或游戏</li> \n <li>【每日算法Day 103】老题新做，几乎不会有人想到的解法，它来了</li> \n <li>每日算法系列【LeetCode 1006】笨阶乘</li> \n <li>【每日算法Day 93】不用额外空间，你会旋转一个矩阵吗？</li> \n <li>每日算法系列【LeetCode 328】奇偶链表</li> \n <li>每日算法系列【EOJ 3031】二进制倒置</li> \n</ul> \n<h2 id=\"合集\"><a href=\"#合集\" class=\"headerlink\" title=\"合集\"></a>合集</h2>\n<ul> \n <li>【每日算法Day 63】LeetCode 第 179 场周赛题解</li> \n <li>【每日算法Day 77】LeetCode 第 181 场周赛题解</li> \n <li>一个函数解决【LeetCode 买卖股票的最佳时机】系列所有题目！</li> \n <li>【每日算法Day 102】美团 AI 平台算法工程师面试编程题</li> \n <li>十大经典排序算法整理汇总（附代码）</li> \n <li>【每日算法Day 101】字节跳动 AI Lab 精选面试编程题</li> \n <li>【每日算法Day 100】字节跳动 AI Lab 面试编程题（三道）</li> \n</ul>', '2022-04-22 04:26:13', '7.6k', 3, 5466);
INSERT INTO `t_article` VALUES ('944af2b0483b45d5a1f3e6658dd503bb', '编程算法', 13, '【每日算法Day 78】面试经典题：能说出全部四种方法，不录用你都不可能！', 'https://picsum.photos/1920/1080?random&rand=0.7067161808347903', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 55. 跳跃游戏 题目描述给定一个非负整数数组，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个位', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/jump-game/\" title=\"LeetCode 55. 跳跃游戏\" target=\"_blank\" rel=\"noopener\">LeetCode 55. 跳跃游戏</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个非负整数数组，你最初位于数组的第一个位置。</p> \n<p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p> \n<p>判断你是否能够到达最后一个位置。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,3,1,1,4]\n输出：\ntrue\n解释：\n我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,1,0,4]\n输出：\nfalse\n解释：\n无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"动态规划-正推\"><a href=\"#动态规划-正推\" class=\"headerlink\" title=\"动态规划+正推\"></a>动态规划+正推</h3>\n<p>用 $dp[i]$ 表示位置 $i$ 是否可达，初始的时候都是 $0$ ，只有 $dp[0] = 1$ ，因为起点一定是可达的。</p> \n<p>然后从位置 $0$ 开始遍历。对于位置 $i$ ，如果发现 $dp[i] = 0$，那么从前面的位置无法到达它，那么就更无法到达后面的位置了，所以直接返回 <code>false</code> 。</p> \n<p>否则的话，它能到达的范围是 $i+1$ 到 $i+nums[i]$ ，所以把这部分的 $dp$ 值都标记为 $1$ 。</p> \n<p>如果发现 $i+nums[i] \\ge n-1$ ，就说明当前位置直接就能跳到终点了，直接返回 <code>true</code> 。</p> \n<p>时间复杂度 $O(n^2)$，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"动态规划-倒推\"><a href=\"#动态规划-倒推\" class=\"headerlink\" title=\"动态规划+倒推\"></a>动态规划+倒推</h3>\n<p>用 $dp[i]$ 表示从位置 $i$ 能否到达终点，初始的时候都是 $0$ ，只有 $dp[n-1] = 1$ ，因为从终点一定是可到达终点的。</p> \n<p>然后从位置 $n-2$ 开始往前遍历。对于位置 $i$ ，如果 $i+nums[i] \\ge n-1$，那就说明当前位置直接就可以到达终点，那么就令 $dp[i] = 1$ 。</p> \n<p>否则的话遍历所有的 $dp[i+1]$ 到 $dp[i+nums[i]]$ ，如果其中有等于 $1$ 的，那就说明先跳到那个位置，就能再跳到终点了。一个都没有的话 $dp[i] = 0$ 。</p> \n<p>最后看 $dp[0]$ 是否为 $1$ 就行了。</p> \n<p>时间复杂度 $O(n^2)$，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"贪心-正推\"><a href=\"#贪心-正推\" class=\"headerlink\" title=\"贪心+正推\"></a>贪心+正推</h3>\n<p>在上面的动态规划方法中，对于位置 $i$ ，我们需要把他能到达的位置全部做上标记。</p> \n<p>但是其实没有必要这么做，只需要记录一下能到的最远的那个位置 $maxx$ 就行了。如果遍历之后的位置 $j$ 时，发现 $maxx &lt; j$ ，那就说明之前的所有位置最远都无法到达 $j$ ，那就直接返回 <code>false</code> 。否则的话，比较一下当前能到达的最远位置，更新一下 $maxx$ 的值。</p> \n<p>时间复杂度 $O(n)$，空间复杂度 $O(1)$ 。</p> \n<h3 id=\"贪心-倒推\"><a href=\"#贪心-倒推\" class=\"headerlink\" title=\"贪心+倒推\"></a>贪心+倒推</h3>\n<p>还是从上面的动态规划方法改变来的，上面动态规划在位置 $i$ ，需要遍历所有它能到达的位置，然后看有没有位置能够到达终点。</p> \n<p>其实只需要看能到的最远的那个位置就行了，我们用 $minn$ 表示后面的位置中最靠前的那个能够到达终点的位置。如果最远到达位置满足 $i+nums[i] \\ge minn$，那就说明位置 $i$ 可以直接跳到 $minn$ ，那么就更新 $minn = i$ 。否则的话怎么跳都跳不到终点，因为 $i$ 和 $minn$ 之间的位置都是无法到达终点的。</p> \n<p>需要注意的是，这里最远的位置 $i+nums[i]$ 不一定能到达终点哦，但是中间的某个位置可能能够达到。</p> \n<p>时间复杂度 $O(n)$，空间复杂度 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"动态规划-正推（c-）\"><a href=\"#动态规划-正推（c-）\" class=\"headerlink\" title=\"动态规划+正推（c++）\"></a>动态规划+正推（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-倒推（c-）\"><a href=\"#动态规划-倒推（c-）\" class=\"headerlink\" title=\"动态规划+倒推（c++）\"></a>动态规划+倒推（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"贪心-正推（c-）\"><a href=\"#贪心-正推（c-）\" class=\"headerlink\" title=\"贪心+正推（c++）\"></a>贪心+正推（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> maxx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> maxx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            maxx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> maxx <span class=\"token operator\">&gt;=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"贪心-倒推（c-）\"><a href=\"#贪心-倒推（c-）\" class=\"headerlink\" title=\"贪心+倒推（c++）\"></a>贪心+倒推（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">canJump</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> minn <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> minn<span class=\"token punctuation\">)</span> minn <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>minn<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 01:31:35', '2.2k', 2, 5348);
INSERT INTO `t_article` VALUES ('9788aeafdae04b23936b9b22e30f6324', '编程算法', 17, '每日算法系列【kentln供题】模糊的数字', 'https://picsum.photos/1920/1080?random&rand=0.9528518807062416', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述 感谢 kentln 供题，题目的出处已经不记得了，只能凭印象描述一下题意。 大致意思就是给你一个字符串 $s$ ，表示一个正整数，但是有些位已经模糊了（用 $x$ 表示）。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<blockquote> \n <p>感谢 <strong>kentln</strong> 供题，题目的出处已经不记得了，只能凭印象描述一下题意。</p> \n</blockquote> \n<p>大致意思就是给你一个字符串 $s$ ，表示一个正整数，但是有些位已经模糊了（用 $x$ 表示）。现在知道它一定能被 $n$ 整除，求 $s$ 表示的正整数一共有多少种可能？注意，不允许出现前导 $0$ 。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n8x4171x 5\n输出：\n20\n解释：\n第一个 x 可以取 0 到 9 一共 10 个数，第二个 x 只能取 0 或者 5 ，所以一共有 10 * 2 = 20 种可能。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nx9953xx 1\n输出：\n900\n解释：\n第一个 x 可以取 1 到 9 一共 9 个数，后面两个 x 随便取，所以一共有 9 * 10 * 10 = 900 种可能。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$6 \\le s.length \\le 9$</li> \n <li>$1 \\le n \\le 100$</li> \n <li>输入数据可能不止一组，请输入到文件结束为止</li> \n <li>数据组数 $T = 10000$</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题最暴力的方法就是枚举所有的数，然后判断每个数是否是 $n$ 倍数就行了，时间复杂度是 $O(10^{s.length} \\cdot T)$ ，最大可以达到 $10^{13}$ 级别，无法接受！</p> \n<p>那么我们从 $s$ 的最低位（也就是第 0 位）开始考虑，假设当前已经考虑到了第 $i$ 位。我们用数组 $c[k]$ 表示前面 $i-1$ 位表示的所有数字中余数为 $k$ 可能有几种，初始的时候 $c[0] = 1$ ，其它都为 $0$ （因为一位都没有的话，就当作 $0$ 处理）。</p> \n<p>如果第 $i$ 位不是 $x$ ，那就说明第 $i$ 位上面已经有数字了。否则的话可以取 $0$ 到 $9$ 之间任意数（如果 $x$ 在最高位，排除掉 $0$）。</p> \n<p>假设第 $i$ 位取 $j$ ，那么第 $i$ 位上面的数字在整个数字中的大小就是 $j \\cdot 10^i$ 。假设它对 $n$ 取模结果是 $q = (j \\cdot 10^i) \\% n$ ，那么对于前 $i-1$ 位来说，余数为 $k$ 的答案有 $c[k]$ 种。加上第 $i$ 位之后，余数变成了 $(q+k)\\%n$ ，所以前 $i$ 位余数为 $(q+k)\\%n$ 的答案要加上 $c[k]$ 。</p> \n<p>最后整个 $s$ 的可能情况种数就是 $c[0]$ 。</p> \n<p>时间复杂度为 $O(s.length \\cdot 10 \\cdot n \\cdot T)$ ，极限情况下会达到 $9 \\cdot 10^{7}$ 级别，还可以接受。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    string s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cin <span class=\"token operator\">&gt;&gt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">&gt;&gt;</span> n<span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pow <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> lb <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rb <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'x\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lb <span class=\"token operator\">=</span> rb <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                lb <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">tc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> lb<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> rb<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">*</span> pow<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> n<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    tc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">+</span>k<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            c <span class=\"token operator\">=</span> tc<span class=\"token punctuation\">;</span>\n            pow <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> c<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"评测\"><a href=\"#评测\" class=\"headerlink\" title=\"评测\"></a>评测</h2>\n<p>因为这题忘了出处了，所以评测的话得靠自己运行，然后和正确答案比较。</p> \n<p>输入数据和标准输出在 <strong>公众号后台回复【kentln-0】</strong> 下载，步骤如下：</p> \n<ul> \n <li>首先在你的 c++ 程序 <code>main</code> 函数开头加上如下两句：<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"in.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre> 作用就是重定向输入输出，从 <code>in.txt</code> 读入数据，输出答案到 <code>out.txt</code> 中。</li> \n <li>编译你的 c++ 程序 <code>g++ 代码文件名.cpp -o test</code> ，并运行 <code>./test</code> 。</li> \n <li>然后比较你的输出和标准输出区别，采用命令 <code>comp ans.txt out.txt</code> 。</li> \n</ul>', '2022-04-22 20:52:34', '7.9k', 7, 6634);
INSERT INTO `t_article` VALUES ('9875cc9a47694df6bf71c6c211327ef3', '随笔', 19, '字节跳动秋招提前批开始，不用笔试，只剩一个月！', 'https://picsum.photos/1920/1080?random&rand=0.9930179882997835', '盼星星盼月亮，字节跳动2022届秋招提前批终于开始啦！ 提前批优势 所有岗位无笔试，直接面试！ 提前批投递结果不影响秋招，相当于多一次投递机会！ 内推时间：2021年 7月8日 - 8月1日（只有一个月不到！） 招聘对象：20', '<blockquote> \n <p>盼星星盼月亮，字节跳动2022届秋招提前批终于开始啦！</p> \n</blockquote> \n<h2 id=\"提前批优势\"><a href=\"#提前批优势\" class=\"headerlink\" title=\"提前批优势\"></a>提前批优势</h2>\n<ul> \n <li><strong>所有岗位无笔试，直接面试！</strong> </li> \n <li><strong>提前批投递结果不影响秋招，相当于多一次投递机会！</strong> </li> \n</ul> \n<h2 id=\"内推时间：\"><a href=\"#内推时间：\" class=\"headerlink\" title=\"内推时间：\"></a>内推时间：</h2>\n<p>2021年 7月8日 - 8月1日（<strong>只有一个月不到！</strong>）</p> \n<h2 id=\"招聘对象：\"><a href=\"#招聘对象：\" class=\"headerlink\" title=\"招聘对象：\"></a>招聘对象：</h2>\n<p>2021年9月-2022年8月期间毕业，且最高学历毕业后无全职工作经验的学生。</p> \n<h2 id=\"职位类别：\"><a href=\"#职位类别：\" class=\"headerlink\" title=\"职位类别：\"></a>职位类别：</h2>\n<p><strong>研发</strong>类校招岗位</p> \n<h2 id=\"投递方式\"><a href=\"#投递方式\" class=\"headerlink\" title=\"投递方式\"></a>投递方式</h2>\n<p>所以抓紧这一个月不到的时间，赶紧来投递吧。不用给我简历，直接官网投递！</p> \n<h3 id=\"扫描二维码\"><a href=\"#扫描二维码\" class=\"headerlink\" title=\"扫描二维码\"></a>扫描二维码</h3>\n<p>可以直接扫描下面的二维码（注意扫描<strong>校招</strong>那一个！！！）：<br><img src=\"hire.jpeg\" alt></p> \n<h3 id=\"点击链接\"><a href=\"#点击链接\" class=\"headerlink\" title=\"点击链接\"></a>点击链接</h3>\n<p>我的内推码:<br><strong>A7FSJMK</strong> </p> \n<p>投递链接:<br><a href=\"https://jobs.toutiao.com/s/egpham5\" target=\"_blank\" rel=\"noopener\">https://jobs.toutiao.com/s/egpham5</a></p> \n<p>最后一定要注意：<br><strong>要用我的内推码！！！</strong><br><strong>要用我的内推码！！！</strong><br><strong>要用我的内推码！！！</strong> </p> \n<p>不然我没法帮你查进度、催进度！</p> \n<h2 id=\"面试算法题福利\"><a href=\"#面试算法题福利\" class=\"headerlink\" title=\"面试算法题福利\"></a>面试算法题福利</h2>\n<p>去年我找实习的时候，连续刷了110天的leetcode，最后才得以进入字节。我把当时刷的题目都写了详细的题解，一题多解，汇总在下面的文章里了：<br><a href=\"http://localhost:4000/2020/04/24/leetcode-conclusions-110/\" target=\"_blank\" rel=\"noopener\">https://godweiyang.com/2020/04/24/leetcode-conclusions-110/</a></p> \n<p>有不懂的加我微信（<strong>godweiyang</strong>）问我！</p> \n<blockquote> \n <p>最后祝大家都能顺利进入字节！</p> \n</blockquote>', '2022-04-22 08:32:17', '6.9k', 4, 6064);
INSERT INTO `t_article` VALUES ('9bbc054603564f0ab48fc27de1ef354b', '编程算法', 24, '每日算法系列【LeetCode 319】灯泡开关', 'https://picsum.photos/1920/1080?random&rand=0.9854515157978867', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述初始时有 $n$ 个灯泡关闭。 第 $1$ 轮，你打开所有的灯泡。 第 $2$ 轮，每两个灯泡你关闭一次。 第 $3$ 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>初始时有 $n$ 个灯泡关闭。 第 $1$ 轮，你打开所有的灯泡。 第 $2$ 轮，每两个灯泡你关闭一次。 第 $3$ 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。第 $i$ 轮，每 $i$ 个灯泡切换一次开关。 对于第 $n$ 轮，你只切换最后一个灯泡的开关。 找出 $n$ 轮后有多少个亮着的灯泡。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n3\n输出：\n1\n解释：\n初始时, 灯泡状态 [关闭, 关闭, 关闭].\n第一轮后, 灯泡状态 [开启, 开启, 开启].\n第二轮后, 灯泡状态 [开启, 关闭, 开启].\n第三轮后, 灯泡状态 [开启, 关闭, 关闭]. \n\n你应该返回 1，因为只有一个灯泡还亮着。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先有 $n$ 个灯泡，假设编号为 $1$ 到 $n$ 。第 $1$ 轮，所有编号是 $1$ 的倍数的灯泡被开关了一次。第 $2$ 轮，所有编号是 $2$ 的倍数的灯泡被开关了一次。类推下去，第 $i$ 轮，所有编号是 $i$ 的倍数的灯泡被开关了一次。</p> \n<p>综上，对于编号为 $i$ 的灯泡来说，它最终被开关的次数取决于 $i$ 有几个因数。如果有奇数个因数，那么它最后就是开着的，否则就是关着的。</p> \n<p>那么我们有一个定理：<strong>如果一个正整数有奇数个因数，那么它一定是完全平方数</strong>。</p> \n<p>最浅显的证明就是，一个数 $i$ 的因数按照从小到大排个序，首尾两两一对之积一定等于 $i$ 。而如果因数只有奇数个，最中间一个因数 $x$ 只会出现一次，那么 $i = x^2$ 。</p> \n<p>严格证明也不难，首先将 $i$ 质因数分解为：<br>$$<br>i = p_1^{c_1}p_2^{c_2}\\cdots p_k^{c_k}<br>$$<br>那么 $i$ 的因数个数就是：<br>$$<br>(c_1+1)(c_2+1)\\cdots (c_k+1)<br>$$<br>因为 $i$ 的因数个数是奇数，所以任意 $c_j + 1$ 必定是奇数，即任意 $c_j$ 必定是偶数。</p> \n<p>那么 $i$ 就可以写作：<br>$$<br>i = (p_1^{c_1/2}p_2^{c_2/2}\\cdots p_k^{c_k/2})^2<br>$$<br>这就证明了 $i$ 一定是一个完全平方数。</p> \n<p>所以问题就转化为了<strong>求 $1$ 到 $n$ 之间有多少个完全平方数</strong>。答案就是 $\\left\\lfloor\\sqrt{n}\\right\\rfloor$ 。</p> \n<p>在具体实现的时候，为了防止出现浮点数误差（比如 $\\sqrt{9}$ 算出来是 $2.9999$ ，取整得到 $2$），我们可以计算 $\\left\\lfloor\\sqrt{n+0.5}\\right\\rfloor$ 的结果。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">bulbSwitch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-07-23 14:36:58', '3.3k', 3, 7332);
INSERT INTO `t_article` VALUES ('9ddb0f4138ee4503b2d9a1540875e49b', '随笔', 5, '七年师大，青春永不毕业', 'https://picsum.photos/1920/1080?random&rand=0.5297270104127916', '2021年5月19日，我答辩顺利结束了。 22年的学生时代终于要走到了尽头，在学校的日子过一天少一天。想到校园卡即将刷不进校门了，难免有些失落。 七年师大，从两年的东川路500号，到五年的中山北路3663号。我见证了计算机系的三次变迁，也发', '<p>2021年5月19日，我答辩顺利结束了。</p> \n<p>22年的学生时代终于要走到了尽头，在学校的日子过一天少一天。想到校园卡即将刷不进校门了，难免有些失落。</p> \n<p>七年师大，从两年的东川路500号，到五年的中山北路3663号。我见证了计算机系的三次变迁，也发展的越来越好。谈到当年为何选择学计算机，也是因为巧合。高考没考好，来到了师大，一心想学个工科，也就只能选择计算机了。没曾想到，一如计科深似海，这才是我感兴趣的专业。恰逢大一大二那会儿人工智能崛起，计算机毕业生工资也水涨船高。现在竞争越来越激烈了，已经从当年的冷门专业变成香饽饽了，还是很庆幸当年误打误撞来了这里的，也许高考考好一点，就没有今天的我了。</p> \n<p>回顾七年的师大生活，简单而充实，虽有遗憾，但也很知足了。</p> \n<p>本科四年，单调的不能再单调，竞赛、上课、恋爱，再无其它。两年半的初恋虽然没有善终，但也教会了我很多吧。大多数时间都花在了ACM训练和专业课程上，其它时间花的确实太少了。各种奖拿了一堆，看起来光鲜亮丽很充实，却也多了很多遗憾。</p> \n<p>硕士三年，理科大楼、教室、宿舍三点一线，就这样过了两年。平平无奇的研一，每天除了几小时的摸鱼，剩下的时间都用来打游戏了。研二运气好了点，发了论文，赶上疫情，直接就来到字节实习了。没曾想，这一实习，竟然就成了永别，退了宿舍，租了房子，彻底离开了熟悉的B906。</p> \n<p>七年时光，遇见了很多的人，几年后还能联系的不知道还剩多少，也可能只能在召唤师峡谷天天见了。今天打印论文巧遇了许久不见的酸菜鱼，说起今后不知何时能再见，莫名伤感。晚上AntNLP再聚撸串儿，不知道今后还能不能聚的这么齐了。都要各奔四方了，虽然基本都在上海，但聚一次也不容易。</p> \n<p>学业结束了，工作找到了，只剩下最后一件心头事了吧。晚上聚餐不经意间又被问起五二零怎么不带人来，我只能微微一笑，懂我的人早就了解真相了，不知道的我也不想再提。就当作今年什么事都没有发生过，仅仅是少上了三天班而已。</p> \n<p>睡得越来越晚，头发越来越少，心事越来越多。谈到未来，我想最重要的还是工作，先提升自己，做到出色。然后是副业，公众号和知乎很久没更新了，以后可以专心运营，写出更多更好的文章了。联盟永远不会再见，每天还是会上线看看那几个熟悉的id，这么多年一直都未曾改变。周末多出去转转，上海虽小，却也没怎么逛过，世界很大，也想多去看看。其他的随缘，爸妈催，亲戚介绍，以后过年少不了的话题，不管就好。五二零扫了遍朋友圈，三五十对还是有的，感慨确实年纪大了，不是当年的qq空间了。</p> \n<p><strong>致谢：</strong><br>qq, lcz, wyy, yxj, hzy, mx, zm, fzc, zqm, qjy, scy, jt, scz, dyp, zgp, lyf, gsy, etc.<br>人太多，不一一列举了，都是这么多年还时常联系的。</p> \n<p>特别感谢我的父母和导师。</p>', '2022-02-13 08:16:12', '9.4k', 10, 3149);
INSERT INTO `t_article` VALUES ('9f1d279cc8de41ed9664a28a76833c39', '编程算法', 1, '每日算法系列【LeetCode 926】将字符串翻转到单调递增', 'https://picsum.photos/1920/1080?random&rand=0.059970805344907174', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述如果一个由 ‘0’ 和 ‘1’ 组成的字符串，是以一些 ‘0’（可能没有 ‘0’）后面跟着一些 ‘1’（也可能没有 ‘1’）的形式组成的，那么该字符串是单调递增的。 我们给出一', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>如果一个由 ‘0’ 和 ‘1’ 组成的字符串，是以一些 ‘0’（可能没有 ‘0’）后面跟着一些 ‘1’（也可能没有 ‘1’）的形式组成的，那么该字符串是单调递增的。</p> \n<p>我们给出一个由字符 ‘0’ 和 ‘1’ 组成的字符串 S，我们可以将任何 ‘0’ 翻转为 ‘1’ 或者将 ‘1’ 翻转为 ‘0’。</p> \n<p>返回使 S 单调递增的最小翻转次数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"00110\"\n输出：\n1\n解释：\n我们翻转最后一位得到 00111.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"010110\"\n输出：\n2\n解释：\n我们翻转得到 011111，或者是 000111。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"00011000\"\n输出：\n2\n解释：\n我们翻转得到 00000000。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= S.length &lt;= 20000</li> \n <li>S 中只包含字符 ‘0’ 和 ‘1’</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>要想把字符串变成递增的，只有两种可能，一种就是从某一处开始全是 1 ，之前都是 0 或者没有，另一种就是全 0 。那么我们只需要遍历这个 1 开始的位置就行了。</p> \n<p>对于位置 i ，我们假设从它开始后面都是 1 ，前面都是 0 ，那么需要修改的的次数就是它后面 0 的数量减去它前面 1 的数量。</p> \n<p>如果我们用数组预处理出来位置 i 开始到最后 1 的数量，记为 $dp[i]$ 。那么它后面 0 的数量就可以表示为 $n - i - dp[i]$ ，也就是后面的长度减去 1 的数量。而它前面 1 的数量可以表示为 $dp[0] - dp[i]$ ，也就是 1 的总数量减去 i 后面 1 的数量。</p> \n<p>那么总的修改次数就是 $n - i - dp[i] + dp[0] - dp[i]$ ，我们只需要遍历所有的 i ，找出最小值就行了。</p> \n<p>另外还需要比较一下 $dp[0]$ 的大小，也就是把所有的 1 都修改为 0 。</p> \n<p>最终时间复杂度是 $O(n)$ ，空间复杂度也是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">minFlipsMonoIncr</span><span class=\"token punctuation\">(</span>string S<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> S<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'1\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minFlipsMonoIncr</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token keyword\">if</span> S<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\'1\'</span> <span class=\"token keyword\">else</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">-</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2019-09-02 04:40:08', '3.1k', 2, 5214);
INSERT INTO `t_article` VALUES ('9f7e3262116c46799085c04f6e208430', '编程算法', 12, '每日算法系列【LeetCode 330】按要求补齐数组', 'https://picsum.photos/1920/1080?random&rand=0.7614833215518255', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个已排序的正整数数组 nums ，和一个正整数 n 。从 [1, n] 区间内选取任意个数字补充到 nums 中，使得 [1, n] 区间内的任何数字都可以用 nums', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个已排序的正整数数组 nums ，和一个正整数 n 。从 [1, n] 区间内选取任意个数字补充到 nums 中，使得 [1, n] 区间内的任何数字都可以用 nums 中某几个数字的和来表示。请输出满足上述要求的最少需要补充的数字个数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,3], n = 6\n输出：\n1\n解释：\n根据 nums 里现有的组合 [1], [3], [1,3]，可以得出 1, 3, 4。\n现在如果我们将 2 添加到 nums 中， 组合变为: [1], [2], [3], [1,3], [2,3], [1,2,3]。\n其和可以表示数字 1, 2, 3, 4, 5, 6，能够覆盖 [1, 6] 区间里所有的数。\n所以我们最少需要添加一个数字。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,5,10], n = 20\n输出：\n2\n解释：\n我们需要添加 [2, 4]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,2,2], n = 5\n输出：\n0<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先这题没有说数据范围，根据正解的时间复杂度，推测出 nums.length 的大小在 1e5 左右，而 n 的大小在 int 的最大值左右。</p> \n<p>而不考虑数据范围，我刚开始的想法是，首先考虑简化问题：<strong>用 nums 数组中的数字可以表示出多少个不同的正整数？</strong><br>这可以用动态规划来解决，令 dp[S][i] 表示用前 i 个数凑出和 S 是否可行，那么状态转移方程就是： dp[S][i] = dp[S-nums[i]][i-1] || dp[S][i-1] 。<br>然后遍历 dp[i][nums.length-1] ，如果发现等于 0 ，就说明 nums 数组无法凑出 i 这个和，于是新增加一个数 i ，并且将 [i, 2i)中的所有 dp 值都改成 1，直到 [1, n] 全部被覆盖了。<br>后来看了才发现，我弱智了，这样不仅没必要，而且 n 太大会炸裂。</p> \n<p>正解很简单。首先题目中有个词“已排序”，其实不是很重要，没排序的话我排个序也不怎么耗时间。那排完序怎么办呢，思路还是刚刚的思路，只是不用动态规划了。</p> \n<p>试想从最小的 1 开始，如果 1 不在数组里，那一定要补上一个 1 的，然后 [1, 2) 范围里的数都可以被表示出来了。然后看下一个数，如果大于 2 ，那么 2 是没有办法通过数组里的数表示出来的，因为比它小的数只能凑出 [1, 2) ，所以 2 也要补上。如果下一个数小于等于 2 ，那么我们可以利用目前的数凑出 [1, 4) 里面的数，然后继续往下遍历，直到能够凑出 [1, n+1) 里面的数。</p> \n<p>一般情况下，如果遍历到 nums[i-1] 时，可以表示出 [1, S) 范围内的数，那么如果 nums[i] &gt; S ，那么需要补上 S ，并且可表示范围更新为 [1, 2S)，然后继续看 nums[i] ；否则的话可表示范围更新为 [1, S+nums[i]) ，然后看 nums[i+1] 就行了。</p> \n<p>这样就比原来的思路简化了很多了，那么时间复杂度怎么样呢？<br>因为 S 每次更新有两种情况，要么乘以 2 ，要么加上了 nums[i] ，所以最终时间复杂度是 $O(m + \\log n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">minPatches</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> r <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> len <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                r <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                r <span class=\"token operator\">+</span><span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">minPatches</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        length <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        idx <span class=\"token operator\">=</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        r <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> r <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> idx <span class=\"token operator\">&lt;</span> length <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span>\n                idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                r <span class=\"token operator\">+=</span> r\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 15:07:17', '4.0k', 9, 2789);
INSERT INTO `t_article` VALUES ('a1dae36d716241e4b4edfdbfbcf6890a', '编程算法', 5, '每日算法系列【LeetCode 685】冗余连接 II', 'https://picsum.photos/1920/1080?random&rand=0.7683956983040369', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述在本问题中，有根树指满足以下条件的有向图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。 输入一个有向图，该图由一个有着', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在本问题中，有根树指满足以下条件的有向图。该树只有一个根节点，所有其他节点都是该根节点的后继。每一个节点只有一个父节点，除了根节点没有父节点。</p> \n<p>输入一个有向图，该图由一个有着 $N$ 个节点（节点值不重复 $1, 2, …, N$）的树及一条附加的边构成。附加的边的两个顶点包含在1到N中间，这条附加的边不属于树中已存在的边。</p> \n<p>结果图是一个以边组成的二维数组。 每一个边 的元素是一对 $[u, v]$，用以表示有向图中连接顶点 $u$ 和 $v$ 和顶点的边，其中父节点 $u$ 是子节点 $v$ 的一个父节点。</p> \n<p>返回一条能删除的边，使得剩下的图是有 $N$ 个节点的有根树。若有多个答案，返回最后出现在给定二维数组的答案。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1,2], [1,3], [2,3]]\n输出：\n[2,3]\n解释：\n  1\n / \\\nv   v\n2--&gt;3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1,2], [2,3], [3,4], [4,1], [1,5]]\n输出：\n[4,1]\n解释：\n5 &lt;- 1 -&gt; 2\n     ^    |\n     |    v\n     4 &lt;- 3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>输入的二维数组大小在 $3$ 到 $1000$。</li> \n <li>二维数组中的整数在 $1$ 到 $N$ 之间，其中 $N$ 是输入数组的大小。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题是上一道题<a href=\"https://zhuanlan.zhihu.com/p/108220276\" target=\"_blank\" rel=\"noopener\">LeetCode 685. 冗余连接</a>的进阶版，区别就是无向图变成了有向图。</p> \n<p>上一道题解说过，无向图能构成一棵树的条件是没有环，那么有向图的条件是什么呢？</p> \n<p>首先还是得没有环，其次因为是边是有向的，所以一个结点只能有一个父结点（也就是入度为 $1$）。那么这题解法就有了。</p> \n<ul> \n <li>首先判断有没有入度为 $2$ 的结点，如果有的话，那两条边一定有一条得删掉。</li> \n <li>按照出现时间从后到前看那两条边，删掉其中一条之后是否能构成一棵树（也就是无环）。如果删掉了无环，那就直接返回这条边作为答案。</li> \n <li>如果入度全是 $1$ ，那就直接按照出现时间从前到后看添加了哪一条边之后开始出现了环，那么那条边就是答案。</li> \n</ul> \n<p>判断能否构成一棵树的话还是用并查集，唯一区别就是不需要用<strong>按秩合并</strong>的优化了，而且给定有向边 $[u, v]$，只能把 $v$ 接在 $u$ 下面。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> degree<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findRedundantDirectedConnection</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> degree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> e <span class=\"token operator\">:</span> edges<span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>degree<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>degree<span class=\"token punctuation\">[</span>edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">wrongEdge</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">wrongEdge</span><span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">wrongEdge</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> except<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> except<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> u<span class=\"token operator\">==</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> u <span class=\"token operator\">:</span> f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        u <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        f<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        u <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        v <span class=\"token operator\">=</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findRedundantDirectedConnection</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">)</span>\n        degree <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n            degree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> degree<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">and</span> len<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>wrongEdge<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>wrongEdge<span class=\"token punctuation\">(</span>edges<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">wrongEdge</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> edges<span class=\"token punctuation\">,</span> ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> u<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> edges<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ex<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>same<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">]</span>\n            self<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> u\n        self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">join</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> u <span class=\"token operator\">==</span> v<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span>\n        self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> u\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        u<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> u <span class=\"token operator\">==</span> v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 14:08:20', '6.6k', 8, 1160);
INSERT INTO `t_article` VALUES ('a1e36b01cd424c0abe63f11e2536f804', '编程算法', 31, '【每日算法Day 82】面试经典题：求第K大数，我写了11种实现，不来看看吗？', 'https://picsum.photos/1920/1080?random&rand=0.19984882596355402', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 215. 数组中的第K个最大元素 题目描述在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" title=\"LeetCode 215. 数组中的第K个最大元素\" target=\"_blank\" rel=\"noopener\">LeetCode 215. 数组中的第K个最大元素</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,1,5,6,4] 和 k = 2\n输出：\n5<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,3,1,2,4,5,5,6] 和 k = 4\n输出：\n4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>解释：</strong></p> \n<ul> \n <li>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3>\n<p>对数组从大到小排序，取第 $k$ 个元素。</p> \n<p>或者从小到大排序，取第 $n-k+1$ 个元素。</p> \n<h3 id=\"小根堆-库函数\"><a href=\"#小根堆-库函数\" class=\"headerlink\" title=\"小根堆+库函数\"></a>小根堆+库函数</h3>\n<p><code>c++</code> 自带 <code>priority_queue&lt;int&gt;</code> ，可以实现小根堆。</p> \n<p><code>python</code> 自带 <code>heapq</code> ，可以实现小根堆，同时还自带 <code>nlargest</code> 函数可以直接求出前 $k$ 大元素。</p> \n<p>然后维护一个大小为 $k$ 的小根堆，保存最大的 $k$ 个数，堆顶就是第 $k$ 大的数。新元素入堆，如果堆中元素个数大于 $k$ ，就将堆顶元素出堆。</p> \n<h3 id=\"大根堆-库函数\"><a href=\"#大根堆-库函数\" class=\"headerlink\" title=\"大根堆+库函数\"></a>大根堆+库函数</h3>\n<p><code>c++</code> 自带 <code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;</code> ，可以实现大根堆。</p> \n<p><code>python</code> 没有大根堆实现。</p> \n<p>然后维护一个大小为 $n-k+1$ 的大根堆，保存最小的 $n-k+1$ 个数，堆顶就是第 $n-k+1$ 小的数，即第 $k$ 大的数。新元素入堆，如果堆中元素个数大于 $n-k+1$ ，就将堆顶元素出堆。</p> \n<h3 id=\"小根堆-手写\"><a href=\"#小根堆-手写\" class=\"headerlink\" title=\"小根堆+手写\"></a>小根堆+手写</h3>\n<p>利用原地算法，直接将原数组当作一个小根堆。</p> \n<p>首先对前 $k$ 个元素建立初始堆。然后遍历后面的元素，如果大于堆顶元素的话，就和堆顶元素交换位置，并调整堆。</p> \n<p>小根堆大小始终为 $k$ 。</p> \n<h3 id=\"大根堆-手写\"><a href=\"#大根堆-手写\" class=\"headerlink\" title=\"大根堆+手写\"></a>大根堆+手写</h3>\n<p>利用原地算法，直接将原数组当作一个大根堆。</p> \n<p>首先对前 $n-k+1$ 个元素建立初始堆。然后遍历后面的元素，如果小于堆顶元素的话，就和堆顶元素交换位置，并调整堆。</p> \n<p>大根堆大小始终为 $n-k+1$ 。</p> \n<h3 id=\"快速选择\"><a href=\"#快速选择\" class=\"headerlink\" title=\"快速选择\"></a>快速选择</h3>\n<p>思想类似于快速排序，首先随机选取一个元素 $p$，然后将区间内元素比 $p$ 小的都放在 $p$ 左边，比 $p$ 大的都放在 $p$ 右边。</p> \n<p>然后看 $p$ 的下标 $i$，如果 $i+1 = n-k+1$，那就说明 $p$ 就是第 $n-k+1$ 小（第 $k$ 大）的元素，直接返回即可。否则如果 $i+1 &lt; n-k+1$，那就说明第 $k$ 大元素在 $p$ 的右边区间内，递归寻找即可。否则就在左边区间，递归寻找。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"排序（c-）\"><a href=\"#排序（c-）\" class=\"headerlink\" title=\"排序（c++）\"></a>排序（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"小根堆-STL优先队列（c-）\"><a href=\"#小根堆-STL优先队列（c-）\" class=\"headerlink\" title=\"小根堆+STL优先队列（c++）\"></a>小根堆+STL优先队列（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">,</span> greater<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"大根堆-STL优先队列（c-）\"><a href=\"#大根堆-STL优先队列（c-）\" class=\"headerlink\" title=\"大根堆+STL优先队列（c++）\"></a>大根堆+STL优先队列（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        priority_queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"小根堆-手写（c-）\"><a href=\"#小根堆-手写（c-）\" class=\"headerlink\" title=\"小根堆+手写（c++）\"></a>小根堆+手写（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"大根堆-手写（c-）\"><a href=\"#大根堆-手写（c-）\" class=\"headerlink\" title=\"大根堆+手写（c++）\"></a>大根堆+手写（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"快速选择（c-）\"><a href=\"#快速选择（c-）\" class=\"headerlink\" title=\"快速选择（c++）\"></a>快速选择（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">quickSelect</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">&lt;</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">quickSelect</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSelect</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSelect</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"排序（python）\"><a href=\"#排序（python）\" class=\"headerlink\" title=\"排序（python）\"></a>排序（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"小根堆-heapq（python）\"><a href=\"#小根堆-heapq（python）\" class=\"headerlink\" title=\"小根堆+heapq（python）\"></a>小根堆+heapq（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> heapq<span class=\"token punctuation\">.</span>nlargest<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"小根堆-手写（python）\"><a href=\"#小根堆-手写（python）\" class=\"headerlink\" title=\"小根堆+手写（python）\"></a>小根堆+手写（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">:</span>\n                c1<span class=\"token punctuation\">,</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span>\n                c <span class=\"token operator\">=</span> c2 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> c1\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                p <span class=\"token operator\">=</span> c\n\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>k<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            adjust<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n            nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            adjust<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"大根堆-手写（python）\"><a href=\"#大根堆-手写（python）\" class=\"headerlink\" title=\"大根堆+手写（python）\"></a>大根堆+手写（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">:</span>\n                c1<span class=\"token punctuation\">,</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span>\n                c <span class=\"token operator\">=</span> c2 <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> c1\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                p <span class=\"token operator\">=</span> c\n\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            adjust<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">continue</span>\n            nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n            adjust<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"快速选择（python）\"><a href=\"#快速选择（python）\" class=\"headerlink\" title=\"快速选择（python）\"></a>快速选择（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findKthLargest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">def</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            p<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> l\n            nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span>\n                    m <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">return</span> m\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">quickSelect</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> l <span class=\"token operator\">==</span> r<span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n            m <span class=\"token operator\">=</span> partition<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> k <span class=\"token operator\">==</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> k <span class=\"token operator\">&lt;</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> quickSelect<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> quickSelect<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span>\n\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> quickSelect<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 12:06:42', '9.5k', 9, 8349);
INSERT INTO `t_article` VALUES ('a23754a984844622a6a7c5feb4b4c95a', '深度学习', 31, '如何自动搜出更好、更小、更快的NLP模型？', 'https://picsum.photos/1920/1080?random&rand=0.5149639392946959', '关注公众号【算法码上来】，每日算法干货马上就来！ 前言最近读了不少神经架构搜索（NAS）的论文，把NAS的整体脉络大致摸清了。 但是也发现了NAS目前还是用在CV领域居多，NLP领域和移动端优化寥寥无几。因此这里分享几篇NLP或者移动', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>最近读了不少神经架构搜索（NAS）的论文，把NAS的整体脉络大致摸清了。</p> \n<p>但是也发现了NAS目前还是用在CV领域居多，NLP领域和移动端优化寥寥无几。因此这里分享几篇NLP或者移动端上的NAS论文。</p> \n<p>刚入门，很多不懂，理解有误或者有更多推荐的相关论文都可以评论区留言。</p> \n<h2 id=\"AMC\"><a href=\"#AMC\" class=\"headerlink\" title=\"AMC\"></a>AMC</h2>\n<p><strong>[ECCV 18] AMC: AutoML for Model Compression and Acceleration on Mobile Devices</strong></p> \n<h3 id=\"动机\"><a href=\"#动机\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>以往的压缩策略或者说剪枝率都是人工调的，而本文提出了一直基于强化学习的剪枝方法，每层剪枝率可以单独调。</p> \n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p><img src=\"1.png\" alt><br>从最下面一层开始，编码整个网络的状态。然后用强化学习生成下一层的剪枝率，更新状态。最后的reward可以是压缩率、延时、FLOPs等等。actor用的是DDPG，action定义为(0, 1]之间的稀疏率。<br><img src=\"2.png\" alt><br>上面是剪枝和状态更新过程。</p> \n<p>应用场景分为两种，一种是资源受限条件下寻找效果最高的模型，这种情况reward就直接定义为效果就行了，而资源的限制设定在了action空间里，就是上图伪代码做的事情。另一种是效果不变的情况下，压缩的尽量小，这种情况就要改reward，本文设定为了$R = -L \\cdot \\log(\\text{Params})$，这里改成FLOPs也是可以的，因为参数量前面加了$\\log$，所以参数量的下降产生的奖励非常小，这就能一定程度上防止效果下降过多。延时的话本文认为和FLOPs基本正相关，因此直接优化FLOPs就行了（其实很多地方不是这样，比如考虑到并行等）。</p> \n<h3 id=\"实验\"><a href=\"#实验\" class=\"headerlink\" title=\"实验\"></a>实验</h3>\n<p><img src=\"3.png\" alt><br>相同稀疏率情况下，效果更好。</p> \n<h3 id=\"评价\"><a href=\"#评价\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>可以针对不同设备，自动搜出最佳的压缩策略，对于平衡效果和压缩率/加速比非常友好。</p> \n<h2 id=\"TextNAS\"><a href=\"#TextNAS\" class=\"headerlink\" title=\"TextNAS\"></a>TextNAS</h2>\n<p><strong>[AAAI 20] TextNAS: A Neural Architecture Search Space Tailored for Text Representation</strong></p> \n<h3 id=\"动机-1\"><a href=\"#动机-1\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>大多数NAS方法集中在搜索策略的设计上，但是本文重点在定义了一个很好的搜索空间，包含了文本处理里面常用的一些操作符。</p> \n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p>本文发现NLP领域cell搜索不如直接搜整个网络效果好。搜索空间定义为了卷积层、池化层、双向循环结构（GRU）、注意力层。搜索算法就是用的ENAS，并且每个layer只能选择前面k=5个layer作为输入，这样可以减小搜索空间，但其实这样也丢失了长距离的残差连接。</p> \n<h3 id=\"实验-1\"><a href=\"#实验-1\" class=\"headerlink\" title=\"实验\"></a>实验</h3>\n<p><img src=\"4.png\" alt><br>这篇是做效果提升的，因此可以看到在很多数据集上效果都超过了之前的模型。</p> \n<h3 id=\"评价-1\"><a href=\"#评价-1\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>感觉上和ENAS差别不是很大，就是搜索空间针对NLP任务做了一些扩展。此外搜索目标只是效果，并没有考虑到延时等条件。</p> \n<h2 id=\"ET\"><a href=\"#ET\" class=\"headerlink\" title=\"ET\"></a>ET</h2>\n<p><strong>[ICML 19] The Evolved Transformer</strong></p> \n<h3 id=\"动机-2\"><a href=\"#动机-2\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>这篇是想搜出一个效果更好的Transformer结构。</p> \n<h3 id=\"方法-2\"><a href=\"#方法-2\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p><img src=\"5.png\" alt><br>搜索空间也是cell堆叠，每个cell里面encoder有6个block，decoder有8个，这样是为了初始化的时候能重现Transformer结构。</p> \n<p>演化算法初始个体就用的是Transformer结构，这样收敛的更快一点。为了加快搜索速度，采用了Progressive Dynamic Hurdles的方法，过程是这样的：初始种群全部训练到一定步数后early stop，算出平均适应度。接下来后代训练到相同步数后，适应度高于平均值的继续训练一定步数后early stop，其余的直接early stop。然后更新这个early stop的步数和对应的适应度平均值，继续演化出后代。</p> \n<h3 id=\"实验-2\"><a href=\"#实验-2\" class=\"headerlink\" title=\"实验\"></a>实验</h3>\n<p><img src=\"6.png\" alt><br>可以看出，在多个不同模型大小设置下，ET效果都要高于Transformer，而且越小效果越好。</p> \n<h3 id=\"评价-2\"><a href=\"#评价-2\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>大力出奇迹，效果也不错，但是缺点就是搜索时间太长了。</p> \n<h2 id=\"OFA\"><a href=\"#OFA\" class=\"headerlink\" title=\"OFA\"></a>OFA</h2>\n<p><strong>[ICLR 20] Once for All: Train One Network and Specialize it for Efficient Deployment</strong></p> \n<h3 id=\"动机-3\"><a href=\"#动机-3\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>NAS能减小目标设备上的延时，但是对于每个设备都得retrain，甚至得重新搜索结构。所以本文只需要训练一次，对于每个设备只需要几分钟就能搜出最优结构，并且不需要retrain。</p> \n<h3 id=\"方法-3\"><a href=\"#方法-3\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p>首先train一个超网络，然后采用progressive shrinking进行子网络的采样和finetune，progressive shrinking会同时训练各个大小的网络，这样不同子网络之间性能都能达到比较好。</p> \n<p>最后训练一个（模型结构，准确率）的预测器，再维护一个（模型结构，目标设备，延时/FLOPs）的loopup table，用演化算法直接搜一个目标设备上最优的模型。因为是帕累托最优，所以寻找的是小于限定延时/FLOPs情况下最佳效果的模型。<br><img src=\"7.png\" alt></p> \n<h3 id=\"实验-3\"><a href=\"#实验-3\" class=\"headerlink\" title=\"实验\"></a>实验</h3>\n<p><img src=\"8.png\" alt><br><img src=\"9.png\" alt><br><img src=\"10.png\" alt><br>相同延时的情况下效果会好很多。搜出结构之后再finetune会更好。搜出结构后从头train效果很差，说明pretrain的weight是有用的。</p> \n<h3 id=\"评价-3\"><a href=\"#评价-3\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>移动端部署很好用，只需要train一次，速度非常快，progressive shrinking解决了多个子网络互相影响的问题。</p> \n<h2 id=\"HAT\"><a href=\"#HAT\" class=\"headerlink\" title=\"HAT\"></a>HAT</h2>\n<p><strong>[ACL 20] HAT: Hardware Aware Transformers for Efficient Natural Language Processing</strong></p> \n<h3 id=\"动机-4\"><a href=\"#动机-4\" class=\"headerlink\" title=\"动机\"></a>动机</h3>\n<p>Transfomer部署到不同终端，NAS费时费钱。</p> \n<h3 id=\"方法-4\"><a href=\"#方法-4\" class=\"headerlink\" title=\"方法\"></a>方法</h3>\n<p>其实就是把OFA照搬到Transformer上，这里连progressive shrinking都没用，直接uniform采样，貌似也没有用不同size的模型联合训练。</p> \n<h3 id=\"实验-4\"><a href=\"#实验-4\" class=\"headerlink\" title=\"实验\"></a>实验</h3>\n<p><img src=\"11.png\" alt></p> \n<h3 id=\"评价-4\"><a href=\"#评价-4\" class=\"headerlink\" title=\"评价\"></a>评价</h3>\n<p>我感觉相比于OFA创新很小，就是设计了一下Transformer的搜索空间，其他基本差不多。</p> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>目前看来，AMC、OFA和HAT是之后可以尝试的工作。</p> \n<p>如果想不改变结构，单纯通过剪枝压缩的话，可以尝试用AMC在相同压缩率或延时的情况下达到更好的效果。</p> \n<p>而如果想要更深一步优化延时和压缩率，可以尝试OFA的方法，这种方法只需要train一次超网络，训练过程中采用技巧防止子网络性能互相影响即可。最后针对不同设备直接搜出最优结构就行了，不需要在评估过程中重新训练。因此速度非常快，也很方便。</p> \n<p>OFA和HAT的代码也都开源了，可以按照教程试一试，我试了在ImageNet上搜出一个比较好的模型还是非常快的。不考虑pretrain的时间，对于每个设备只需要几十秒就搜出来了。</p> \n<p><strong>OFA：</strong><br><a href=\"https://github.com/mit-han-lab/once-for-all\" target=\"_blank\" rel=\"noopener\">https://github.com/mit-han-lab/once-for-all</a></p> \n<p><strong>HAT：</strong><br><a href=\"https://github.com/mit-han-lab/hardware-aware-transformers\" target=\"_blank\" rel=\"noopener\">https://github.com/mit-han-lab/hardware-aware-transformers</a></p> \n<p>此外AMC也有两个很nice的工具包都集成进去了：<br><strong>Intel：</strong><br><a href=\"https://github.com/IntelLabs/distiller/tree/master/examples/auto_compression/amc\" target=\"_blank\" rel=\"noopener\">https://github.com/IntelLabs/distiller/tree/master/examples/auto_compression/amc</a><br><strong>MicroSoft：</strong><br><a href=\"https://github.com/microsoft/nni/tree/master/examples/model_compress/amc\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoft/nni/tree/master/examples/model_compress/amc</a></p>', '2022-04-22 05:29:32', '5.2k', 5, 7783);
INSERT INTO `t_article` VALUES ('a31bbf722a604a7e94abd63383861da5', '编程算法', 18, '每日算法系列【LeetCode 927】三等分', 'https://picsum.photos/1920/1080?random&rand=0.5288702610874142', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个由 0 和 1 组成的数组 A，将数组分成 3 个非空的部分，使得所有这些部分表示相同的二进制值。 如果可以做到，请返回任何 [i, j]，其中 i+1 &lt; j，', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个由 0 和 1 组成的数组 A，将数组分成 3 个非空的部分，使得所有这些部分表示相同的二进制值。</p> \n<p>如果可以做到，请返回任何 [i, j]，其中 i+1 &lt; j，这样一来：</p> \n<ul> \n <li>A[0], A[1], …, A[i] 组成第一部分；</li> \n <li>A[i+1], A[i+2], …, A[j-1] 作为第二部分；</li> \n <li>A[j], A[j+1], …, A[A.length - 1] 是第三部分。</li> \n <li>这三个部分所表示的二进制值相等。</li> \n</ul> \n<p>如果无法做到，就返回 [-1, -1]。</p> \n<p>注意，在考虑每个部分所表示的二进制时，应当将其看作一个整体。例如，[1,1,0] 表示十进制中的 6，而不会是 3。此外，前导零也是被允许的，所以 [0,1,1] 和 [1,1] 表示相同的值。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,0,1,0,1]\n输出：\n[0,3]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,1,0,1,1]\n输出：\n[-1,-1]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>3 &lt;= A.length &lt;= 30000</li> \n <li>A[i] == 0 或 A[i] == 1</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题虽然名义上是个难题，其实基本没有用到什么算法，只是代码实现上略微繁琐了一点。</p> \n<p>想象如果这个数组能分成三个子数组，每个子数组表示的数字都相同，那么首先<strong>每个子数组中 1 的数量一定要相等！</strong></p> \n<p>所以我们先统计 1 的数量，如果它不是 3 的倍数，那么一定不存在划分方式，直接返回无解就行了。如果数量是 0 ，就说明数组全 0 ，那么随便划分都是合理的，任意返回就行了。</p> \n<p>接下来将 1 的数量等分为 3 份 ，然后遍历数组，找出 3 个子数组的左右边界（注意这个边界表示的是每个子数组第一个 1 和最后一个 1 的位置）。这时候还没结束，因为最后一个子数组末尾会多出来很多 0 。所以我们需要在前两个子数组后面加上等量的 0 。</p> \n<p>最后遍历一遍三个子数组，判断是否完全相等就行了。</p> \n<p>听起来是很简单，代码实现的时候还是有几个小细节的。比如求边界的时候，可以利用求余操作，保存到两个数组里，这样写起来美观方便。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">threeEqualParts</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt1 <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        cnt1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cnt1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span>cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>cnt1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">threeEqualParts</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        cnt1 <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> cnt1<span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        cnt1 <span class=\"token operator\">//=</span> <span class=\"token number\">3</span>\n        cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token number\">3</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">continue</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                l<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>cnt1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            <span class=\"token keyword\">if</span> cnt<span class=\"token operator\">%</span>cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                r<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>cnt<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span>cnt1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">or</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> A<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-01-05 01:16:56', '6.7k', 6, 5930);
INSERT INTO `t_article` VALUES ('a5030f2fe7be466fb21f8dab0e415b1e', '随笔', 30, '二零二零年终总结', 'https://picsum.photos/1920/1080?random&rand=0.568943597818065', '关注公众号【算法码上来】，每日算法干货马上就来！ 今天是我的阳历生日，今年是不平凡的一年，有许多事情值得回顾。 新冠年初突如其来的疫情，谁也想不到，影响一直持续到现在。 因为疫情，大学六年来头一次呆家里这么久，足足四个月，人养胖了', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>今天是我的阳历生日，今年是不平凡的一年，有许多事情值得回顾。</p> \n</blockquote> \n<h2 id=\"新冠\"><a href=\"#新冠\" class=\"headerlink\" title=\"新冠\"></a>新冠</h2>\n<p>年初突如其来的疫情，谁也想不到，影响一直持续到现在。</p> \n<p>因为疫情，大学六年来头一次呆家里这么久，足足四个月，人养胖了，和父母也更多交流了。</p> \n<p>还记得当初在家苦口婆心劝家人过年别出去打牌了，最后还是没用，各种出去玩，好在得益于国家控制的好，最后也无大碍。</p> \n<p>时至今日，还依然有源源不断的境外流入和极少数的本地病例，走在大街上依然需要戴口罩，这场战斗还要打很久。</p> \n<p>希望这场战斗早点结束，因为它错过了很多，人生唯一一次出国开会也泡汤了。</p> \n<h2 id=\"装潢\"><a href=\"#装潢\" class=\"headerlink\" title=\"装潢\"></a>装潢</h2>\n<p>过年家里把老房子装潢了一下，长这么大第一次住上了自己的房间，不用和父母一起睡了。</p> \n<p>为什么要装潢呢？其实就是为了以后我能带个女朋友回家，不过到现在还是孤身一人呢，房间自然也是空荡荡的。</p> \n<p>说来也是，他们也着急了，有机会就安排介绍对象了，不过基本都不是很感兴趣。</p> \n<h2 id=\"论文\"><a href=\"#论文\" class=\"headerlink\" title=\"论文\"></a>论文</h2>\n<p>疫情在家第一件喜事就是ACL中了吧，也是运气好，想想也挺后怕的，不中的话现在的生活又是另一番模样。</p> \n<p>论文搞得时间不是很久，精力倒是费了不少，导师很上心，从头到尾各种修改，非常感恩。</p> \n<p>也给之后的实习面试铺平了道路吧，轻松了许多。</p> \n<h2 id=\"工作\"><a href=\"#工作\" class=\"headerlink\" title=\"工作\"></a>工作</h2>\n<p>刚中了论文其实也没想过立刻找实习，还不知道之后要干嘛，挺未知迷茫的，直到导师提醒我去找个实习。</p> \n<p>最后有幸来了字节，也圆了我留上海大厂的愿望。</p> \n<p>实习半年，做机器翻译，和学校里完全不一样，不过都是相通的。</p> \n<p>转正也挺顺利的，有幸留下，继续和优秀的人做有挑战的事。</p> \n<h2 id=\"社交\"><a href=\"#社交\" class=\"headerlink\" title=\"社交\"></a>社交</h2>\n<p>也是因为疫情在家，闲着没事干吧，刷起了leetcode，没曾想之后正好要面试。</p> \n<p>重拾了公众号，每日题解也写了110多天，也算是坚持比较久的一件事了吧。</p> \n<p>粉丝涨的慢慢悠悠，我不急，它也不急。</p> \n<p>什么时候写文章副业赚的钱能抵得上工资，也许就能35岁退休了吧。</p> \n<h2 id=\"旅游\"><a href=\"#旅游\" class=\"headerlink\" title=\"旅游\"></a>旅游</h2>\n<p>毕业正式工作后估计也没啥时间了，趁着这段时间没啥事，和兄弟去北京游玩了几天。</p> \n<p>几天体验下来，说实在的，更喜欢上海一点，夜晚更亮，更热闹一点。</p> \n<p>这次时间比较短，等论文搞完，去南方再多玩会儿吧，希望到时候一起的不是兄弟。</p> \n<h2 id=\"缘分\"><a href=\"#缘分\" class=\"headerlink\" title=\"缘分\"></a>缘分</h2>\n<p>缘分这事，说来就来，说走就走；实习来了，实习又走了。</p> \n<p>有时候不会去想合不合适，有时候又会觉得确实不合适。</p> \n<p>也许进一步会有个结果，也许再也没有也许了。</p> \n<p>有时候会想是不是单身久了会让人变怂，有时候发现也许这就是自卑吧。</p> \n<p>也许这就是进一步舔狗，退一步一无所有吧。</p> \n<p>等一个有缘人，一个合适的人，一个对上眼的人。</p> \n<p>要求不多，懂事就好。</p> \n<h2 id=\"未来\"><a href=\"#未来\" class=\"headerlink\" title=\"未来\"></a>未来</h2>\n<p>我不知道以后的我会是什么样子，也许两点一线，租房，公司，除了工作就是睡觉和游戏。</p> \n<p>关于未来，我只要一个大房子，一只猫，一个她，足矣。</p> \n<blockquote> \n <p>二十五了，不小了。</p> \n</blockquote>', '2021-04-13 12:14:43', '5.7k', 5, 1673);
INSERT INTO `t_article` VALUES ('a694eb62e27344dcb8892b44f910e2fc', '编程算法', 15, '每日算法系列【LeetCode 810】黑板异或游戏', 'https://picsum.photos/1920/1080?random&rand=0.8817582012317007', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述一个黑板上写着一个非负整数数组 nums[i] 。小红和小明轮流从黑板上擦掉一个数字，小红先手。如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>一个黑板上写着一个非负整数数组 nums[i] 。小红和小明轮流从黑板上擦掉一个数字，小红先手。如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。 (另外，如果只剩一个数字，按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为 0。）</p> \n<p>换种说法就是，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。</p> \n<p>假设两个玩家每步都使用最优解，当且仅当小红获胜时返回 true。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1, 1, 2]\n输出：\nfalse\n解释：\n小红有两个选择: 擦掉数字 1 或 2。\n如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么小明可以擦掉任意数字，因为小红会成为擦掉最后一个数字的人，她总是会输。\n如果小红擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。小红仍然会输掉游戏。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= N &lt;= 1000</li> \n <li>0 &lt;= nums[i] &lt;= 2^16</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>小红获胜的条件就是，某一步轮到她的时候，所有数异或等于 0 。</p> \n<p>而反过来，她输的条件就是，面对 n 个数，无论她选哪个数，去掉这个数之后剩下的数的异或都等于 0 。</p> \n<p>假设 n 个数的异或为 S ，也就是令：<br>$$<br>S = x_1 \\oplus x_2 \\oplus \\dots \\oplus x_n<br>$$<br>因为两个相同的数的异或为 0 ，所以去掉任意一个数 $x_i$ 之后的异或为 $S \\oplus x_i = 0$ ，所以 $S = x_i$ ，也就是所有的数都相等。</p> \n<p>此时如果 n 是偶数，那么 n 个数的异或必为 0 ，和小红必输矛盾了，所以 n 一定要是奇数。</p> \n<p>也就是说，如果 n 是偶数，那么小红总有办法去掉一个数，然后使得剩下的数异或不为 0 ，这时小明就没办法获胜。而不管小明擦除哪个数，轮到小红的时候个数又变成了偶数，小红就可以继续不输擦除下去。直到最后，一定是小红面对着空的数集，最终获胜。</p> \n<p>而 n 是奇数的时候，无论小红选什么数，小明面对的都是偶数个数，那么小明必胜。</p> \n<p>综上，n 是偶数小红必胜，或者刚开始 n 个数异或就是 0 ，这样不管奇偶，小红都能获胜。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">xorGame</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> i <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> x <span class=\"token operator\">^</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> functools <span class=\"token keyword\">import</span> reduce\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">xorGame</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">or</span> reduce<span class=\"token punctuation\">(</span>operator<span class=\"token punctuation\">.</span>xor<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>官方题解是这么说的：如果 n 是偶数，那么小红有很大概率获胜，因为如果游戏能够一直进行下去，小明将会是擦除最后一个数的人，轮到小红时黑板上已经没有数，小红获胜。然后再推测 n 是偶数情况下的必胜条件，但是这样带有一点先猜后验证的成分。</p> \n<p>所以我的推测方法直接从必胜条件出发，推测出 n 是偶数，这样过渡自然，更符合思考的路线。</p>', '2021-10-03 14:17:23', '6.3k', 4, 3383);
INSERT INTO `t_article` VALUES ('a75d5d161b634316b5ab788c2805f59c', '编程算法', 6, '【每日算法Day 72】谷歌面试题：又双叒叕是位运算，最详细的自动机推导过程', 'https://picsum.photos/1920/1080?random&rand=0.49743207734270245', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 137. 只出现一次的数字 II 题目描述给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。 说明：你的', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/single-number-ii/\" title=\"LeetCode 137. 只出现一次的数字 II\" target=\"_blank\" rel=\"noopener\">LeetCode 137. 只出现一次的数字 II</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p> \n<p><strong>说明：</strong><br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[2,2,3,2]\n输出：\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[0,1,0,1,0,1,99]\n输出：\n99<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"逐位考虑\"><a href=\"#逐位考虑\" class=\"headerlink\" title=\"逐位考虑\"></a>逐位考虑</h3>\n<p>我们单独看二进制某一位，先不看单独的那个数，其他所有数字都出现了 3 次，所以那一位是 1 的个数一定是 3 的倍数。</p> \n<p>再考虑这个出现一次的数，如果这一位是 1 ，那么这一位 1 的次数模 3 为 1 ，否则的话模 3 就是 0 。</p> \n<p>那么就很简单了，统计一下有多少个数这一位上是 1 ，然后模 3 取余数，结果就是这个单独的数这一位上的值了。</p> \n<p>遍历 32 位整数的每一位，就可以得到这个单独的数是多少了。</p> \n<p><strong>推广到一般情况：</strong><br>如果其他数都出现了 $k$ 次，一个数出现了一次。那么如果 $k$ 是偶数，还是把所有的数异或起来就行了。如果 $k$ 是奇数，那么统计每一位是 1 的个数，然后模 $k$ 取余数就能得到那个单独的数了。</p> \n<h3 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h3>\n<p>我们还可以用自动机来做这题，根据某一位 1 的个数，我们可以得到如下的状态自动机：<br><img src=\"1.png\" alt><br>初始的时候在状态 0 （有 0 个 1），然后如果下一个数这一位是 1，就进入状态 1（有 1 个 1），接着如果下一个数这一位是 1，就进入状态 2（有 2 个 1），接着如果下一个数这一位是 1，就进入状态 3（有 3 个 1），最后如果再来了一个数这一位还是 1，就说明是一个新的数了，等价于回到了状态 1。而每个状态如果来的数这一位是 0 ，都会保持状态不变。</p> \n<p>当然这个自动机还可以简化，注意观察可以发现状态 3 和状态 0 是等价的（输入 0 都保持不变，输入 1 都会进入状态 1）。所以我们将状态 1 和状态 3 合并为一个状态 0 ，得到如下的状态自动机：<br><img src=\"2.jpg\" alt></p> \n<p>因为一共有三个状态，所以我们需要用两个变量来表示状态。用 <code>once</code> 表示是否在状态 1，用 <code>twice</code> 来表示是否在状态 2 。那么两个变量都为 0 就表示在状态 0 。然后可以得到如下的状态转移表：<br><img src=\"3.jpg\" alt></p> \n<p>注意观察 <code>once</code> 只有两种情况下转移后为 1 。一种是 <code>once=0, twice=0, x=1</code> ，另一种是 <code>once=1, twice=0, x=0</code> 。其他所有情况下 <code>once</code> 都转移为 0 。这两种情况都满足 <code>x^once=1</code> 并且 <code>twice=0</code> ，所以 <code>once</code> 的转移就是 <code>once = (x^once) &amp; (~twice)</code> 。</p> \n<p>同理，观察 <code>twice</code> 只有两种情况下转移后为 1 。一种是 <code>once=1, twice=0, x=1</code> ，另一种是 <code>once=0, twice=1, x=0</code> 。其他所有情况下 <code>twice</code> 都转移为 0 。这两种情况都满足 <code>x^twice=1</code> 并且 <code>once^twice=1</code> ，所以 <code>twice</code> 的转移就是 <code>twice = (x^twice) &amp; (once^twice)</code> 。<strong>但是</strong>！！！ <code>once</code> 已经抢先一步转移过了，所以值已经变掉了，一个解决方法就是用临时变量保存一下前一个状态的 <code>once</code> 值。另一个方法就是，这两种情况下，<code>once</code> 都会转移到 0 ，所以判断条件直接用转移后的 <code>once=0</code> 就行了，随后转移就是 <code>twice = (x^twice) &amp; (~once)</code> 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"逐位考虑（c-）\"><a href=\"#逐位考虑（c-）\" class=\"headerlink\" title=\"逐位考虑（c++）\"></a>逐位考虑（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">&gt;&gt;</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            res <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"位运算（c-）\"><a href=\"#位运算（c-）\" class=\"headerlink\" title=\"位运算（c++）\"></a>位运算（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">singleNumber</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> once <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> twice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            once <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>once<span class=\"token operator\">^</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>twice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            twice <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>twice<span class=\"token operator\">^</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>once<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> once<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"相关题目\"><a href=\"#相关题目\" class=\"headerlink\" title=\"相关题目\"></a>相关题目</h2>\n<p><a href=\"https://leetcode-cn.com/problems/single-number/\" title=\"LeetCode 136. 只出现一次的数字\" target=\"_blank\" rel=\"noopener\">LeetCode 136. 只出现一次的数字</a><br><a href=\"https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/\" title=\"LeetCode 面试题56 - I. 数组中数字出现的次数\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题56 - I. 数组中数字出现的次数</a><br><a href=\"https://leetcode-cn.com/problems/missing-two-lcci/\" title=\"LeetCode 面试题 17.19. 消失的两个数字\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 17.19. 消失的两个数字</a></p>', '2019-11-12 02:42:04', '3.2k', 6, 9550);
INSERT INTO `t_article` VALUES ('ad369e9c44724501bd1a092b5bb57b7d', '编程算法', 12, '每日算法系列【LeetCode 42】接雨水', 'https://picsum.photos/1920/1080?random&rand=0.6372018485275676', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p> \n<p><img src=\"1.png\" alt></p> \n<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。感谢 Marcos 贡献此图。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[0,1,0,2,1,0,1,3,2,1,2,1]\n输出：\n6<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"方法1（按列算）\"><a href=\"#方法1（按列算）\" class=\"headerlink\" title=\"方法1（按列算）\"></a>方法1（按列算）</h3>\n<p>这也是最容易理解的一种方法，我们计算每一个柱子上方的水最多有多高就行了，而这个高度取决于它的左右两边最高的柱子分别是多高。</p> \n<p>当然可以暴力求左右两端最高的高度了，不过其实只需要预处理一下，用数组保存一下每个位置左右两端最高的高度就行了。</p> \n<p>最后答案的话就是用左右两边最高高度的较小值，减去这根柱子的高度。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ ，需要扫描两遍数组。</p> \n<h3 id=\"方法2（按行算）\"><a href=\"#方法2（按行算）\" class=\"headerlink\" title=\"方法2（按行算）\"></a>方法2（按行算）</h3>\n<p>我们可以发现，每一行水左右肯定都会被柱子卡住（显然是废话）。那么从左向右遍历柱子，如果高度在下降，那么显然不会蓄水。如果高度上升了，那就说明中间是个低点，这之间可以蓄水。而这个下降的高度用单调栈来维护就行了，栈里我们只放下标。</p> \n<p>那到底蓄水多少呢？假设 q 是栈顶下标，p 是栈顶第二个元素下标，那么一定有 $h[p] \\ge h[q]$ 。现在进来一个 $h[i] &gt; h[q]$ ，那么 q 就是一个低点，而 p ， q ， i 之间的蓄水（比 $h[q]$ 高，比 $h[p]$ 和 $h[i]$ 都低的部分）可以计算为 $(\\min(h[p], h[i]) - h[q])\\cdot(i - p - 1)$ 。然后把 q 出栈，继续用栈顶两个元素计算。</p> \n<p>那么为什么这里只需要计算 p 和 i 之间比 $h[q]$ 高的那部分矩形就行了呢？因为比它低的部分在之前都已经算过了，而比它高的部分在之后还会计算到。</p> \n<p>用下面这张示意图可以看的更清楚一点：</p> \n<p><img src=\"1.jpg\" alt></p> \n<p>红色表示栈里的元素，白色表示已经出栈了，绿色表示当前准备进栈的元素。那么这时候我们上面求的就是 3 号水块的面积，而 1 和 2 水块在之前进栈操作中就已经求出来了， 4 水块的话在之后（q 出栈，p 和 i 进行比较）也会被计算到。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ ，需要扫描一遍数组，但是每个元素会入栈再出栈，所以操作次数和方法1其实是一样的。</p> \n<h3 id=\"方法3（双指针优化方法1）\"><a href=\"#方法3（双指针优化方法1）\" class=\"headerlink\" title=\"方法3（双指针优化方法1）\"></a>方法3（双指针优化方法1）</h3>\n<p>方法 1 中，我们需要用到一个额外数组来保存左右两边的最大值，其实我们可以用双指针法来规避这个问题。</p> \n<p>考虑用两个指针 l 和 r 分别从最左和最右端往中间靠拢，同时用 lmax 记录 l 左边的最高高度，用 rmax 记录 r 右边的最高高度。</p> \n<p>此时如果 $h[l] &lt; h[r]$ ，那么我们计算 l 处能蓄水多高，如果 $h[l] \\ge h[r]$ ，我们计算 r 处蓄水多高。这样我们时刻只计算低的那边的答案，就能保证 l 两边的最高处较小值一定是 lmax ，r 两边同理。为什么呢？你模拟一遍左右切换的过程就会发现，当 $h[l] &gt; h[r]$ 的时候，切换到计算 r 那边去了，再继续等到 $h[r] &gt; h[l]$ 的时候，又切回计算 l 这边了，所以两端 l 和 r 的值始终保证：当它固定不动，计算另一端高度时，它一定是这一边最高的。</p> \n<p>那么如果 $h[l] &lt; h[r]$ ，我们怎么计算 $h[l]$ 处蓄水多高呢？如果 $h[l] \\ge lmax$ ，那么 l 处根本就没法蓄水，因为它是最高的，所以更新 lmax 就行了。否则的话 l 两边最大高度较小值一定是 lmax ，还是按照方法 1 那样计算就行了。</p> \n<p>这样的话，就不需要额外维护一个高度数组了。时间复杂度 $O(n)$ ，空间复杂度 $O(1)$。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"方法1（c-）\"><a href=\"#方法1（c-）\" class=\"headerlink\" title=\"方法1（c++）\"></a>方法1（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">lmax</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            lmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> rmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            rmax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>rmax<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rmax<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法2（c-）\"><a href=\"#方法2（c-）\" class=\"headerlink\" title=\"方法2（c++）\"></a>方法2（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> height<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法3（c-）\"><a href=\"#方法3（c-）\" class=\"headerlink\" title=\"方法3（c++）\"></a>方法3（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> height<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> lmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> lmax<span class=\"token punctuation\">)</span> lmax <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> lmax <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> rmax<span class=\"token punctuation\">)</span> rmax <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> rmax <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法1（python）\"><a href=\"#方法1（python）\" class=\"headerlink\" title=\"方法1（python）\"></a>方法1（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span>\n        lmax <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            lmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> lmax<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        rmax<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            rmax <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>rmax<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">+=</span> min<span class=\"token punctuation\">(</span>lmax<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> rmax<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法2（python）\"><a href=\"#方法2（python）\" class=\"headerlink\" title=\"方法2（python）\"></a>方法2（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        st <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> height<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                mid <span class=\"token operator\">=</span> st<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n                st<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">break</span>\n                res <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> st<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            st<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"方法3（python）\"><a href=\"#方法3（python）\" class=\"headerlink\" title=\"方法3（python）\"></a>方法3（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">trap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> lmax<span class=\"token punctuation\">,</span> rmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> lmax<span class=\"token punctuation\">:</span>\n                    lmax <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    res <span class=\"token operator\">+=</span> lmax <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> rmax<span class=\"token punctuation\">:</span>\n                    rmax <span class=\"token operator\">=</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    res <span class=\"token operator\">+=</span> rmax <span class=\"token operator\">-</span> height<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n                r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题方法还是很多的，最好需要画个示意图，模拟一下运行过程。</p>', '2022-04-22 10:11:59', '7.2k', 2, 8895);
INSERT INTO `t_article` VALUES ('ad41fb8bcc6c4d2a9ec16ebe381d160b', '编程算法', 17, '每日算法系列【LeetCode 523】连续的子数组和', 'https://picsum.photos/1920/1080?random&rand=0.800462311493197', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个包含非负数的数组和一个目标整数 k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。 示例', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个包含非负数的数组和一个目标整数 k，编写一个函数来判断该数组是否含有连续的子数组，其大小至少为 2，总和为 k 的倍数，即总和为 n*k，其中 n 也是一个整数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[23,2,4,6,7], k = 6\n输出：\nTrue\n解释：\n[2,4] 是一个大小为 2 的子数组，并且和为 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[23,2,6,4,7], k = 6\n输出：\nTrue\n解释：\n[23,2,6,4,7]是大小为 5 的子数组，并且和为 42。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>数组的长度不会超过 10000 。</li> \n <li>你可以认为所有数字总和在 32 位有符号整数范围内。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h3>\n<p>直接枚举所有的区间，然后求出每个区间的和，看是不是 k 的整数倍就行了。这种方法时间复杂度是 $O(n^3)$ ，一定过不了的。</p> \n<h3 id=\"前缀和优化\"><a href=\"#前缀和优化\" class=\"headerlink\" title=\"前缀和优化\"></a>前缀和优化</h3>\n<p>还是枚举所有区间，但是预处理的时候把所有的前缀和保存到数组里，这样区间求和就可以直接计算出来了。最后时间复杂度是 $O(n^2)$ ，理论上应该还是没法通过，但是这题数据太弱，竟然勉强通过了。</p> \n<h3 id=\"求余优化\"><a href=\"#求余优化\" class=\"headerlink\" title=\"求余优化\"></a>求余优化</h3>\n<p>假设前缀和为 sum ，那么区间 [i, j] 的和就可以表示为 sum[j]-sum[i-1] ，如果它是 k 的倍数，就说明了 sum[j] 和 sum[i-1] 模 k 的余数是相同的。</p> \n<p>那么我们就可以提前把 sum 数组里的每个数都对 k 求余，然后看有没有两个余数是相同的，并且距离大于等于 2 就行了。</p> \n<p>这只需要用一个哈希表就可以判断一个数有没有在之前出现过了。如果一个数没有出现过，就把它的下标放进哈希表。否则的话就判断当前下标和哈希表中的下标差值，如果大于等于 2 ，就找到合法区间了，直接返回 true 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">checkSubarraySum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                mp<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> mp<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">checkSubarraySum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n        mp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        mp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            sum <span class=\"token operator\">+=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            sum <span class=\"token operator\">%=</span> k\n            <span class=\"token keyword\">if</span> sum <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> mp<span class=\"token punctuation\">:</span>\n                mp<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> mp<span class=\"token punctuation\">[</span>sum<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3>\n<p>c++ 有多种实现方法，可以用 map 、hash_map 、unordered_map 等多种数据结构。其中 hash_map 不在标准库里，这里没法使用。理论上 unordered_map 比 map 会快一点，但是实际运行中没有发现差别。</p>', '2022-04-22 14:09:05', '4.5k', 7, 9077);
INSERT INTO `t_article` VALUES ('adcd7fee096849ee921ec2e311cabb20', '编程算法', 13, '【每日算法Day 93】不用额外空间，你会旋转一个矩阵吗？', 'https://picsum.photos/1920/1080?random&rand=0.19971026831830518', '第 100 天时，我可能会对这 100 天以来的算法题进行一个总结，然后暂时停止更新 LeetCode 题解了。下一步可能更新 NLP 相关算法了，非常感谢大家每天的支持。 题目链接LeetCode 面试题 01.07. 旋转矩阵 题目', '<blockquote> \n <p>第 100 天时，我可能会对这 100 天以来的算法题进行一个总结，然后暂时停止更新 LeetCode 题解了。<br>下一步可能更新 NLP 相关算法了，非常感谢大家每天的支持。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/rotate-matrix-lcci/\" title=\"LeetCode 面试题 01.07. 旋转矩阵\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 01.07. 旋转矩阵</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 <code>4</code> 字节。请你设计一种算法，将图像旋转 <code>90</code> 度。</p> \n<p>不占用额外内存空间能否做到？</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">给定 matrix = \n[\n  [1,2,3],\n  [4,5,6],\n  [7,8,9]\n],\n原地旋转输入矩阵，使其变为:\n[\n  [7,4,1],\n  [8,5,2],\n  [9,6,3]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">给定 matrix =\n[\n  [ 5, 1, 9,11],\n  [ 2, 4, 8,10],\n  [13, 3, 6, 7],\n  [15,14,12,16]\n], \n原地旋转输入矩阵，使其变为:\n[\n  [15,13, 2, 5],\n  [14, 3, 4, 1],\n  [12, 6, 8, 9],\n  [16, 7,10,11]\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3>\n<p>可以发现，每个格子旋转四次之后都会回到原位。所以对于每个格子，我们只需要交换和它相关的一共四个格子的位置就行了。</p> \n<p>对于格子 <code>(i, j)</code> ，我们可以推算出它旋转后的三个新位置是 <code>(j, n-1-i), (n-1-i, n-1-j), (n-1-j, i)</code> 。所以只需要一个临时变量保存其中一个位置的值，然后按顺序交换位置就行了。</p> \n<p>当然为了避免重复旋转，我们只能枚举四分之一的格子，如果 <code>n</code> 是偶数，如下图所示，我们可以这么划分：</p> \n<p><img src=\"3.jpg\" alt></p> \n<p>如果 <code>n</code> 是奇数，可以如下图这么划分：</p> \n<p><img src=\"2.jpg\" alt></p> \n<p>当然你也可以不规则的划分，如下图这样，只是代码写起来有点费劲：</p> \n<p><img src=\"1.jpg\" alt></p> \n<h3 id=\"翻转\"><a href=\"#翻转\" class=\"headerlink\" title=\"翻转\"></a>翻转</h3>\n<p>这题还可以不通过模拟旋转来实现旋转。</p> \n<p>上面说过了，格子 <code>(i, j)</code> 旋转后的新位置是 <code>(j, n-1-i)</code> 。</p> \n<p>那么我们可以先沿着主对角线翻转矩阵，这样格子 <code>(i, j)</code> 位置就换到了 <code>(j, i)</code> 。</p> \n<p>然后再左右翻转一下矩阵，格子 <code>(j, i)</code> 就换到了 <code>(j, n-1-i)</code> ，正好等价于旋转后的位置！</p> \n<p>因为翻转每次只需要交换两个格子的位置，所以不需要任何额外变量。</p> \n<p>再提一个交换两个元素的小 trick ，如代码里注释的那样，可以采用异或操作来规避额外变量。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"旋转（c-）\"><a href=\"#旋转（c-）\" class=\"headerlink\" title=\"旋转（c++）\"></a>旋转（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"翻转（c-）\"><a href=\"#翻转（c-）\" class=\"headerlink\" title=\"翻转（c++）\"></a>翻转（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// swap(matrix[i][j], matrix[j][i]);</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">^</span><span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// swap(matrix[i][j], matrix[i][n-1-j]);</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"旋转（python）\"><a href=\"#旋转（python）\" class=\"headerlink\" title=\"旋转（python）\"></a>旋转（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> None<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                tmp <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span>\n                matrix<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span>\n                matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"翻转（python）\"><a href=\"#翻转（python）\" class=\"headerlink\" title=\"翻转（python）\"></a>翻转（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> None<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-03-04 21:45:52', '3.4k', 2, 1593);
INSERT INTO `t_article` VALUES ('ae2d9f2b4ed849e69c5d33917fe572c0', '编程算法', 25, '【每日算法Day 84】面试必考题：Trie（字典树/前缀树）的实现', 'https://picsum.photos/1920/1080?random&rand=0.9349961579804881', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 208. 实现 Trie (前缀树) 题目描述实现一个 Trie （前缀树），包含 insert, search, 和 startsWith 这三个操作。 示', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/implement-trie-prefix-tree/\" title=\"LeetCode 208. 实现 Trie (前缀树)\" target=\"_blank\" rel=\"noopener\">LeetCode 208. 实现 Trie (前缀树)</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>实现一个 Trie （前缀树），包含 <code>insert</code>, <code>search</code>, 和 <code>startsWith</code> 这三个操作。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">Trie trie = new Trie();\n\ntrie.insert(\"apple\");\ntrie.search(\"apple\");   // 返回 true\ntrie.search(\"app\");     // 返回 false\ntrie.startsWith(\"app\"); // 返回 true\ntrie.insert(\"app\");   \ntrie.search(\"app\");     // 返回 true<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li>你可以假设所有的输入都是由小写字母 $a-z$ 构成的。</li> \n <li>保证所有输入均为非空字符串。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>字典树主要支持<strong>插入字符串、查询字符串是否在字典树中、查询字典树中是否存在某个前缀</strong>等操作，我这里还额外实现了一下 c++ 版本的<strong>删除字符串</strong>操作。</p> \n<h3 id=\"初始化字典树\"><a href=\"#初始化字典树\" class=\"headerlink\" title=\"初始化字典树\"></a>初始化字典树</h3>\n<p>初始化的时候，根结点为空，不用来放任何字符，所有字符串都是从下一层子结点开始存储。</p> \n<p>每个结点有 26 个指针，指向下一层子结点，每个指针代表着下一个不同的字母。</p> \n<p>每个结点还保存了一个变量 <code>isEnd</code> ，用来表示该结点是不是某个字符串结束的位置。</p> \n<h3 id=\"插入字符串\"><a href=\"#插入字符串\" class=\"headerlink\" title=\"插入字符串\"></a>插入字符串</h3>\n<p>从根结点往下递归，如果字符串中下一个字母对应的子结点为空，那就新建一个结点再递归，否则的话就直接递归下去。</p> \n<p>最后把最后一个结点的 <code>isEnd</code> 设置为 1，表示这个结点是字符串的结束位置。</p> \n<h3 id=\"查询字符串\"><a href=\"#查询字符串\" class=\"headerlink\" title=\"查询字符串\"></a>查询字符串</h3>\n<p>从根结点往下递归查找，如果字符串还没遍历结束，但是结点已经空了，说明字符串不在字典树中。否则的话一直查找到最后一个字符，然后看对应结点的 <code>isEnd</code> 是 1 还是 0，如果是 1 ，就存在字符串，否则不存在。</p> \n<h3 id=\"查询字符串前缀\"><a href=\"#查询字符串前缀\" class=\"headerlink\" title=\"查询字符串前缀\"></a>查询字符串前缀</h3>\n<p>和查询字符串过程一模一样，唯一的区别就是最后不用看最后一个结点的 <code>isEnd</code> 了，直接返回 <code>true</code> 。因为既然都查询到了最后一个字符了，说明这个前缀一定存在。</p> \n<h3 id=\"删除字符串\"><a href=\"#删除字符串\" class=\"headerlink\" title=\"删除字符串\"></a>删除字符串</h3>\n<p>这个是我自己实现的，一般来说字典树很少用到删除操作。</p> \n<p>首先整体框架是和查询字符串类似的，从根结点往下递归查询，然后用一个栈保存查询到的结点。</p> \n<p>如果查询过程中直接遇到了空结点，就直接返回，因为都不存在字符串，就不用删除了。然后判断最后一个结点的类型。</p> \n<p>如果它的 <code>isEnd</code> 是 0，说明字符串不存在，那就直接返回不用删了。</p> \n<p>如果它不是叶子结点，说明后面还接着字符串呢，那也不用删了，只要把该结点的 <code>isEnd</code> 设置为 0 就行了。</p> \n<p>否则的话它就是叶子结点，那么就直接删除这个结点，并且从栈里出栈。</p> \n<p>然后从栈里最后一个结点开始删除，直到栈顶的结点不是叶子结点（表示字典树中存在删除字符串的相同前缀字符串）或者 <code>isEnd</code> 是 1（表示字典树中存在删除字符串的前缀子串）。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>具体实现上面，c++ 我采用的结构体指针来构建出了一颗树。而 python 我直接用的嵌套的字典，并没有真正的构建出树，只有一个类，这样还挺方便的，但是删除操作有点麻烦，暂时就不写了。</p> \n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> isEnd<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>Trie<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        next <span class=\"token operator\">=</span> vector<span class=\"token operator\">&lt;</span>Trie<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">~</span><span class=\"token function\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">:</span> next<span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Trie<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Trie</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        stack<span class=\"token operator\">&lt;</span>Trie<span class=\"token operator\">*</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        Trie<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>isEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>isEnd <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span>\n        st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isLeaf</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>isEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">delete</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>string word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Trie<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> word<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>isEnd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>string prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Trie<span class=\"token operator\">*</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c <span class=\"token operator\">:</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span>next<span class=\"token punctuation\">[</span>c<span class=\"token operator\">-</span><span class=\"token string\">\'a\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isLeaf</span><span class=\"token punctuation\">(</span>Trie<span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> p <span class=\"token operator\">:</span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Trie</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>nxt <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> None<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>nxt\n        <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> c <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">:</span>\n                node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n        node<span class=\"token punctuation\">[</span><span class=\"token string\">\'#\'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>nxt\n        <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> word<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> c <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\'#\'</span> <span class=\"token keyword\">in</span> node\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> bool<span class=\"token punctuation\">:</span>\n        node <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>nxt\n        <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> prefix<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> c <span class=\"token operator\">not</span> <span class=\"token keyword\">in</span> node<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">False</span>\n            node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2019-11-07 08:14:14', '9.6k', 7, 3992);
INSERT INTO `t_article` VALUES ('ae9c54b4b4e3436daeb93200c0bd0667', '编程算法', 23, '【每日算法Day 95】美团笔试题：四面体方案个数', 'https://picsum.photos/1920/1080?random&rand=0.5205914611901075', '今天就更新一道刚做的美团在线编程题吧。 题目描述一个四面体，顶点为 S, A, B, C。从 S 出发，每次任意选一条棱走到另一个顶点，可重复走过所有顶点和棱。问走 $k$ 次之后，回到 S 的方案数是多少？答案对 $1e9+7$ 取模', '<blockquote> \n <p>今天就更新一道刚做的美团在线编程题吧。</p> \n</blockquote> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>一个四面体，顶点为 <code>S, A, B, C</code>。从 <code>S</code> 出发，每次任意选一条棱走到另一个顶点，可重复走过所有顶点和棱。问走 $k$ 次之后，回到 <code>S</code> 的方案数是多少？答案对 $1e9+7$ 取模。</p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>明显这是一道动态规划题目，我们令 $dp[i][0]$ 表示走了 $i$ 次之后回到 <code>S</code> 的方案数，令 $dp[i][1]$ 表示走了 $i$ 次之后在 $A, B, C$ 的概率。注意到这里 <code>A, B, C</code> 是对称的，所以方案数应该完全相同，所以我们定义一个就行了。</p> \n<p>那么 $i$ 步回到 <code>S</code> 的方案数应该就是 $i-1$ 步在 <code>A, B, C</code> 的方案数之和：<br>$$<br>dp[i][0] = dp[i-1][1] * 3<br>$$</p> \n<p>$i$ 步在 <code>A</code> 的方案数就是 $i-1$ 步在 <code>B, C</code> 的方案数加上 $i-1$ 步在 <code>S</code> 的方案数：<br>$$<br>dp[i][1] = dp[i-1][1] * 2 + dp[i-1][0]<br>$$</p> \n<p>当然空间还可以优化，因为只跟上一步有关，所以保存上一步两个状态值就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n\nll dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"空间优化（c-）\"><a href=\"#空间优化（c-）\" class=\"headerlink\" title=\"空间优化（c++）\"></a>空间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n\nll dp<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> mod<span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lld\\n\"</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-11-05 07:33:38', '5.7k', 6, 7979);
INSERT INTO `t_article` VALUES ('b200c201341b47fbaff0ee5e486e3809', '编程算法', 24, '每日算法系列【LeetCode 881】救生艇', 'https://picsum.photos/1920/1080?random&rand=0.10943053015208026', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。 每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。 返回载到每一个人所需的', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>第 i 个人的体重为 people[i]，每艘船可以承载的最大重量为 limit。</p> \n<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为 limit。</p> \n<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npeople = [1,2], limit = 3\n输出：\n1\n解释：\n1 艘船载 (1, 2)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npeople = [3,2,2,1], limit = 3\n输出：\n3\n解释：\n3 艘船分别载 (1, 2), (2) 和 (3)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\npeople = [3,5,3,4], limit = 5\n输出：\n4\n解释：\n4 艘船分别载 (3), (3), (4), (5)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= people.length &lt;= 50000</li> \n <li>1 &lt;= people[i] &lt;= limit &lt;= 30000</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题第一直觉就是，对于一个人 people[i] 来说，装了他之后船上还剩 limit-people[i] 的空间，所以第二个人要尽量装能装得下的人中最重的那个。</p> \n<p>那如果直接这么遍历显然不行，时间复杂度是 $O(n^2)$ 的。所以我们先对重量进行排序，然后从最轻的人开始看，如果他能和最重的坐一个船，那就去掉他们俩，在剩下的人里继续找；如果不能的话，那么最重的人只能单独坐船，然后看能不能和第二重的人坐一个船，依次下去。</p> \n<p>具体实现上，只需要用两个指针，一个指着最小的数，一个指着最大的数就行了，时间复杂度是 $O(n)$ ，但是由于还得调用一次快速排序，所以最终时间复杂度是 $O(n \\log n)$ 。</p> \n<p>当然，因为这题重量范围比较小，所以如果采用计数排序，可以进一步降低时间复杂度。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"双指针（c-）\"><a href=\"#双指针（c-）\" class=\"headerlink\" title=\"双指针（c++）\"></a>双指针（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numRescueBoats</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> people<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">)</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"双指针（python）\"><a href=\"#双指针（python）\" class=\"headerlink\" title=\"双指针（python）\"></a>双指针（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numRescueBoats</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        people<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> people<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> people<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"计数排序（c-）\"><a href=\"#计数排序（c-）\" class=\"headerlink\" title=\"计数排序（c++）\"></a>计数排序（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numRescueBoats</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> people<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">sp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>limit<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sp<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">[</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">[</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sp<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">)</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"计数排序（python）\"><a href=\"#计数排序（python）\" class=\"headerlink\" title=\"计数排序（python）\"></a>计数排序（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">numRescueBoats</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> limit<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        sp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> len<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>limit <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> people<span class=\"token punctuation\">:</span>\n            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> limit <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> people<span class=\"token punctuation\">:</span>\n            sp<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n            count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        res<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> sp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sp<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> limit<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题注意写循环的时候也有技巧的，我们实现的时候，对于最大值 people[r] ，先给他分配一条船，再看最小的人能否和他一条船，如果可以，那就顺便带上（ l 加 1 ），如果不可以的话，那就 r 减 1 ，继续看下一个更重的人。</p>', '2022-03-20 10:15:54', '4.1k', 8, 5153);
INSERT INTO `t_article` VALUES ('b375382d45e24354ad164b64047cd9ca', '深度学习', 18, '【白话模型量化系列二】量化感知训练', 'https://picsum.photos/1920/1080?random&rand=0.01126306287381873', '关注公众号【算法码上来】，每日算法干货马上就来！ 上一篇我们讲解了矩阵乘法量化的基本原理，这一篇来讲解一下量化前需要做的一些准备工作——量化感知训练。 【白话模型量化系列一】矩阵乘法量化 什么是量化感知训练呢？简单来说就是，浮点数转整', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<p>上一篇我们讲解了矩阵乘法量化的基本原理，这一篇来讲解一下量化前需要做的一些准备工作——量化感知训练。</p> \n<p><a href=\"https://godweiyang.com/2021/11/25/int8-gemm\">【白话模型量化系列一】矩阵乘法量化</a></p> \n<p>什么是量化感知训练呢？简单来说就是，浮点数转整数的过程中会产生精度的损失。如果你直接强行转换，然后进行量化推理（这叫训练后量化），那模型效果肯定会下降。所以需要在训练的时候就加入量化操作，继续finetune一会儿，弥补这部分损失。</p> \n<p>回顾上一篇讲到的矩阵乘法量化过程，对于两个矩阵的乘法$C=AB$，可以先将$A$和$B$量化为整数矩阵$\\frac{s}{c_1}A$和$\\frac{s}{c_2}B$。</p>', '2020-05-23 14:00:26', '3.7k', 4, 6498);
INSERT INTO `t_article` VALUES ('b5ec718d0cf044bcb2021ea6a4f12105', '编程算法', 9, '【每日算法Day 61】LeetCode 672. 灯泡开关 Ⅱ', 'https://picsum.photos/1920/1080?random&rand=0.6070827985727667', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述现有一个房间，墙上挂有 $n$ 只已经打开的灯泡和 $4$ 个按钮。在进行了 $m$ 次未知操作后，你需要返回这 $n$ 只灯泡可能有多少种不同的状态。 假设这 $n$ 只灯泡', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>现有一个房间，墙上挂有 $n$ 只已经打开的灯泡和 $4$ 个按钮。在进行了 $m$ 次未知操作后，你需要返回这 $n$ 只灯泡可能有多少种不同的状态。</p> \n<p>假设这 $n$ 只灯泡被编号为 $[1, 2, 3 …, n]$，这 $4$ 个按钮的功能如下：</p> \n<ul> \n <li>将所有灯泡的状态反转（即开变为关，关变为开）</li> \n <li>将编号为偶数的灯泡的状态反转</li> \n <li>将编号为奇数的灯泡的状态反转</li> \n <li>将编号为 $3k+1$ 的灯泡的状态反转（$k = 0, 1, 2, \\ldots$)</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 1, m = 1.\n输出：\n2\n解释：\n状态为: [开], [关]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 2, m = 1.\n输出：\n3\n解释：\n状态为: [开, 关], [关, 开], [关, 关]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 3, m = 1.\n输出：\n4\n解释：\n状态为: [关, 开, 关], [开, 关, 开], [关, 关, 关], [关, 开, 开].<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$n$ 和 $m$ 都属于 $[0, 1000]$.</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先我们要知道，<strong>一个操作做两次就等于没做</strong>，所以一个操作只有<strong>没做</strong>和<strong>做了</strong>两种状态，也就是说有效操作数量最多 $4$ 次：$m = \\min{\\{m, 4\\}}$。</p> \n<p>然后我们观察每一个操作对灯状态（初始都开着，状态都为 $1$）的影响：</p> \n<ul> \n <li>操作 $1$ 每 $1$ 个灯状态就要反转一次，也就是灯的状态按照周期 $1$ 重复（与 $(1,\\ldots)$ 异或）。</li> \n <li>操作 $2$ 每 $2$ 个灯状态就要反转一次，也就是灯的状态按照周期 $2$ 重复（与 $(0,1,\\ldots)$ 异或）。</li> \n <li>操作 $3$ 每 $2$ 个灯状态就要反转一次，也就是灯的状态按照周期 $2$ 重复（与 $(1,0,\\ldots)$ 异或）。</li> \n <li>操作 $4$ 每 $3$ 个灯状态就要反转一次，也就是灯的状态按照周期 $3$ 重复（与 $(1,0,0,\\ldots)$ 异或）。</li> \n</ul> \n<p>综上，我们只需要取周期的最小公倍数 $6$ 就行了。也就是<strong>只需要看前 $6$ 盏灯的最终状态，就能唯一确定后面所有灯的最终状态</strong>。</p> \n<p>形式化表示，用 $a_i = \\{0, 1\\}$ 表示第 $i$ 个操作是否用过。那么对于第 $i$ 盏灯来说，它的最终状态可以表示为：<br>$$<br>s_i = 1 \\oplus a_1 \\oplus a_2 [i \\% 2 = 0] \\oplus a_3 [i \\% 2 = 1] \\oplus a_4 [i \\% 3 = 1]<br>$$<br>由此可以推出： $s_i = s_{i+6}$，也就是灯的最终状态以 $6$ 为周期。</p> \n<p>到此其实可以直接暴力枚举 $1 \\le n \\le 6, 1 \\le m \\le 4$ 的所有状态了，但是还是有优化空间的。</p> \n<p>如果我们列出前 $6$ 盏灯的状态：</p> \n<ul> \n <li>$s_1 = 1 \\oplus a_1 \\oplus a_3 \\oplus a_4$</li> \n <li>$s_2 = 1 \\oplus a_1 \\oplus a_2$</li> \n <li>$s_3 = 1 \\oplus a_1 \\oplus a_3$</li> \n <li>$s_4 = 1 \\oplus a_1 \\oplus a_2 \\oplus a_4$</li> \n <li>$s_5 = 1 \\oplus a_1 \\oplus a_3$</li> \n <li>$s_6 = 1 \\oplus a_1 \\oplus a_2$</li> \n</ul> \n<p>我们可以看出，<strong>如果前 $3$ 盏灯状态确定了，可以唯一确定出后 $3$ 盏灯状态</strong>。因此，我们只需要计算前 $3$ 盏灯有多少种状态就行了。</p> \n<p>最终经过枚举计算（$1 \\le n \\le 3, 0 \\le m \\le 4$）：</p> \n<ul> \n <li>如果 $m = 0$ ，那么就只有 $1$ 种状态（灯都开着）。</li> \n <li>否则如果 $n = 1$ ，那么有 $2$ 种状态。</li> \n <li>否则如果 $n = 2$ ，若 $m = 1$，就有 $3$ 种状态；若 $m \\ge 2$ ，就有 $4$ 种状态。</li> \n <li>否则如果 $n \\ge 3$ ，若 $m = 1$，就有 $4$ 种状态；若 $m = 2$ ，就有 $7$ 种状态；若 $m \\ge 3$ ，就有 $8$ 种状态。</li> \n</ul> \n<p>如果你实在不想手动计算，那你可以枚举所有的 $16$ 种操作状态，然后保存前三盏灯的状态到一个集合中，最终输出集合大小就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">flipLights</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        m <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">{</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">flipLights</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span>\n        m <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python（枚举）\"><a href=\"#python（枚举）\" class=\"headerlink\" title=\"python（枚举）\"></a>python（枚举）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">flipLights</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        seen <span class=\"token operator\">=</span> set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> cand <span class=\"token keyword\">in</span> itertools<span class=\"token punctuation\">.</span>product<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> repeat <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> sum<span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> m <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">and</span> sum<span class=\"token punctuation\">(</span>cand<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">:</span>\n                A <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    light <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n                    light <span class=\"token operator\">^</span><span class=\"token operator\">=</span> cand<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n                    light <span class=\"token operator\">^</span><span class=\"token operator\">=</span> cand<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">and</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span>\n                    light <span class=\"token operator\">^</span><span class=\"token operator\">=</span> cand<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">and</span> i <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n                    light <span class=\"token operator\">^</span><span class=\"token operator\">=</span> cand<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">and</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span>\n                    A<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>light<span class=\"token punctuation\">)</span>\n                seen<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>tuple<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">(</span>seen<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-07-01 17:34:21', '8.7k', 4, 8465);
INSERT INTO `t_article` VALUES ('b631b9e88bfe4c57bbd6351f84e4130d', '编程算法', 9, '每日算法系列【LeetCode 16】最接近的三数之和', 'http://47.96.31.161:9000/my-file/img71.jpg', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。假定每组输入只存在唯一答案。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [-1，2，1，-4], target = 1.\n输出：\n2\n解释：\n与 target 最接近的三个数的和为 2. (-1 + 2 + 1 = 2).<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>最暴力的方法就是直接枚举三个不同的数，然后求出差值最小的和，但是这样时间复杂度是 $O(n^3)$ ，太高了。</p> \n<p>那么我们先枚举一个数试试，并且假设它是最小的数，然后寻找比它大的两个数就行了，这就需要我们先对数组进行排序（假设排序后数组是 $a$ ）。</p> \n<p>如果枚举的数是 $a[i]$ ，那么我们只需要寻找和 $t - a[i]$ 差值最小的两个数之和就行了。</p> \n<p>如果用双指针的方法，初始时令 $l = i + 1$ ，同时 $r = n - 1$ 。那么如果 $a[i] + a[l] + a[r] &gt; t$ ，就说明 $r$ 太大了，需要左移。否则的话如果 $a[i] + a[l] + a[r] &lt; t$ ，就说明 $l$ 太小了，需要右移。在不断移动的过程中更新最小差值就行了，因为 $l$ 和 $r$ 最终一共只移动了 $O(n)$ 步，所以总的时间复杂度只有 $O(n \\log n + n^2)$ ，忽略低阶项之后只有 $O(n^2)$ ，还是可以接受的。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">threeSumClosest</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">10000000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>res<span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sum <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">)</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">threeSumClosest</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000000</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span>\n            <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n                s <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">if</span> s <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">return</span> s\n                <span class=\"token keyword\">if</span> abs<span class=\"token punctuation\">(</span>s<span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> abs<span class=\"token punctuation\">(</span>res<span class=\"token operator\">-</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    res <span class=\"token operator\">=</span> s\n                <span class=\"token keyword\">if</span> s <span class=\"token operator\">&gt;</span> target<span class=\"token punctuation\">:</span>\n                    r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 13:02:50', '6.9k', 3, 9571);
INSERT INTO `t_article` VALUES ('bc040db481384e18bbfe9fd9ec05917d', '编程算法', 10, '推荐几个不错的CUDA入门教程（非广告）', 'https://picsum.photos/1920/1080?random&rand=0.050620920853060025', '最近因为项目需要，入坑了CUDA，又要开始写很久没碰的C++了。对于CUDA编程以及它所需要的GPU、计算机组成、操作系统等基础知识，我基本上都忘光了，因此也翻了不少教程。这里简单整理一下，给同样有入门需求的同学们参考一下。 官方文档及', '<blockquote> \n <p>最近因为项目需要，入坑了CUDA，又要开始写很久没碰的C++了。对于CUDA编程以及它所需要的GPU、计算机组成、操作系统等基础知识，我基本上都忘光了，因此也翻了不少教程。这里简单整理一下，给同样有入门需求的同学们参考一下。</p> \n</blockquote> \n<h1 id=\"官方文档及书籍\"><a href=\"#官方文档及书籍\" class=\"headerlink\" title=\"官方文档及书籍\"></a>官方文档及书籍</h1>\n<p>英文好、时间充裕的同学可以精读官方文档或者著作。</p> \n<h2 id=\"NVIDIA-CUDA-C-Programming-Guide\"><a href=\"#NVIDIA-CUDA-C-Programming-Guide\" class=\"headerlink\" title=\"NVIDIA CUDA C++ Programming Guide\"></a>NVIDIA CUDA C++ Programming Guide</h2>\n<p><strong>地址：</strong><br><a href=\"https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html</a></p> \n<p>这是英伟达官方的CUDA编程教程，但是我英文一般，简单过了一遍之后感觉很多细节没讲，有一定的跳跃性，所以我看完还是很朦胧。</p> \n<h2 id=\"CUDA-C-Best-Practices-Guide\"><a href=\"#CUDA-C-Best-Practices-Guide\" class=\"headerlink\" title=\"CUDA C++ Best Practices Guide\"></a>CUDA C++ Best Practices Guide</h2>\n<p><strong>地址：</strong><br><a href=\"https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html\" target=\"_blank\" rel=\"noopener\">https://docs.nvidia.com/cuda/cuda-c-best-practices-guide/index.html</a></p> \n<p>这也是英伟达官方的CUDA编程教程，不过侧重点在实践方面，比如如何编程才能最大化利用GPU特性提升性能，建议基础打好之后再来看这个。</p> \n<h2 id=\"CUDA-C编程权威指南\"><a href=\"#CUDA-C编程权威指南\" class=\"headerlink\" title=\"CUDA C编程权威指南\"></a>CUDA C编程权威指南</h2>\n<p>这么经典的书就不用我多说了，英文原版叫《Professional CUDA C Programming》，pdf地址在下面，如果打开比较慢的可以后台回复【cuda】获取pdf文件：<br><a href=\"http://www.hds.bme.hu/~fhegedus/C++/Professional%20CUDA%20C%20Programming.pdf\" target=\"_blank\" rel=\"noopener\">http://www.hds.bme.hu/~fhegedus/C++/Professional%20CUDA%20C%20Programming.pdf</a></p> \n<h1 id=\"个人博客\"><a href=\"#个人博客\" class=\"headerlink\" title=\"个人博客\"></a>个人博客</h1>\n<p>像我这种英文差、想快速入门的只能找找中文博客看看了，还是找到不少非常奈斯的教程的。</p> \n<h2 id=\"谭升的博客（强推！！！）\"><a href=\"#谭升的博客（强推！！！）\" class=\"headerlink\" title=\"谭升的博客（强推！！！）\"></a>谭升的博客（强推！！！）</h2>\n<p><strong>地址：</strong><br><a href=\"https://face2ai.com/program-blog/#GPU编程（CUDA）\" target=\"_blank\" rel=\"noopener\">https://face2ai.com/program-blog/#GPU编程（CUDA）</a></p> \n<p>这是我最近发现的又一个宝藏博主，看完他的GPU编程系列教程后感觉豁然开朗，很多底层的原理和细节都通彻了，<strong>强烈安利！</strong></p> \n<p>他在github还开源了教程对应的示例代码：<br><a href=\"https://github.com/Tony-Tan/CUDA_Freshman\" target=\"_blank\" rel=\"noopener\">https://github.com/Tony-Tan/CUDA_Freshman</a></p> \n<h2 id=\"CUDA编程入门极简教程\"><a href=\"#CUDA编程入门极简教程\" class=\"headerlink\" title=\"CUDA编程入门极简教程\"></a>CUDA编程入门极简教程</h2>\n<p><strong>地址：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/34587739\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/34587739</a></p> \n<p>速览即可，看完就会写最简单的CUDA代码了。</p> \n<h2 id=\"《CUDA-C-Programming-Guide》-《CUDA-C-编程指南》-导读\"><a href=\"#《CUDA-C-Programming-Guide》-《CUDA-C-编程指南》-导读\" class=\"headerlink\" title=\"《CUDA C Programming Guide》(《CUDA C 编程指南》)导读\"></a>《CUDA C Programming Guide》(《CUDA C 编程指南》)导读</h2>\n<p><strong>地址：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/53773183\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/53773183</a></p> \n<p>这是NVIDIA CUDA C++ Programming Guide和《CUDA C编程权威指南》两者的中文解读，加入了很多作者自己的理解，对于快速入门还是很有帮助的。但还是感觉细节欠缺了一点，建议不懂的地方还是去看原著。</p> \n<h2 id=\"CUDA编程入门系列\"><a href=\"#CUDA编程入门系列\" class=\"headerlink\" title=\"CUDA编程入门系列\"></a>CUDA编程入门系列</h2>\n<p><strong>地址：</strong><br><a href=\"https://zhuanlan.zhihu.com/p/97044592\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/97044592</a></p> \n<p>这位大佬写了六篇，主要是通过一个简单的加法的例子，一步步讲了CUDA优化的若干种方法，拿来上手实践一下还是很棒的。</p> \n<h2 id=\"CUDA编程系列\"><a href=\"#CUDA编程系列\" class=\"headerlink\" title=\"CUDA编程系列\"></a>CUDA编程系列</h2>\n<p><strong>地址：</strong><br><a href=\"https://blog.csdn.net/sunmc1204953974/article/details/51000970\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/sunmc1204953974/article/details/51000970</a></p> \n<p>这个系列写的也是很全了，十几篇，建议快速通读一下。</p> \n<h1 id=\"开源代码\"><a href=\"#开源代码\" class=\"headerlink\" title=\"开源代码\"></a>开源代码</h1>\n<p>有很多的CUDA源码可以供我们慢慢学习，我这就简单给几个典型的Transformer系列的加速代码了。</p> \n<h2 id=\"LightSeq\"><a href=\"#LightSeq\" class=\"headerlink\" title=\"LightSeq\"></a>LightSeq</h2>\n<p><strong>地址：</strong><br><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">https://github.com/bytedance/lightseq</a></p> \n<p>这是字节跳动开源的生成模型推理加速引擎，BERT、GPT、VAE等等全都支持，速度也是目前业界最快的之一。</p> \n<h2 id=\"FasterTransformer\"><a href=\"#FasterTransformer\" class=\"headerlink\" title=\"FasterTransformer\"></a>FasterTransformer</h2>\n<p><strong>地址：</strong><br><a href=\"https://github.com/NVIDIA/DeepLearningExamples/tree/master/FasterTransformer\" target=\"_blank\" rel=\"noopener\">https://github.com/NVIDIA/DeepLearningExamples/tree/master/FasterTransformer</a></p> \n<p>这是英伟达开源的Transformer推理加速引擎。</p> \n<h2 id=\"TurboTransformers\"><a href=\"#TurboTransformers\" class=\"headerlink\" title=\"TurboTransformers\"></a>TurboTransformers</h2>\n<p><strong>地址：</strong><br><a href=\"https://github.com/Tencent/TurboTransformers\" target=\"_blank\" rel=\"noopener\">https://github.com/Tencent/TurboTransformers</a></p> \n<p>这是腾讯开源的Transformer推理加速引擎。</p> \n<h2 id=\"DeepSpeed\"><a href=\"#DeepSpeed\" class=\"headerlink\" title=\"DeepSpeed\"></a>DeepSpeed</h2>\n<p><strong>地址：</strong><br><a href=\"https://github.com/microsoft/DeepSpeed\" target=\"_blank\" rel=\"noopener\">https://github.com/microsoft/DeepSpeed</a></p> \n<p>这是微软开源的深度学习分布式训练加速引擎。</p> \n<blockquote> \n <p>我mentor说，不需要看这些，然后甩给了我20行代码，说看懂了就行了。结果我看懂了，门还是没开QAQ，所以建议还是看看底层一些的原理，加深自己的理解，特别是我强推的那篇博客。</p> \n</blockquote>', '2022-04-22 17:16:29', '9.2k', 5, 5694);
INSERT INTO `t_article` VALUES ('bc3e8e785a284004932b63229d95517f', '随笔', 18, '二零二一年终总结', 'https://picsum.photos/1920/1080?random&rand=0.9571521301785045', '关注公众号【算法码上来】，每日算法干货马上就来！ 今天是12.13，一晃二十六周岁了。从2017年开始，每年都会简单总结一下一年中经历的事情，不知不觉已经五年了。 二零一七年终总结二零一八年终总结二零一九年终总结二零二零年终总结 回顾', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<p>今天是12.13，一晃二十六周岁了。从2017年开始，每年都会简单总结一下一年中经历的事情，不知不觉已经五年了。</p> \n<p><a href=\"https://godweiyang.com/2018/01/22/2017-conclusion/\">二零一七年终总结</a><br><a href=\"https://godweiyang.com/2018/12/31/2018-conclusion/\">二零一八年终总结</a><br><a href=\"https://godweiyang.com/2019/12/13/2019-conclusion/\">二零一九年终总结</a><br><a href=\"https://godweiyang.com/2020/12/13/2020-conclusion/\">二零二零年终总结</a></p> \n<p>回顾过去五年，从大三到今年毕业正式工作，好像干了很多事情，又好像什么都没干。也就混到硕士毕业，侥幸发了篇ACL，然后又侥幸进入字节从事新的研究方向。这五年来唯一不变的可能就是一直在打英雄联盟吧，还是当年的开黑队友，还是熟悉的味道。</p> \n<p>2021年是正式成为社会人的一年，从校园老油条蜕变为了职场萌新。总结下来就是，上半年在忙着毕业，下半年在忙着开发LightSeq。</p> \n<p>今年过年在上海度过了人生第一个不在家的春节，一是因为疫情回去要做核酸，二是因为毕业论文没多久要交了。连编带凑，花了将近一个月赶出了一篇像模像样的毕业论文。后面的毕业流程走的出乎意料的快，导师也没怎么修改，短短数周就答辩结束，仿佛学校盼着我们早日离校步入社会。拿完优秀毕业生、优秀毕业论文和国家奖学金，实验室最后聚了聚餐，接着就正式毕业了。</p> \n<p><a href=\"https://godweiyang.com/2021/05/21/master-graduate/\">七年师大，青春永不毕业</a></p> \n<p><img src=\"1.jpg\" alt=\"春节生怕饿死，囤的食物\"></p> \n<p><img src=\"2.jpg\" alt=\"上海市优秀毕业生\"></p> \n<p>学校里的事就这么多了，主要精力还是在公司里。上半年进一步完善LightSeq推理引擎，写了很多文章对LightSeq进行了大量的介绍和宣传，也给很多想入门CUDA和模型加速的同学科普了基本的知识。</p> \n<p><a href=\"https://godweiyang.com/2021/03/28/nn-cuda-example/\">熬了几个通宵，我写了份CUDA新手入门代码</a></p> \n<p><a href=\"https://godweiyang.com/2021/04/13/lightseq-python-usage/\">只用两行代码，我让Transformer推理加速了10倍</a></p> \n<p><img src=\"3.jpg\" alt=\"LightSeq star数嗖嗖上涨\"></p> \n<p>还在NAACL 2021上发表了一篇关于LightSeq推理引擎相关技术的论文，进行了技术沉淀，推理引擎的开发也算是告一段落了。</p> \n<p><a href=\"https://arxiv.org/abs/2010.13887\" target=\"_blank\" rel=\"noopener\">论文地址：LightSeq: A High Performance Inference Library for Transformers</a></p> \n<p>今年最重要的工作内容要数LightSeq训练引擎了，从4月份开始，到6月份结束，历时三个月和同事们一起开发出了业界首个Transformer全流程训练加速引擎。训练引擎从0到1的整个过程我都有参与，这期间为了快速融入到项目的开发中，不得不自学了CUDA和模型加速的相关知识，这些之前在学校都是没有接触过的。项目开源后也投递了论文，虽然没有中，但也积累了不少经验，懂了一些系统领域会议论文的写法。leader还安排我去QCon大会进行了分享，宣传了一波LightSeq技术。</p> \n<p><a href=\"https://github.com/bytedance/lightseq\" target=\"_blank\" rel=\"noopener\">LightSeq源码</a></p> \n<p><a href=\"https://godweiyang.com/2021/06/21/lightseq2-introduction/\">训练加速3倍！字节跳动推出业界首个NLP模型全流程加速引擎</a></p> \n<p><a href=\"https://arxiv.org/abs/2110.05722\" target=\"_blank\" rel=\"noopener\">论文地址：LightSeq2: Accelerated Training for Transformer-based Models on GPUs</a></p> \n<p><img src=\"12.jpg\" alt=\"QCon分享\"></p> \n<p>目前的话在开发LightSeq量化推理，在不久的将来就会和大家正式见面，模型推理速度也将迈上一个新的台阶。</p> \n<p>生活方面，下半年重新开始做饭了，外卖一方面不卫生，一方面也吃腻了，不一定有自己做的好吃。不过租的房子厨房实在太小了，做一次饭都要收拾很久，经常也会不想做。限于篇幅，这里就只放几张图吧，更多的可以去我朋友圈围观。</p> \n<p><img src=\"7.jpg\" alt=\"炸薯条\"><br><img src=\"8.jpg\" alt=\"可乐鸡翅、玉米排骨汤\"><br><img src=\"10.jpg\" alt=\"糖醋排骨\"></p> \n<p>虽然房子小，10月底家里还是新增了一员，我从师兄家抱回了一只布偶猫。养猫给我的生活新增了不少乐趣，没事的时候可以撸一撸。但也带来了很多麻烦，猫经常乱拉，晚上睡觉吵人，每天要铲屎喂粮，就和带一个孩子一样。可能是我给他吃的太好了吧，才6个月左右就已经长到10斤了。</p> \n<p><img src=\"11.jpg\" alt=\"安静的美男子\"></p> \n<p>情感方面依旧维持原样，虽然有过小插曲，但都不合适。</p> \n<p>今年给我最大的感觉就是，工作了之后时间变快了，生活变单调了。尤其是取消大小周之后，每周都过得好快，每次还没恍过神就又到下一个周末了。这可能也和我比较宅有关，每周末除了打游戏，就还是打游戏。睡眠时间也依旧很晚，不断摧残自己的身体。</p> \n<p>对于2022年，最大的心愿还是把工作做好，先把模型量化做完善了，争取早日晋升，希望LightSeq的star早日能上3000。然后继续做好菜、养好猫，快乐游戏每一天。文章最近更新的也没有以前频繁了，得勤快一点了。</p>', '2022-04-22 22:24:51', '6.0k', 2, 6260);
INSERT INTO `t_article` VALUES ('be389f1f25ac41e6a1e292810bc9e56f', '编程算法', 26, '每日算法系列【LeetCode 面试题 17.05】字母与数字', 'https://picsum.photos/1920/1080?random&rand=0.8307410975495197', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个放有字符和数字的数组，找到最长的子数组，且包含的字符和数字的个数相同。 返回该子数组，若不存在这样的数组，返回一个空数组。 示例1 输入： [\"A\",\"1\",\"B\",\"', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个放有字符和数字的数组，找到最长的子数组，且包含的字符和数字的个数相同。</p> \n<p>返回该子数组，若不存在这样的数组，返回一个空数组。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\"A\",\"1\",\"B\",\"C\",\"D\",\"2\",\"3\",\"4\",\"E\",\"5\",\"F\",\"G\",\"6\",\"7\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\"]\n输出：\n[\"A\",\"1\",\"B\",\"C\",\"D\",\"2\",\"3\",\"4\",\"E\",\"5\",\"F\",\"G\",\"6\",\"7\"]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\"A\",\"A\"]\n输出：\n[]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>array.length &lt;= 100000</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>回忆之前做过的一道题目：<a href=\"https://godweiyang.com/2020/02/02/leetcode-523/\">每日算法系列【LeetCode 523】连续的子数组和</a>，是不是有点相似？那道题是要求是否含有总和为 $k$ 的整数倍的连续子数组。而本题要求的是最长的子数组，满足数字和字母个数相等。</p> \n<p>我们可以把字母抽象成 $-1$ ，数字抽象成 $1$ ，那么子数组的总和含义就是数字个数与字母个数的差值。假设子数组 $[l, r]$ 是满足字母个数和数字个数相等的，那么这段子数组总和必然是 $0$ 。如果我们用前缀和来进行优化的话，$sum[r] - sum[l-1] = 0$ ，也就是说 $sum[r]$ 和 $sum[l-1]$ 的值是相等的。</p> \n<p>所以我们只需要求一遍前缀和，如果 $sum[i]$ 没有在之前出现过，那就保存一下 $sum[i]$ 最开始出现的下标是 $i$ 。否则的话就看一下当前子数组长度 $i - sum[i]$ 和历史最优的长度 $r - l$ 谁大，然后决定更不更新。</p> \n<p>实际实现中 c++ 还是可以采用 <code>unordered_map</code> 来当作哈希表保存下标。</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span> <span class=\"token function\">findLongestSubarray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unordered_map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> mp<span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l <span class=\"token operator\">&lt;</span> i<span class=\"token operator\">-</span>mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    l <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    r <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findLongestSubarray</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        mp <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n        cnt<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> s <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            cnt <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> cnt <span class=\"token keyword\">in</span> mp<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> r<span class=\"token operator\">-</span>l <span class=\"token operator\">&lt;</span> i<span class=\"token operator\">-</span>mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    l <span class=\"token operator\">=</span> mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n                    r <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                mp<span class=\"token punctuation\">[</span>cnt<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i\n        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-12-05 11:53:02', '6.9k', 3, 1471);
INSERT INTO `t_article` VALUES ('bfde5ed349db430dbebbbf08f07ef4eb', '深度学习', 38, '【白话模型量化系列一】矩阵乘法量化', 'https://picsum.photos/1920/1080?random&rand=0.9465404481640488', '模型量化是模型加速方向一个很重要的方法，主要思想就是用int8数据格式来存储和进行计算。这样做有两点好处： 可以减小模型存储的体积。原本float32存储需要4个字节，现在int8存储只需要1个字节，体积是原来的1/4。 可以加快计算速度', '<p>模型量化是模型加速方向一个很重要的方法，主要思想就是用int8数据格式来存储和进行计算。这样做有两点好处：</p> \n<ol> \n <li>可以减小模型存储的体积。原本float32存储需要4个字节，现在int8存储只需要1个字节，体积是原来的1/4。</li> \n <li>可以加快计算速度。这主要是因为int8数据的读写更快，并且int8矩阵乘法一般来说会更快一点。</li> \n</ol> \n<p>以现在最常用的Transformer模型来举例，在使用CUDA推理加速库（例如LightSeq）之后，矩阵乘法的占比高达将近90%。所以优化非矩阵乘法的速度意义不是很大了，占比不高，你算得再快对整体的提速也很小，因此可以尝试优化矩阵乘法。</p> \n<p>那么我们考虑浮点数矩阵乘法$C = AB$，如何将它转化为整数矩阵乘法，并且得到几乎相同的乘法结果呢？</p> \n<h2 id=\"用整数矩阵来表示浮点数矩阵\"><a href=\"#用整数矩阵来表示浮点数矩阵\" class=\"headerlink\" title=\"用整数矩阵来表示浮点数矩阵\"></a>用整数矩阵来表示浮点数矩阵</h2>\n<p>首先我们需要将一个浮点数矩阵$A$用整数矩阵$A_I$来表示。我们假设$A$的数值范围在$[-c_1, c_1]$之间，其实这个假设是合理的，例如一般深度学习模型参数初始化都是正态分布，那么数值范围就在$[-1, 1]$之间。然后整数矩阵$A_I$的数值范围其实就是有符号整数的表示范围$[-128， 127]$，为了实现的简单，我们只量化到$[-127, 127]$，这样就和$A$一样关于零点左右对称了。我们令$s = 127$，用来表示int8的数值范围，如果$s = 15$，那就是int4的范围了。</p> \n<p>接着整数矩阵$A_I$就可以表示为$A_I = int(\\frac{s}{c_1}A)$，也就是将浮点数区间$[-c_1, c_1]$里的数字等比例映射到整数区间$[-s, s]$，然后向最近的整数取整。同理，整数矩阵$B_I$可以表示为$B_I = int(\\frac{s}{c_2}B)$。</p> \n<p>这样我们就可以得到两个浮点数矩阵的整数表示，接下来就可以利用他们来进行整数矩阵乘法的转换。</p> \n<h2 id=\"转化为整数矩阵乘法\"><a href=\"#转化为整数矩阵乘法\" class=\"headerlink\" title=\"转化为整数矩阵乘法\"></a>转化为整数矩阵乘法</h2>\n<p>整数矩阵$A_I$还原为浮点数很简单，只需要$A = \\frac{c_1}{s}A_I$即可。但是注意$A_I$是取过整的，所以还原回去的$A$并不完全等于原始的$A$，是有误差的。举个通俗的例子，两个浮点数0.1和0.101经过量化都变成了整数13，但是还原回浮点数后全都变成了0.102，再也没法区分两个浮点数有什么不同了。</p> \n<p>所以回到原始的问题，浮点数矩阵乘法$C = AB$可以改写为$C = \\frac{c_1}{s}A_I \\frac{c_2}{s}B_I$，也就是$C = \\frac{c_1c_2}{s^2}A_I B_I$。</p> \n<p>那么就可以先计算整数矩阵乘法$A_I B_I$，然后得到整数的输出矩阵之后，乘上系数$\\frac{c_1c_2}{s^2}$，还原为浮点数矩阵。</p> \n<p>注意输入矩阵$A_I$和$B_I$都是int8的，但是乘法结果$A_I B_I$一定是int32的。</p> \n<h3 id=\"总结一下流程\"><a href=\"#总结一下流程\" class=\"headerlink\" title=\"总结一下流程\"></a>总结一下流程</h3>\n<ol> \n <li>输入两个浮点数矩阵$A$和$B$，先分别转化为各自的整数矩阵$A_I = int(\\frac{s}{c_1}A)$和$B_I = int(\\frac{s}{c_2}B)$。</li> \n <li>然后计算整数矩阵乘法结果$A_I B_I$。</li> \n <li>最后乘上系数还原为浮点数的乘法结果$C = \\frac{c_1c_2}{s^2}A_I B_I$。</li> \n</ol> \n<h2 id=\"进阶（relu激活函数）\"><a href=\"#进阶（relu激活函数）\" class=\"headerlink\" title=\"进阶（relu激活函数）\"></a>进阶（relu激活函数）</h2>\n<p>熟悉Transformer的同学应该知道，FFN第二层输入分别是relu的结果$A$和参数$B$。那么这里就存在一个问题，relu结果的数值范围是$[0, c_1]$，而不可能是$[-c_1, c_1]$。</p> \n<p>如果我们强行还按照$[-c_1, c_1]$的范围来量化relu结果$A$的话会怎么样呢？这样会导致整数区间$[-127, 0)$永远不会有数字，因为根本没有负数浮点数的存在。这样就白白浪费了127个整数，就会导致量化的精度大大受损。</p> \n<p>那按照$[0, c_1]$来量化的话，怎么计算整数矩阵乘法的结果呢？</p> \n<p>稍稍推导一下就可以得出，$A$可以表示为$A = \\frac{c_1}{2s}(A_I + s \\textbf{1})$，其中$\\textbf{1}$表示和$A$相同形状的全1矩阵。而$B$的话依然表示为$B = \\frac{c_2}{s}B_I$。</p> \n<p>这样矩阵乘法可以改写为$C = \\frac{c_1c_2}{2s^2}A_I B_I + \\frac{c_1c_2}{2s}\\textbf{1}B_I$。其中第二项因子可以用$B = \\frac{c_2}{s}B_I$来进一步简化，最终得到$C = \\frac{c_1c_2}{2s^2}A_I B_I + \\frac{c_1}{2}\\textbf{1}B$。</p> \n<p>第一项因子和之前一样，先算整数矩阵乘法$A_I B_I$，再乘上系数，只不过系数变成了$\\frac{c_1c_2}{2s^2}$。</p> \n<p>第二项因子$\\textbf{1}B$的维度和$C$相同，并且它的矩阵元素等于$B$中同一列的元素之和。那么问题就很简单了，我们只需要提前计算出矩阵$B$每一列的元素和，再乘上系数$\\frac{c_1}{2}$，结果存下来。最后在计算完$\\frac{c_1c_2}{2s^2}A_I B_I$整数矩阵乘法结果之后，加上这个列元素之和就行了，你可以将其理解为残差项。</p> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>如果矩阵乘法两个输入的范围都是关于零点对称的，那么计算公式为：<br><strong>量化：</strong><br>$$A_I = int(\\frac{s}{c_1}A), B_I = int(\\frac{s}{c_2}B)$$<br><strong>反量化：</strong><br>$$C = \\frac{c_1c_2}{s^2}A_I B_I$$</p> \n<p>如果矩阵乘法其中一个输入是relu的结果，那么计算公式为：<br><strong>量化：</strong><br>$$A_I = int(\\frac{2s}{c_1}(A - s \\textbf{1})), B_I = int(\\frac{s}{c_2}B)$$<br><strong>反量化：</strong><br>$$C = \\frac{c_1c_2}{2s^2}A_I B_I + \\frac{c_1}{2}\\textbf{1}B$$</p> \n<p>当然还有很多其他情况，例如softmax的输出范围一定是$[0, 1]$，那么attention中的矩阵乘法公式还得改写。</p> \n<p>此外为了减小量化的损失，还需要在模型结构中插入伪量化节点，然后进行量化感知训练（QAT）。接着还需要将finetune后的模型存储为int8格式。然后还需要开发加载int8模型的推理加速库代码。最后就是本文讲到的整数矩阵乘法了。整个流程比较繁琐，这部分内容今后我会慢慢给大家分享。网上关于量化的优秀教程非常多，我不会讲太多理论上的量化知识，只会从实践的角度来白话一下我们在Transformer模型量化过程中做的一些尝试。</p>', '2022-04-22 04:59:00', '5.9k', 9, 8479);
INSERT INTO `t_article` VALUES ('c156dd48891a4f84b76427e719d1d182', '编程算法', 6, '每日算法系列【LeetCode 424】替换后的最长重复字符', 'https://picsum.photos/1920/1080?random&rand=0.9175937276758419', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。 示例1 输入： s', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你一个仅由大写英文字母组成的字符串，你可以将任意位置上的字符替换成另外的字符，总共可最多替换 k 次。在执行上述操作后，找到包含重复字母的最长子串的长度。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ns = \"ABAB\", k = 2\n输出：\n4\n解释：\n用两个\'A\'替换为两个\'B\',反之亦然。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ns = \"AABABBA\", k = 1\n输出：\n4\n解释：\n将中间的一个\'A\'替换为\'B\',字符串变为 \"AABBBBA\"。\n子串 \"BBBB\" 有最长重复字母, 答案为 4。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong><br>字符串长度和 k 不会超过 10^4。</p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题和之前做过的一题非常类似：<a href=\"https://godweiyang.com/2020/01/09/leetcode-1004/\">每日算法系列【LeetCode 1004】最大连续1的个数 III</a>，只不过这题字符数量变成了 26 个。</p> \n<p>方法和那题类似，都是用滑动窗口。用数组 count 记录每个字母出现的次数，并且用变量 cmax 记录窗口中出现次数最多的字母数量。</p> \n<p>当前窗口是 [l, r] ，如果保留窗口中出现次数最多的字母，将其他字母全部替换为这个字母，那么替换次数就是 $r - l + 1 - cmax$ 。如果它大于 k ，那就说明不能继续向右扩展，而是需要左端点右移，缩小窗口了。缩小的过程中时刻更新 cmax 的值就行了，直到 $r - l + 1 - cmax$ 再次小于等于 k ，然后继续右移 r 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">characterReplacement</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cmax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cmax <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>cmax<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>count<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">\'A\'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> cmax <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">)</span>\n                count<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">\'A\'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">characterReplacement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        count <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">26</span>\n        l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> cmax<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">while</span> r <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">:</span>\n            count<span class=\"token punctuation\">[</span>ord<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>ord<span class=\"token punctuation\">(</span><span class=\"token string\">\'A\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            cmax <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>cmax<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">[</span>ord<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>ord<span class=\"token punctuation\">(</span><span class=\"token string\">\'A\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">while</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> cmax <span class=\"token operator\">&gt;</span> k<span class=\"token punctuation\">:</span>\n                count<span class=\"token punctuation\">[</span>ord<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>ord<span class=\"token punctuation\">(</span><span class=\"token string\">\'A\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> r <span class=\"token operator\">-</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            r <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>注意这里代码实现上面有个很大的问题，就是右移左端点缩小窗口的时候， cmax 并没有跟着减小，这样为什么还是对的呢？这种情况下， cmax保存的其实是历史出现次数最多的字母的次数。而你不改变 cmax ，就会导致中间过程中出现很多不符合题意的窗口，也就是实际要修改的数量大于 k 的窗口，但是因为你 cmax 偏大，算下来修改数量偏小，它又是符合题意的。不过不影响，这些错误的窗口的长度一定是小于你之前算到的正确窗口的长度的（如果大于了，那么 cmax 一定会被更新）。</p> \n<p><strong>下面解释来自于algsCG：</strong></p> \n<blockquote> \n <p>因为我们只对最长有效的子字符串感兴趣，所以我们的滑动窗口不需要收缩，即使窗口可能覆盖无效的子字符串。我们可以通过在右边添加一个字符来扩展窗口，或者将整个窗口向右边移动一个字符。而且我们只在新字符的计数超过历史最大计数（来自覆盖有效子字符串的前一个窗口）时才增长窗口。也就是说，我们不需要精确的当前窗口的最大计数;我们只关心最大计数是否超过历史最大计数;这只会因为新字符而发生。</p> \n</blockquote>', '2022-04-22 12:48:22', '5.4k', 6, 4003);
INSERT INTO `t_article` VALUES ('c2fdb1157da3419f8436b93dc2a06e00', '编程算法', 16, '每日算法系列【LeetCode 907】子数组的最小值之和', 'https://picsum.photos/1920/1080?random&rand=0.092403756143565', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数数组 A，找到 min(B) 的总和，其中 B 的范围为 A 的每个（连续）子数组。 由于答案可能很大，因此返回答案模 10^9 + 7。 示例1 输入： [3,1', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组 A，找到 min(B) 的总和，其中 B 的范围为 A 的每个（连续）子数组。</p> \n<p>由于答案可能很大，因此返回答案模 10^9 + 7。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,1,2,4]\n输出：\n17\n解释：\n子数组为 [3]，[1]，[2]，[4]，[3,1]，[1,2]，[2,4]，[3,1,2]，[1,2,4]，[3,1,2,4]。 \n最小值为 3，1，2，4，1，1，2，1，1，1，和为 17。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= A.length &lt;= 30000</li> \n <li>1 &lt;= A[i] &lt;= 30000</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题意思是，遍历所有的连续子数组，然后求所有子数组中最小值之和。</p> \n<h3 id=\"暴力法\"><a href=\"#暴力法\" class=\"headerlink\" title=\"暴力法\"></a>暴力法</h3>\n<p>遍历所有区间，然后对于每个区间找出最小值求和。这种方法时间复杂度是 $O(n^3)$ ，显然不可行。</p> \n<h3 id=\"暴力法优化\"><a href=\"#暴力法优化\" class=\"headerlink\" title=\"暴力法优化\"></a>暴力法优化</h3>\n<p>对于区间左端点 i ，遍历所有的右端点 j ，然后维护最小值，时间复杂度可以降到 $O(n^2)$ ，但还是太高了。</p> \n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3>\n<p>既然我们不能先遍历区间，然后找最小值，那么我们不如顺序倒过来，对于每个值，我们找有多少区间里面，它是最小值。</p> \n<p>对于一个数字 A[i] 来说，如果在某个区间 [j, k] 里面它是最小值，那么 [j, k] 包含 A[i] 的子数组的最小值也一定是 A[i] 。所以我们只需要找出最大的那个区间，使得 A[i] 是最小值就行了。</p> \n<p>另一个性质是，左右端点 j 和 k 是相互独立的，不会影响，因为 [i, k] 的改变并不会改变 [j, i] 的最小值。所以我们只需要分别求出 A[i] 往左和往右的最远距离就行了。</p> \n<p>因为往左和往右求解方法是类似的，所以我们只需要看一个方向就行了。同样不能遍历一遍，不然就和暴力法没区别了嘛。这时候就要介绍神器了——<strong>单调栈</strong>。</p> \n<p>单调栈是一个栈，后进先出，里面的元素是单调递增或递减的。而在这题里面，我们要求的是 A[i] 左边最远的距离，等价于求左边第一个比它小的数字 A[j] 。而 A[j+1], …, A[i] 都大于等于 A[i] ，所以都可以作为符合要求区间的左端点。</p> \n<p>这里单调栈只需要维护一个单调上升的子序列就行了，遍历到一个数 A[i] 的时候，如果栈顶的元素大于等于 A[i] ，那么就出栈，直到第一个小于 A[i] 的数 A[j] 为止，那么 A[i] 为最小值的区间左端点可选择数量为 j - i。为什么这样是对的呢？因为 A[j] 是栈里面第一个小于 A[i] 的数，而 A[j] 后面的数都大于 A[j] ，这样才不会把 A[j] 顶出栈。而如果栈是空的，就说明 A[i] 前面的所有元素都大于等于它，那么所有区间都符合条件了。</p> \n<p>而右边最大的范围同理可以求得，但是这里有个需要注意的地方！如果存在两个相同的数，这么算不是会导致同一个区间在两个数的位置处计算两次吗？所以要稍稍改进一下，既然向左计算的时候，已经包含了相等的值了，那么向右计算就要排除掉了。也就是从右往左计算右边最远范围的时候，只能计算右边第一个小于等于它的位置，而向左是计算第一个小于它的位置。这样就不会重复计算了。</p> \n<h3 id=\"单调栈-动态规划\"><a href=\"#单调栈-动态规划\" class=\"headerlink\" title=\"单调栈+动态规划\"></a>单调栈+动态规划</h3>\n<p>上面的方法不仅要考虑两端的范围，还得考虑去重，真是麻烦又容易写错。下面介绍一种更加好写又不容易写错的方法，只是不那么容易想到。</p> \n<p>我们定义 sum[i] 为所有以 i 为右端点的区间的最小值之和，同样用单调队列的方法来寻找左边最远的距离，使得区间内 A[i] 是最小值。假设用单调队列找到了左边第一个比 A[i] 小的数是 A[j] ，那么 sum[i] 就可以加上 (i - j) * A[i] ，因为 A[j] 往右都是 A[i] 最小。而 A[j] 再往左呢？这些区间最小值等价于直接以 A[j] 为右端点的最小值，因为 A[j] 往右的数都比它大，没有影响，所以 sum[i] 再加上 sum[j] 就行了。</p> \n<p>上面两种方法时间复杂度都是 $O(n)$ 的，因为进栈出栈最多也只需要 2n 次。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"单调栈（c-）\"><a href=\"#单调栈（c-）\" class=\"headerlink\" title=\"单调栈（c++）\"></a>单调栈（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumSubarrayMins</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">pre</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nxt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> sp<span class=\"token punctuation\">,</span> sn<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> i <span class=\"token operator\">-</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sn<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>sn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> sn<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sn<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> n <span class=\"token operator\">-</span> i <span class=\"token operator\">:</span> sn<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span>\n            sn<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"单调栈（python）\"><a href=\"#单调栈（python）\" class=\"headerlink\" title=\"单调栈（python）\"></a>单调栈（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sumSubarrayMins</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        pre <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        nxt <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        sp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        sn <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> A<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                sp<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> i <span class=\"token operator\">-</span> sp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n            sp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> A<span class=\"token punctuation\">[</span>sn<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                sn<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> i <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>sn<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> sn<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> i\n            sn<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n        res <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD\n        <span class=\"token keyword\">return</span> int<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"单调栈-动态规划（c-）\"><a href=\"#单调栈-动态规划（c-）\" class=\"headerlink\" title=\"单调栈+动态规划（c++）\"></a>单调栈+动态规划（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sumSubarrayMins</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> sp<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> A<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>  A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> sp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> sum<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n            sp<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sum<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> MOD<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"单调栈-动态规划（python）\"><a href=\"#单调栈-动态规划（python）\" class=\"headerlink\" title=\"单调栈+动态规划（python）\"></a>单调栈+动态规划（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">sumSubarrayMins</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        MOD <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        summ <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        sp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">while</span> len<span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">and</span> A<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                sp<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            summ<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> len<span class=\"token punctuation\">(</span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> sp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> summ<span class=\"token punctuation\">[</span>sp<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n            sp<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n        res <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">(</span>summ<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> MOD\n        <span class=\"token keyword\">return</span> int<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题虽然是个中等难度的题，但是还是比一些难题难做一些的，通过这题主要去学会单调栈的使用。</p>', '2022-04-22 13:18:03', '1.1k', 9, 4605);
INSERT INTO `t_article` VALUES ('c3139a5937c9484e8239b1ee04a8d4f7', '编程算法', 11, '【每日算法Day 66】经典面试题：不用四则运算如何做加法？', 'https://picsum.photos/1920/1080?random&rand=0.29574525789358497', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题65. 不用加减乘除做加法 题目描述写一个函数，求两个整数之和，要求在函数体内不得使用 $+,-,*,/$ 四则运算符号。 示例1 输入： a = 1,', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/\" title=\"LeetCode 面试题65. 不用加减乘除做加法\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题65. 不用加减乘除做加法</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>写一个函数，求两个整数之和，要求在函数体内不得使用 $+,-,*,/$ 四则运算符号。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\na = 1, b = 1\n输出：\n2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$a, b$ 均可能是负数或 $0$</li> \n <li>结果不会溢出 $32$ 位整数</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>因为不允许采用四则运算，所以只能考虑位运算了。</p> \n<p>其实就是用二进制来模拟加法操作。首先将两个数最低位相加，如果都是 $1$ ，那么就得到 $0$ ，并且进位 $1$ ，然后接着算下一位。</p> \n<p>但是这样一位一位模拟不方便实现，更简单的实现方法是直接把两个数对应位相加，不管进位。然后进位单独计算，如果某一位两个数都是 $1$ ，那么进位就会对下一位产生影响。然后接着算不进位求和加上进位的值，再计算新的进位，依次重复下去，直到进位为 $0$ 为止。</p> \n<p>用一个实际的例子来演示一下，计算 $3+7$ 的值，其中 $s$ 表示每一步不考虑进位的求和，$c$ 表示每一步的进位，最后得到结果 $1010$ ，也就是十进制的 $10$ ：<br><img src=\"1.jpg\" alt></p> \n<p>但是这里还是用到了加法怎么办呢？因为是二进制，所以不考虑进位求和的话，可以直接采用<strong>异或</strong>运算。而计算进位的话，直接用<strong>位与</strong>和<strong>左移一位</strong>就行了。</p> \n<p>在 c++ 和 python 具体实现中，还有几个注意事项：</p> \n<ul> \n <li>LeetCode c++ 不允许负数左移操作，所以要转换成无符号整数。</li> \n <li>python 因为位数没有限制，所以负数补码会很长，所以要位与 0xffffffff 处理成 $32$ 位整型数。</li> \n <li>c++ 还可以写成递归形式，也就是 $a+b$ 可以递归成 $s+c$ ，其中 $s$ 表示不进位求和结果，$c$ 表示进位的值。</li> \n</ul> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"非递归（c-）\"><a href=\"#非递归（c-）\" class=\"headerlink\" title=\"非递归（c++）\"></a>非递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> carry<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"递归（c-）\"><a href=\"#递归（c-）\" class=\"headerlink\" title=\"递归（c++）\"></a>递归（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> b <span class=\"token operator\">?</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">^</span>b<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"非递归（python）\"><a href=\"#非递归（python）\" class=\"headerlink\" title=\"非递归（python）\"></a>非递归（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        a <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span>\n        b <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token number\">0xffffffff</span>\n        <span class=\"token keyword\">while</span> b <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            carry <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xffffffff</span>\n            a <span class=\"token operator\">^</span><span class=\"token operator\">=</span> b\n            b <span class=\"token operator\">=</span> carry\n        <span class=\"token keyword\">return</span> a <span class=\"token keyword\">if</span> a <span class=\"token operator\">&lt;</span> <span class=\"token number\">0x80000000</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">^</span><span class=\"token number\">0xffffffff</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"投机取巧（python）\"><a href=\"#投机取巧（python）\" class=\"headerlink\" title=\"投机取巧（python）\"></a>投机取巧（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>', '2021-06-20 21:26:15', '4.0k', 7, 2528);
INSERT INTO `t_article` VALUES ('c4a1d694b91b43d5869e1c359b728532', '随笔', 3, '想来字节跳动和我做同事吗？抓紧这次机会吧~', 'https://picsum.photos/1920/1080?random&rand=0.7724504219846662', '想来字节吗？ 想来字节体会一下字节范吗？想来和我面基一起吃个饭吗？那就先来投个简历实习一下吧。文末有投递方式和内推群链接。 投递时间：2020.1.28 - 2020.7.31投递岗位：中国大陆所有研发类实习生 我的亲身实习经历我在202', '<h2 id=\"想来字节吗？\"><a href=\"#想来字节吗？\" class=\"headerlink\" title=\"想来字节吗？\"></a>想来字节吗？</h2>\n<blockquote> \n <p>想来字节体会一下字节范吗？想来和我面基一起吃个饭吗？那就先来投个简历实习一下吧。文末有<strong>投递方式</strong>和<strong>内推群</strong>链接。</p> \n</blockquote> \n<p><strong>投递时间</strong>：2020.1.28 - 2020.7.31<br><strong>投递岗位</strong>：中国大陆所有<strong>研发类实习生</strong></p> \n<h2 id=\"我的亲身实习经历\"><a href=\"#我的亲身实习经历\" class=\"headerlink\" title=\"我的亲身实习经历\"></a>我的亲身实习经历</h2>\n<p>我在2020年5月通过暑期实习进来的，在字节跳动实习也有大半年了，也顺利转正了，体验可以说是非常nice。</p> \n<p>我也写过几篇随笔，记录了一下实习体验之类的： </p> \n<ul> \n <li><a href=\"https://godweiyang.com/2020/04/26/summer-interview-experience/\" title=\"【NLP算法岗】提前批暑期实习面经\">【NLP算法岗】提前批暑期实习面经</a></li> \n <li><a href=\"https://godweiyang.com/2020/12/05/school-conclusion/\" title=\"物来顺应，未来不迎，当时不杂，既过不恋\">物来顺应，未来不迎，当时不杂，既过不恋</a></li> \n</ul> \n<p>每天的美食肯定是体会最深的了，<strong>不要钱，不要钱，不要钱</strong>，重要的事情要说三遍。你以为不要钱肯定没好吃的？那就错了，我经常会把我吃的拍给我妈看，随便挑一些拍过的吧（我饭量小，拍的也不大行，所以看起来肯定没有官方摆拍好看，但是很实在）：<br><img src=\"1.jpeg\" alt></p> \n<p>上面还能看到有<strong>乐乐茶</strong>，没错这就是几天前我们的下午茶！</p> \n<p>多的我不说了，不同部门的工作强度和体验也不一样，我不好评价。我只能说，来了字节可能确实也有些部门会很累，但是<strong>综合体验不会差</strong>。</p> \n<h2 id=\"福利待遇\"><a href=\"#福利待遇\" class=\"headerlink\" title=\"福利待遇\"></a>福利待遇</h2>\n<p>下面都是基础性的福利了，大家都是知道的，不多说了：</p> \n<ul> \n <li>就近住房补贴。</li> \n <li>免费三餐自助，节省时间可选择盒饭，减肥健身可选择健康餐。</li> \n <li>免费健身房和康体娱乐中心。</li> \n <li>下午茶，零食水果、咖啡牛奶统统不限量。</li> \n</ul> \n<h2 id=\"投递方式\"><a href=\"#投递方式\" class=\"headerlink\" title=\"投递方式\"></a>投递方式</h2>\n<p>可以直接点击下方<strong>链接</strong>选择你心仪的岗位投递：<br><a href=\"https://job.toutiao.com/referral/mobile/lightning-referral?token=MzsxNjExODMyOTIzNzg1OzY4MjMzNTY3NzIyMzg0MTEyNzc7MA\" target=\"_blank\" rel=\"noopener\">https://job.toutiao.com/referral/mobile/lightning-referral?token=MzsxNjExODMyOTIzNzg1OzY4MjMzNTY3NzIyMzg0MTEyNzc7MA</a></p> \n<p>也可以扫描下面的<strong>二维码</strong>投递：<br><img src=\"2.png\" alt></p> \n<h2 id=\"字节跳动内推群\"><a href=\"#字节跳动内推群\" class=\"headerlink\" title=\"字节跳动内推群\"></a>字节跳动内推群</h2>\n<p>欢迎加入<strong>字节跳动内推群</strong>，有任何问题都可以在群里提问（如果二维码失效，加我微信直接拉你进群）：<br><img src=\"3.png\" alt><br><strong>我的微信</strong>：<br><img src=\"4.jpeg\" alt></p>', '2020-03-09 07:08:11', '8.5k', 8, 9005);
INSERT INTO `t_article` VALUES ('c8e7389b14b04d14a06ff6c212fdc3e0', '编程算法', 24, '【每日算法Day 63】LeetCode 第 179 场周赛题解', 'https://picsum.photos/1920/1080?random&rand=0.68798276035947', '关注公众号【算法码上来】，每日算法干货马上就来！ 起床打开 leetcode，准备看看今天搞点啥题目水一水的，突然发现周赛还剩 1 小时整。看了眼题目也都挺简单的，就把 4 道题都做掉了。 LeetCode 5352. 生成每种字', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>起床打开 leetcode，准备看看今天搞点啥题目水一水的，突然发现周赛还剩 1 小时整。看了眼题目也都挺简单的，就把 4 道题都做掉了。</p> \n</blockquote> \n<h2 id=\"LeetCode-5352-生成每种字符都是奇数个的字符串\"><a href=\"#LeetCode-5352-生成每种字符都是奇数个的字符串\" class=\"headerlink\" title=\"LeetCode 5352. 生成每种字符都是奇数个的字符串\"></a>LeetCode 5352. 生成每种字符都是奇数个的字符串</h2>\n<h3 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/generate-a-string-with-characters-that-have-odd-counts/</a></p> \n<h3 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>这题就没什么好说的了，如果 $n$ 是奇数，那就生成 $n$ 个 $a$ 。如果 $n$ 是偶数，那就生成 $n-1$ 个 $a$ ，再加上 $1$ 个 $b$ 。</p> \n<h3 id=\"代码（python）\"><a href=\"#代码（python）\" class=\"headerlink\" title=\"代码（python）\"></a>代码（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">generateTheString</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> str<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"b\"</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"a\"</span><span class=\"token operator\">*</span>n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5353-灯泡开关-III\"><a href=\"#LeetCode-5353-灯泡开关-III\" class=\"headerlink\" title=\"LeetCode 5353. 灯泡开关 III\"></a>LeetCode 5353. 灯泡开关 III</h2>\n<h3 id=\"题目链接-1\"><a href=\"#题目链接-1\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/bulb-switcher-iii/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/bulb-switcher-iii/</a></p> \n<h3 id=\"题解-1\"><a href=\"#题解-1\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>如果某一个时刻灯都是蓝色的，等价于所有的亮灯都连续排列在数组最左边，没有间断。所以只需要判断当前时刻亮灯的最大编号是否等于亮灯的数量就行了。</p> \n<p>比赛的时候傻 x 了，第一个想到的竟然是树状数组，于是直接把模板套过来过了。</p> \n<h3 id=\"代码（c-）\"><a href=\"#代码（c-）\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numTimesAllBlue</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> light<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> light<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxx <span class=\"token operator\">==</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>树状数组：</strong></p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MAXN <span class=\"token operator\">=</span> <span class=\"token number\">50010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> bit<span class=\"token punctuation\">[</span>MAXN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numTimesAllBlue</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> light<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>bit<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> bit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> light<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>light<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            maxx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> light<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> maxx<span class=\"token punctuation\">)</span> res<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> MAXN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bit<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token function\">lowbit</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5354-通知所有员工所需的时间\"><a href=\"#LeetCode-5354-通知所有员工所需的时间\" class=\"headerlink\" title=\"LeetCode 5354. 通知所有员工所需的时间\"></a>LeetCode 5354. 通知所有员工所需的时间</h2>\n<h3 id=\"题目链接-2\"><a href=\"#题目链接-2\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/time-needed-to-inform-all-employees/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/time-needed-to-inform-all-employees/</a></p> \n<h3 id=\"题解-2\"><a href=\"#题解-2\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>首先根据 $manager$ 数组来建图，边权就是父结点到子结点的通知时间。然后从根结点开始做 dfs ，求出根结点到每个叶子结点的路径长度的最大值。</p> \n<h3 id=\"代码（c-）-1\"><a href=\"#代码（c-）-1\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">100010</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> G<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numOfMinutes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> headID<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> manager<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> informTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>manager<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                G<span class=\"token punctuation\">[</span>manager<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>headID<span class=\"token punctuation\">,</span> informTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> headID<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> informTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>informTime<span class=\"token punctuation\">[</span>headID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>headID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">[</span>headID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> informTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> maxx<span class=\"token operator\">+</span>informTime<span class=\"token punctuation\">[</span>headID<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"LeetCode-5355-T-秒后青蛙的位置\"><a href=\"#LeetCode-5355-T-秒后青蛙的位置\" class=\"headerlink\" title=\"LeetCode 5355. T 秒后青蛙的位置\"></a>LeetCode 5355. T 秒后青蛙的位置</h2>\n<h3 id=\"题目链接-3\"><a href=\"#题目链接-3\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h3>\n<p><a href=\"https://leetcode-cn.com/problems/frog-position-after-t-seconds/\" target=\"_blank\" rel=\"noopener\">https://leetcode-cn.com/problems/frog-position-after-t-seconds/</a></p> \n<h3 id=\"题解-3\"><a href=\"#题解-3\" class=\"headerlink\" title=\"题解\"></a>题解</h3>\n<p>首先建图，然后从 $1$ 号结点开始，还是用 dfs 。每往下走一次，时间 $t$ 减 $1$ 。如果 $t = 0$ 或者到了叶子结点了，就判断结点是否为 $target$ ，是就返回 $1$ ，不是就返回 $0$ 。每次概率除以当前结点的子结点个数，然后再乘上所有子结点 dfs 结果的最大值（因为结果不是 $0$ 就是正确概率）。</p> \n<h3 id=\"代码（c-）-2\"><a href=\"#代码（c-）-2\" class=\"headerlink\" title=\"代码（c++）\"></a>代码（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">frogPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> edges<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">G</span><span class=\"token punctuation\">(</span><span class=\"token number\">110</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> edges<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            G<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> u<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>t <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>fa <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>   \n        <span class=\"token keyword\">double</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>fa <span class=\"token operator\">?</span> sz<span class=\"token number\">-1</span> <span class=\"token operator\">:</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> maxx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> fa<span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            maxx <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> u<span class=\"token punctuation\">,</span> t<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> p<span class=\"token operator\">*</span>maxx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-11-28 19:11:08', '6.5k', 10, 2103);
INSERT INTO `t_article` VALUES ('cc00734585e748799ce948461785bb55', '编程算法', 20, '每日算法系列【LeetCode 495】提莫攻击', 'https://picsum.photos/1920/1080?random&rand=0.7356251586707114', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。 现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在《英雄联盟》的世界中，有一个叫 “提莫” 的英雄，他的攻击可以让敌方英雄艾希（编者注：寒冰射手）进入中毒状态。</p> \n<p><img src=\"1.jpg\" alt=\"兔宝宝提莫\"></p> \n<p>现在，给出提莫对艾希的攻击时间序列和提莫攻击的中毒持续时间，你需要输出艾希的中毒状态总时长。</p> \n<p>你可以认为提莫在给定的时间点进行攻击，并立即使艾希处于中毒状态。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,4], 2\n输出：\n4\n解释：\n在第 1 秒开始时，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒钟结束。\n在第 4 秒开始时，提莫再次攻击艾希，使得艾希获得另外 2 秒的中毒时间。\n所以最终输出 4 秒。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2], 2\n输出：\n3\n解释：\n在第 1 秒开始时，提莫开始对艾希进行攻击并使其立即中毒。中毒状态会维持 2 秒钟，直到第 2 秒钟结束。\n但是在第 2 秒开始时，提莫再次攻击了已经处于中毒状态的艾希。\n由于中毒状态不可叠加，提莫在第 2 秒开始时的这次攻击会在第 3 秒钟结束。\n所以最终输出 3。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>因为数组是时间序列，所以是给你排好序的，不需要你自己排序。</p> \n<p>那么对于 $t[i]$ 来说，如果 $t[i-1]+d \\le t[i]$ 的话，就说明前一时刻的中毒效果已经过去了，那么当前时刻的中毒效果持续时间都是属于当前时刻的，答案加上 $d$ 就行了。但是如果 $t[i-1]+d &gt; t[i]$ ，那么前一时刻的中毒效果还在，等前一时刻的中毒效果过去了，剩下的中毒时间才能算是当前时刻的，而扣除掉上一时刻剩余的时间为 $t[i] - t[i-1]$ 。所以最后属于当前时刻的中毒时间只要取 $t[i] - t[i-1]$ 和 $d$ 的最小值就行了。</p> \n<p>最终时间复杂度为 $O(n)$ ，空间复杂度为 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findPoisonedDuration</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> timeSeries<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> duration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> timeSeries<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> n <span class=\"token operator\">?</span> duration <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>timeSeries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>timeSeries<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findPoisonedDuration</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> timeSeries<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>timeSeries<span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">if</span> n<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token keyword\">else</span> duration\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> min<span class=\"token punctuation\">(</span>timeSeries<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>timeSeries<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> duration<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h3>\n<p>这题难度其实称不上中等，选取这道题完全是因为有我最爱的小提莫！</p> \n<p>如果有同样喜爱英雄联盟的召唤师（小姐姐最棒了），可以加我好友一起开黑呀。本人<strong>艾欧尼亚</strong>（<strong>ID：godweiyang</strong>）黄金水平，虽然很菜，但是打字速度快！</p>', '2022-04-22 02:31:34', '4.2k', 8, 3772);
INSERT INTO `t_article` VALUES ('cc66a14293bc434995834f526196cfaa', '编程算法', 27, '【每日算法Day 80】所有人都会做的入门题，高级解法来了！', 'https://picsum.photos/1920/1080?random&rand=0.5057139381966355', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目还是昨天的题，昨天已经介绍了三种解法了，今天介绍一个最快的方法。 题目链接LeetCode 面试题 08.01. 三步问题 题目描述三步问题。有个小孩正在上楼梯，楼梯有 $n$', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>题目还是昨天的题，昨天已经介绍了三种解法了，今天介绍一个最快的方法。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/three-steps-problem-lcci/\" title=\"LeetCode 面试题 08.01. 三步问题\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 08.01. 三步问题</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>三步问题。有个小孩正在上楼梯，楼梯有 $n$ 阶台阶，小孩一次可以上 $1$ 阶、$2$ 阶或 $3$ 阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模 $1000000007$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 3 \n输出：\n4\n解释：\n有四种走法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 5\n输出：\n13<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>昨天的题解地址：<br><a href=\"https://godweiyang.com/2020/03/24/leetcode-inteview-08-01/\" title=\"韦阳的博客：【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！\">韦阳的博客：【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！</a></p> \n<p><a href=\"https://zhuanlan.zhihu.com/p/115799226\" title=\"知乎专栏：【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！\" target=\"_blank\" rel=\"noopener\">知乎专栏：【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！</a></p> \n<p>昨天是通过动态规划来解决的，转移方程为：<br>$$<br>f[i] = f[i-1] + f[i-2] + f[i-3]<br>$$<br>初始情况是 $f[1] = 1, f[2] = 2, f[3] = 4$ 。</p> \n<p>如果通过递推的方式来求解的话，时间复杂度是 $O(n)$ ，但是我们还可以用矩阵快速幂的方法加速到 $O(\\log n)$ 。</p> \n<p>相信大家快速幂一定听说过（没听说过当我没说），如果让你求 $a^n$，那么可以分两种情况。如果 $n$ 是偶数，那么可以计算 $a^{n/2}$，然后求它的平方 $(a^{n/2})^2$ 就行了。如果 $n$ 是奇数，那么可以计算 $a^{(n-1)/2}$，然后求它的平方 $a \\cdot (a^{(n-1)/2})^2$ 就行了。这样只需要用 $O(\\log n)$ 的复杂度就可以计算出 $a^n$ 了。</p> \n<p>类似的，如果我们要计算一个矩阵的幂 $A^n$，也可以将其拆分成两半，然后计算一半再平方就行了。</p> \n<p>那么这题跟矩阵有什么关系呢？如果我们把转移方程右边三项写成向量形式：<br>$$<br>\\begin{bmatrix}<br> f_{i-3} &amp; f_{i-2} &amp; f_{i-1}<br>\\end{bmatrix}<br>$$<br>那么给它右边乘上一个矩阵 $A$：<br>$$<br>\\begin{bmatrix}<br> 0 &amp; 0 &amp; 1 \\\\<br> 1 &amp; 0 &amp; 1 \\\\<br> 0 &amp; 1 &amp; 1<br>\\end{bmatrix}<br>$$<br>那么就会得到向量：<br>$$<br>\\begin{bmatrix}<br> f_{i-2} &amp; f_{i-1} &amp; f_{i-1}+f_{i-2}+f_{i-3}<br>\\end{bmatrix}<br>$$<br>即：<br>$$<br>\\begin{bmatrix}<br> f_{i-2} &amp; f_{i-1} &amp; f_{i}<br>\\end{bmatrix}<br>$$<br>所以乘一次矩阵 $A$ 就可以得到下一个 $f$ 值，那么从初始的向量 $\\begin{bmatrix}1 &amp; 2 &amp; 4\\end{bmatrix}$ 开始，乘上 $A^{n-3}$ 就可以得到 $\\begin{bmatrix}f_{n-2} &amp; f_{n-1} &amp; f_{n}\\end{bmatrix}$ 了。</p> \n<p>而这里的 $A^{n-3}$ 就可以通过矩阵快速幂来计算得到。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">&gt;&gt;</span> vvl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">&gt;</span> vl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll p <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vvl <span class=\"token function\">mat_mul</span><span class=\"token punctuation\">(</span>vvl<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> vvl<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> B<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vvl <span class=\"token function\">C</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token function\">vl</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> B<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> C<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vvl <span class=\"token function\">mat_pow</span><span class=\"token punctuation\">(</span>vvl<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vvl <span class=\"token function\">B</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token function\">vl</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> B <span class=\"token operator\">=</span> <span class=\"token function\">mat_mul</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            A <span class=\"token operator\">=</span> <span class=\"token function\">mat_mul</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            n <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vvl <span class=\"token function\">mat_pow_rec</span><span class=\"token punctuation\">(</span>vvl<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> A<span class=\"token punctuation\">;</span>\n        vvl B <span class=\"token operator\">=</span> <span class=\"token function\">mat_pow_rec</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        B <span class=\"token operator\">=</span> <span class=\"token function\">mat_mul</span><span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">mat_mul</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vl f <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        vvl A <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        vvl B <span class=\"token operator\">=</span> <span class=\"token function\">mat_pow</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token number\">-3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ll res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">mat_pow</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        m <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        B <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>eye<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                B <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>matmul<span class=\"token punctuation\">(</span>B<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n            A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>mod<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>matmul<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n            n <span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> B<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n        f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span>\n        A <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int64<span class=\"token punctuation\">)</span>\n        B <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>mat_pow<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token number\">-3</span><span class=\"token punctuation\">)</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> B<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> int<span class=\"token punctuation\">(</span>res<span class=\"token operator\">%</span>self<span class=\"token punctuation\">.</span>p<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-09-28 08:09:19', '4.2k', 9, 1827);
INSERT INTO `t_article` VALUES ('cd484f77af644cc08ed99154fb04e47a', '编程算法', 6, '每日算法系列【EOJ 3031】二进制倒置', 'https://picsum.photos/1920/1080?random&rand=0.17603089540683992', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数 $n(0 \\le n \\le 10^{100})$ 、将 $n$ 的 334 位二进制表示形式（不包括开头可能的值为 0 的位，$n=0$ 表示为 1 位 0）前', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数 $n(0 \\le n \\le 10^{100})$ 、将 $n$ 的 334 位二进制表示形式（不包括开头可能的值为 0 的位，$n=0$ 表示为 1 位 0）前后倒置，输出倒置后的二进制数对应的整数。</p> \n<p>例如： $n=10$ ，其二进制表示为（330 个 0）1010 ，倒置后为 0101 ，对应输出就是 5 。</p> \n<p><strong>题目链接</strong><br><a href=\"https://acm.ecnu.edu.cn/problem/3031/\" target=\"_blank\" rel=\"noopener\">https://acm.ecnu.edu.cn/problem/3031/</a></p> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题考查的主要是大数的进制转换，其他没有什么算法技巧，但是对代码实现要求还是挺高的，适合用来锻炼你的<strong>耐心</strong>和<strong>代码风格</strong>。</p> \n<p>整体思路非常简单，不就是先把输入的 10 进制数 $x$ 转化成 2 进制数 $b$ ，再把 $b$ 所有位颠倒过来，最后再把 $b$ 转化成 10 进制输出就行了。</p> \n<p>所以整体代码拆分成了三步，先从 10 进制转 2 进制，再颠倒 2 进制，最后从 2 进制转 10 进制。</p> \n<p>为了代码的普适性，我这里直接实现了从任意 $a$ 进制 转化为任意 $b$ 进制的算法，这样更加方便调用。</p> \n<p>这就涉及到了<strong>大数的任意进制转换</strong>问题，假设 $x$ 是 $a$ 进制数，我们要把它转化为 $b$ 进制的 $y$ （初始时为空）。那么转化步骤如下：</p> \n<ul> \n <li>求 $x \\% b$ ，并把余数接在 $y$ 的最高位。</li> \n <li>令 $x = \\left\\lfloor x / b \\right\\rfloor$ 。</li> \n <li>重复步骤 1 ，直到 $x = 0$ 。</li> \n</ul> \n<p>部分代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    y<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>看起来非常简单，但是步骤 1 和 2 都涉及到了<strong>大数的求余</strong>和<strong>大数的除法</strong>算法，所以我们还得实现这两个算法。</p> \n<p>大数求余只要从 $x$ 最高位开始计算 $x$ 的大小，并同时对 $b$ 求余，然后由于求余的加法和乘法定理，我们可以始终保持 $x &lt; b$ ，这样就能用一个 <code>int</code> 类型保存余数了。</p> \n<p>部分代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> q<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>大数除法类似，从 $x$ 最高位开始除 $b$ ，并注意要把余数带到下一位，最后还得去掉前导 0 。</p> \n<p>部分代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">void</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> q <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n        q <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span><span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h&gt;</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// string转化为vector&lt;int&gt;，倒序存储</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">s2i</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> idx <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> idx <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> idx<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">\'0\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// a进制下x%b，x倒序存储</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">*</span> a <span class=\"token operator\">+</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> q<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// a进制下x/b，x倒序存储</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> q <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> q <span class=\"token operator\">*</span> a<span class=\"token punctuation\">;</span>\n        q <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span><span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        x<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// a进制下s转化为b进制string</span>\nstring <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> x <span class=\"token operator\">=</span> <span class=\"token function\">s2i</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        y<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">mod</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">div</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    string res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\'0\'</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">&gt;&gt;</span> T<span class=\"token punctuation\">;</span>\n    string x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> T<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        cin <span class=\"token operator\">&gt;&gt;</span> x<span class=\"token punctuation\">;</span>\n        string x2 <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x2<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string res <span class=\"token operator\">=</span> <span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>x2<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"case #\"</span> <span class=\"token operator\">&lt;&lt;</span> t <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> res <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"case #%d:\"</span> <span class=\"token operator\">%</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">(</span>bin<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>', '2020-01-28 19:06:22', '4.5k', 7, 1840);
INSERT INTO `t_article` VALUES ('d1a420e8633e4457be8aeeb68e59cb75', '计算机知识', 23, '大数据分析，带你认识一个你从未见过的周杰伦', 'https://picsum.photos/1920/1080?random&rand=0.8096674629286392', '周杰伦可以说是大多数90后的青春了，连我妈这种从来不咋看新闻的人也知道他。 你是否曾在初中时抄过他的歌词？你又是否曾经将他的歌词写进作文？ 今天我就用大数据来分析一波他的所有歌词，带你认识一个你从未见过的周杰伦。 获取周杰伦的所有歌词这件事', '<p>周杰伦可以说是大多数90后的青春了，连我妈这种从来不咋看新闻的人也知道他。</p> \n<p>你是否曾在初中时抄过他的歌词？你又是否曾经将他的歌词写进作文？</p> \n<p>今天我就用大数据来分析一波他的所有歌词，带你认识一个你从未见过的周杰伦。<br><img src=\"2.png\" alt></p> \n<h2 id=\"获取周杰伦的所有歌词\"><a href=\"#获取周杰伦的所有歌词\" class=\"headerlink\" title=\"获取周杰伦的所有歌词\"></a>获取周杰伦的所有歌词</h2>\n<p>这件事其实不难，我们写个代码从QQ音乐上自动收集就行了。说来也是心酸，以前一直用网易云音乐的，后来周杰伦版权没了，就只能投身了QQ音乐。</p> \n<p>代码我都开源出来了，也不用大家自己运行，歌词文件我都放在下面了：<br><a href=\"https://github.com/godweiyang/lyric-crawler/tree/master/output\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/lyric-crawler/tree/master/output</a></p> \n<p>里面有两个歌词文件是关于周杰伦的：<code>周杰伦_歌词.txt</code>和<code>周杰伦_歌名.txt</code>，分别保存了他出道以来唱过的所有歌曲的歌词和按照专辑分类的歌曲名称，当然不包括演唱会和Live版本。</p> \n<p>一共整整<strong>174</strong>首！这个数量已经是相当多了，当然这里面还包括了蔡依林和他合唱的两首歌：《骑士精神》和《布拉格广场》，还有李玟的《刀马旦》等等，我也都算进去了。</p> \n<h2 id=\"谁作曲最多？\"><a href=\"#谁作曲最多？\" class=\"headerlink\" title=\"谁作曲最多？\"></a>谁作曲最多？</h2>\n<p>经过简单统计可以惊人地发现，在174首歌曲中，周杰伦亲自作曲的歌曲竟然高达171首！</p> \n<p>那三首非本人作曲的分别是袁咏琳作曲的《画沙》、派伟俊作曲的《Try》和Funky Monkey Babys作曲的《你是我的OK绷》。</p> \n<p>老杰迷应该都知道杰伦的作曲是有多么的牛批。《夜曲》一响，上台领奖，颁奖词都说的词穷了。时至今日这首歌还是我的手机铃声。<br><img src=\"1.jpeg\" alt></p> \n<h2 id=\"谁作词最多？\"><a href=\"#谁作词最多？\" class=\"headerlink\" title=\"谁作词最多？\"></a>谁作词最多？</h2>\n<p>统计下来可以发现作曲量排名前五位的分别是：</p> \n<ul> \n <li>方文山：96首</li> \n <li>周杰伦：42首</li> \n <li>黄俊郎：15首</li> \n <li>徐若瑄：6首</li> \n <li>宋健彰：4首</li> \n</ul> \n<p>大家应该都知道，周杰伦最好的搭档就是方文山。可以说方文山和周杰伦相互成就了对方，方文山的中国风配上周杰伦的曲简直就是天造地和。<br><img src=\"3.jpeg\" alt></p> \n<p>而杰伦自己作词的歌也不在少数，虽然很多人都吐槽他的《等你下课》和《不爱我就拉倒》歌词简单土味，但不可否认的是他也能写出《晴天》、《稻香》这样的神级歌曲。</p> \n<h2 id=\"周杰伦最常用的词语\"><a href=\"#周杰伦最常用的词语\" class=\"headerlink\" title=\"周杰伦最常用的词语\"></a>周杰伦最常用的词语</h2>\n<p>我对周杰伦所有的歌词统计了一下词频，生成了一个词云：<br><img src=\"4.png\" alt></p> \n<p>可以看到杰伦最常用的五个词语是：</p> \n<ul> \n <li>离开</li> \n <li>回忆</li> \n <li>微笑</li> \n <li>世界</li> \n <li>爱情</li> \n</ul> \n<p>周杰伦前期基本都是苦情歌，常使用这些词也不足为奇。比如《退后》中的“天空灰得像哭过，离开你以后，并没有，更自由”，《晴天》中的“好想再问一遍，你会等待还是离开”，《花海》中的“不要你离开，距离隔不开，思念变成海，在窗外进不来”，等等等等。</p> \n<p>而到了后期，特别是结婚后，这种歌曲基本就销声匿迹了，更多的是《告白气球》这种甜歌：“花店玫瑰，名字写错谁，告白气球，风吹到对街，微笑在天上飞”。</p> \n<h2 id=\"周杰伦最爱的季节\"><a href=\"#周杰伦最爱的季节\" class=\"headerlink\" title=\"周杰伦最爱的季节\"></a>周杰伦最爱的季节</h2>\n<p>杰伦最爱什么季节呢？从他所有歌词中可以统计出，春夏秋冬四个季节分别出现的次数是：</p> \n<ul> \n <li>春天：7次</li> \n <li>夏天：17次</li> \n <li>秋天：33次</li> \n <li>冬天：18次</li> \n</ul> \n<p>可以看出，周杰伦最爱写的季节其实还是秋天和冬天，这也符合他大多数歌曲都是苦情歌的实际情况。一首《枫》里的“缓缓飘落的枫叶像思念，为何挽回要赶在冬天来之前”，非常伤感。这首歌也成为了周杰伦唱的难度最高的歌之一，他本人几乎都没有在演唱会上唱过。</p> \n<h2 id=\"周杰伦最爱的天气\"><a href=\"#周杰伦最爱的天气\" class=\"headerlink\" title=\"周杰伦最爱的天气\"></a>周杰伦最爱的天气</h2>\n<p>粗略统计了一下，周杰伦最爱的三种天气是：</p> \n<ul> \n <li>雨天：150次</li> \n <li>雪天：31次</li> \n <li>晴天：12次</li> \n</ul> \n<p>其中雨天更是常客，《晴天》中的“刮风这天，我试过握着你手，但偏偏，雨渐渐，大到我看你不见”，《给我一首歌的时间》中的“雨淋湿了天空，毁得很讲究，你说你不懂，为何在这时牵手”。雨是最能寄托思念的物品，因此也成为了杰伦的最爱。</p> \n<h2 id=\"周杰伦最爱的心情\"><a href=\"#周杰伦最爱的心情\" class=\"headerlink\" title=\"周杰伦最爱的心情\"></a>周杰伦最爱的心情</h2>\n<p>人有四种心情，喜怒哀乐，分析周杰伦歌词中出现的心情词语，常用的有这么几个：</p> \n<ul> \n <li>喜（开心）：17次</li> \n <li>怒（生气、怒火）：10次</li> \n <li>哀（难过、忧伤）：41次</li> \n <li>乐（快乐）：32次</li> \n</ul> \n<p>可以看出周杰伦表达最多的情感是哀，其次是乐，其实这也是前期苦情歌太多导致的。比如《黑色幽默》的第一句“难过是因为闷了很久，是因为想了太多，是心理起了作用”，作为第一张专辑中的主打歌曲，当时就已经走上了苦情歌的路了。</p> \n<h2 id=\"2010年前后周杰伦歌曲对比\"><a href=\"#2010年前后周杰伦歌曲对比\" class=\"headerlink\" title=\"2010年前后周杰伦歌曲对比\"></a>2010年前后周杰伦歌曲对比</h2>\n<p>网上很多人都持有一个观点，那就是从2010年周杰伦的《跨时代》专辑开始，他的专辑质量就出现了明显下滑。很多人还因此嘲讽，说什么江郎才尽之类的话。那么事实真的如此吗？我们还是用数据来说话。</p> \n<h3 id=\"常用词语变化\"><a href=\"#常用词语变化\" class=\"headerlink\" title=\"常用词语变化\"></a>常用词语变化</h3>\n<p>首先来看看2010年前后的最常用词语有哪些变化：<br><img src=\"5.png\" alt><br><img src=\"6.png\" alt></p> \n<p>可以看到2010年以前最常用的词语是：离开、回忆、微笑、时间，而2010年之后最常用的词语变成了：hey、公公、世界、我会、微笑、靠靠。可以看出确实用词上2010年之后明显变得不如2010年之前了，这也正常，后期方文山为周杰伦作词也不如以前多了。</p> \n<h3 id=\"作词变化\"><a href=\"#作词变化\" class=\"headerlink\" title=\"作词变化\"></a>作词变化</h3>\n<p>那么方文山后期到底还为周杰伦作了多少词呢？我统计了2010年前后方文山和周杰伦各自作词的数量：</p> \n<ul> \n <li>2010年之前：方文山52首，周杰伦20首，总共93首</li> \n <li>2010年之后：方文山29首，周杰伦16首，总共56首</li> \n</ul> \n<p>可以看到，周杰伦2010年之后作品数量减少很多，这几年甚至都不出专辑了。这也没办法，杰伦也不小了，但是他的神专已经足够多的让人难以超越了。</p> \n<p>而2010年之后方文山虽然作词总数大幅减少，但是占比依然是很高的，同时周杰伦自己作词的占比提升不少。这也抨击了那些说周杰伦成名后就和方文山关系不好了之类的言论，最后一个专辑《周杰伦的床边故事》，方文山都还为周杰伦作词整整6首！</p> \n<h2 id=\"做最好的自己\"><a href=\"#做最好的自己\" class=\"headerlink\" title=\"做最好的自己\"></a>做最好的自己</h2>\n<p>周杰伦引领了2000年后中国的流行乐坛，开创了中国风歌曲的先河，很多歌曲现在听依然感觉领先整个时代。</p> \n<p>他一直坚持自己的风格，很多歌都具有教育意义。《稻香》诉说了对家乡的思念，《止战之殇》诉说了对和平的渴望、《听妈妈的话》诉说了对妈妈的感恩，等等等等。《千山万水》更是被国家博物馆收藏，他也成为了北京奥运会唯一一位独唱的歌手，排面十足。</p> \n<p>就像周杰伦在《土耳其冰淇淋》中唱的那样，炫技、牛批就完事了，要做就做不一样的自己：</p> \n<blockquote> \n <p>谁说拍中国风 一定要配灯笼<br>谁说写中国风 一定要商角徵羽宫<br>我干脆自己下车 指挥乐坛的交通<br>管他管他什么曲风</p> \n</blockquote> \n<p>这首也是《周杰伦的床边故事》专辑中周杰伦一手包办了作词、作曲、编曲的炫技歌曲。不像《告白气球》那样为了迎合大众而写的口水歌，这首歌表达出了周杰伦自己的个性，编曲也非常的厉害。</p> \n<p><strong>感谢周杰伦，感谢你出现在了我的青春里。如果给我一次机会，我一定要去看一场你的演唱会！</strong></p>', '2021-07-07 14:53:10', '2.7k', 11, 8862);
INSERT INTO `t_article` VALUES ('d1d47ea826d5440690966da6bfd1014b', '编程算法', 7, '每日算法系列【LeetCode 943】最短超级串', 'https://picsum.photos/1920/1080?random&rand=0.1041866967793047', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个字符串数组 A，找到以 A 中每个字符串作为子字符串的最短字符串。 我们可以假设 A 中没有字符串是 A 中另一个字符串的子字符串。 示例1 输入： [\"alex\",\"', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个字符串数组 A，找到以 A 中每个字符串作为子字符串的最短字符串。</p> \n<p>我们可以假设 A 中没有字符串是 A 中另一个字符串的子字符串。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\"alex\",\"loves\",\"leetcode\"]\n输出：\n\"alexlovesleetcode\"\n解释：\n\"alex\"，\"loves\"，\"leetcode\" 的所有排列都会被接受。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\n输出：\n\"gctaagttcatgcatc\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= A.length &lt;= 12</li> \n <li>1 &lt;= A[i].length &lt;= 20</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<blockquote> \n <p>这是每日算法系列更新以来，做过最难的一道题目了，也是第一次涉及到字符串类型的题目。如果觉得难，可以忽略今天这题。</p> \n</blockquote> \n<p>这题意思就是，给你 n 个字符串，任意两个字符串如果拼接在一起的话，首尾可能会有重合的部分，那么就按照最长的重合部分拼接上去。要求的是 n 个字符串怎么排列，然后依次拼接，得到的最终字符串长度最短？</p> \n<p>最暴力的方法当然就是枚举所有排列，然后把他们拼起来看长度，这样的话光是阶乘的复杂度就不可接受了。</p> \n<p>这题就要用到<strong>状态压缩动态规划</strong>了，按照字面意思理解就是动态规划的状态是经过压缩的，那具体什么意思呢？</p> \n<p>首先我们用二进制来表示每个字符串选取状态， 1 表示选取， 0 表示没有选取。比如 4 个字符串 ，我们选取了第 0 个和第 2 个，那么我们就可以用 1010 来表示这个选取状态，而 1010 转化成 10 进制就是 10 ，所以我们就可以用 10 这个数字来表示这种选取状态。状态最小值是 0 ，表示一个都没有选取，最大值是 $2^n-1$ ，表示所有的字符串都选取了。</p> \n<p>然后定义 $dp[s][i]$ 表示选取状态为 s 的情况下，最后一个字符串是第 i 个的情况下，最短的长度是多少。那么去掉第 i 个字符串，选取状态就变成了 $s \\oplus 2^i$ ，其中 $\\oplus$ 表示异或操作。然后遍历所有的 $dp[s \\oplus 2^i][j]$ ，也就是看前一个状态以哪个字符串结尾长度最短。那么状态更新就是：<br>$$<br>dp[s][i]=\\min{\\{dp[s \\oplus 2^i][j]+A[i].length-o[j][i]\\}}<br>$$<br>其中 $o[j][i]$ 表示 $A[j]$ 和 $A[i]$ 最大重合的长度，可以预处理出来。</p> \n<p>与此同时，我们还需要一个数组 $path[s][i]$ ，用来保存 s 状态下结尾是 $A[i]$ 时，前一个字符串最优是哪个。在做完动态规划之后，再进行回溯，找出整个最优序列是什么。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    string <span class=\"token function\">shortestSuperstring</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> A<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> M <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> o<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                o<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">overlap</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> INF<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">&gt;&gt;</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            path<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                last <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>last<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> M <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            seq<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            s <span class=\"token operator\">=</span> s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>seq<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> seq<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string res <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">overlap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> na <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nb <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>na<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>na<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">overlap</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        na<span class=\"token punctuation\">,</span> nb <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">(</span>na<span class=\"token punctuation\">,</span> nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>na<span class=\"token operator\">-</span>i<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">return</span> i\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">shortestSuperstring</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> str<span class=\"token punctuation\">:</span>\n        INF <span class=\"token operator\">=</span> <span class=\"token number\">0x3f3f3f3f</span>\n        n<span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n        M <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>n\n        o <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                o<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>overlap<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>INF<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">continue</span>\n                <span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> i <span class=\"token operator\">!=</span> j <span class=\"token operator\">and</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">&gt;&gt;</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">if</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                            dp<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>o<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n                            path<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j\n        last <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                last <span class=\"token operator\">=</span> i\n        seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span>\n        s <span class=\"token operator\">=</span> M <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            tmp <span class=\"token operator\">=</span> last\n            last <span class=\"token operator\">=</span> path<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>last<span class=\"token punctuation\">]</span>\n            seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">)</span>\n            s <span class=\"token operator\">=</span> s<span class=\"token operator\">^</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span>tmp<span class=\"token punctuation\">)</span>\n        seq <span class=\"token operator\">=</span> seq<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">+=</span> A<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>o<span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>seq<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>这题还是有点难度的，我还是看了答案后才自己写出来的，如果实在不会，不要勉强。</p>', '2022-04-22 19:17:04', '3.4k', 8, 1494);
INSERT INTO `t_article` VALUES ('d2aec09910ba41dfaf987574b1f63e68', '编程算法', 9, '详解PyTorch编译并调用自定义CUDA算子的三种方式', 'https://picsum.photos/1920/1080?random&rand=0.774978121596643', '在上一篇教程中，我们实现了一个自定义的CUDA算子add2，用来实现两个Tensor的相加。然后用PyTorch调用这个算子，分析对比了一下和PyTorch原生加法的速度差异，并且详细解释了线程同步给统计时间带来的影响。 上一篇教程：htt', '<p>在上一篇教程中，我们实现了一个自定义的CUDA算子<code>add2</code>，用来实现两个Tensor的相加。然后用PyTorch调用这个算子，分析对比了一下和PyTorch原生加法的速度差异，并且详细解释了线程同步给统计时间带来的影响。</p> \n<p><strong>上一篇教程：</strong><br><a href=\"https://godweiyang.com/2021/03/18/torch-cpp-cuda\">https://godweiyang.com/2021/03/18/torch-cpp-cuda</a></p> \n<p>本篇教程我们主要讲解如何<strong>编译并调用</strong>之前我们写好的CUDA算子，完整的代码还是放在了github仓库，欢迎大家star并fork：<br><a href=\"https://github.com/godweiyang/torch-cuda-example\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/torch-cuda-example</a></p> \n<p>我保证，这是你网上简单<strong>最为精简、最容易看懂</strong>的一套代码了，因为我自己也是刚入门，复杂的我也看得累。</p> \n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2>\n<ul> \n <li>NVIDIA Driver: 418.116.00</li> \n <li>CUDA: 11.0</li> \n <li>Python: 3.7.3</li> \n <li>PyTorch: 1.7.0+cu110</li> \n <li>CMake: 3.16.3</li> \n <li>Ninja: 1.10.0</li> \n <li>GCC: 8.3.0</li> \n</ul> \n<p>这是我自己的运行环境，显卡是V100，其他环境不保证可以运行，但是大概率没问题，可能要做轻微修改。</p> \n<h2 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h2>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">├── include\n│   └── add2.h # cuda算子的头文件\n├── kernel\n│   ├── add2_kernel.cu # cuda算子的具体实现\n│   └── add2.cpp # cuda算子的cpp torch封装\n├── CMakeLists.txt\n├── LICENSE\n├── README.md\n├── setup.py\n├── time.py # 比较cuda算子和torch实现的时间差异\n└── train.py # 使用cuda算子来训练模型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>代码结构还是很清晰的。<code>include</code>文件夹用来放cuda算子的头文件（<code>.h</code>文件），里面是cuda算子的定义。<code>kernel</code>文件夹放cuda算子的具体实现（<code>.cu</code>文件）和cpp torch的接口封装（<code>.cpp</code>文件）。</p> \n<p>最后是python端调用，我实现了两个功能。一是比较运行时间，上一篇教程详细讲过了；二是训练一个PyTorch模型，这个下一篇教程再来详细讲述。</p> \n<h2 id=\"编译cpp和cuda文件\"><a href=\"#编译cpp和cuda文件\" class=\"headerlink\" title=\"编译cpp和cuda文件\"></a>编译cpp和cuda文件</h2>\n<h3 id=\"JIT\"><a href=\"#JIT\" class=\"headerlink\" title=\"JIT\"></a>JIT</h3>\n<p>JIT就是just-in-time，也就是即时编译，或者说动态编译，就是说在python代码运行的时候再去编译cpp和cuda文件。</p> \n<p>JIT编译的方法上一篇教程已经演示过了，只需要在python端添加<code>load</code>代码即可：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>cpp_extension <span class=\"token keyword\">import</span> load\ncuda_module <span class=\"token operator\">=</span> load<span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"add2\"</span><span class=\"token punctuation\">,</span>\n                   extra_include_paths<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   sources<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel/add2.cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kernel/add2_kernel.cu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                   verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\ncuda_module<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>需要注意的就是两个参数，<code>extra_include_paths</code>表示包含的头文件目录，<code>sources</code>表示需要编译的代码，一般就是<code>.cpp</code>和<code>.cu</code>文件。</p> \n<p>cpp端用的是pybind11进行封装：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">PYBIND11_MODULE</span><span class=\"token punctuation\">(</span>TORCH_EXTENSION_NAME<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"torch_launch_add2\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">&amp;</span>torch_launch_add2<span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"add2 kernel warpper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>JIT编译看起来非常的简单，运行过程中也基本没有碰到坑，非常顺利。</p> \n<p>运行成功的话可以看到Ninja调用了三条命令来编译：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[1/2] nvcc -c add2_kernel.cu -o add2_kernel.cuda.o\n[2/3] c++ -c add2.cpp -o add2.o\n[3/3] c++ add2.o add2_kernel.cuda.o -shared -o add2.so<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>由于输出太长，我省略了多数的参数信息，并精简了指令。可以看出先是调用<code>nvcc</code>编译了<code>.cu</code>，生成了<code>add2_kernel.cuda.o</code>；然后调用<code>c++</code>编译<code>add2.cpp</code>，生成了<code>add2.o</code>；最后调用<code>c++</code>生成动态链接库<code>add2.so</code>。</p> \n<h3 id=\"Setuptools\"><a href=\"#Setuptools\" class=\"headerlink\" title=\"Setuptools\"></a>Setuptools</h3>\n<p>第二种编译的方式是通过Setuptools，也就是编写<code>setup.py</code>，具体代码如下：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> setuptools <span class=\"token keyword\">import</span> setup\n<span class=\"token keyword\">from</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>cpp_extension <span class=\"token keyword\">import</span> BuildExtension<span class=\"token punctuation\">,</span> CUDAExtension\n\nsetup<span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"add2\"</span><span class=\"token punctuation\">,</span>\n    include_dirs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"include\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    ext_modules<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n        CUDAExtension<span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"add2\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">[</span><span class=\"token string\">\"kernel/add2.cpp\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"kernel/add2_kernel.cu\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    cmdclass<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n        <span class=\"token string\">\"build_ext\"</span><span class=\"token punctuation\">:</span> BuildExtension\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>编写方法也非常的常规，调用的是<code>CUDAExtension</code>。需要在<code>include_dirs</code>里加上头文件目录，不然会找不到头文件。</p> \n<p>cpp端用的是pybind11进行封装：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">PYBIND11_MODULE</span><span class=\"token punctuation\">(</span>TORCH_EXTENSION_NAME<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"torch_launch_add2\"</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">&amp;</span>torch_launch_add2<span class=\"token punctuation\">,</span>\n          <span class=\"token string\">\"add2 kernel warpper\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>接着执行：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 setup.py install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>这样就能生成动态链接库，同时将<code>add2</code>添加为python的模块了，可以直接<code>import add2</code>来调用。</p> \n<p>如果执行正常的话，也是可以看到两条编译命令的：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">[1/2] nvcc -c add2_kernel.cu -o add2_kernel.o\n[2/2] c++ -c add2.cpp -o add2.o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre> \n<p>然后会执行第三条：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">x86_64-linux-gnu-g++ -shared add2.o add2_kernel.o -o add2.cpython-37m-x86_64-linux-gnu.so<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre> \n<p>最后同样生成了一个动态链接库，不过python端我们不需要加载这个动态链接库，因为setuptools已经帮我们把cuda算子调用的接口注册到python模块里了，直接import即可：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\n<span class=\"token keyword\">import</span> add2\nadd2<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>需要注意的是，这里我踩了一个坑，<strong><code>.cpp</code>和<code>.cu</code>文件名不要相同，也最好不要取容易与python自带库重复的名字</strong>。此外要先<code>import torch</code>，然后再<code>import add2</code>，不然也会报错。</p> \n<h3 id=\"CMake\"><a href=\"#CMake\" class=\"headerlink\" title=\"CMake\"></a>CMake</h3>\n<p>最后就是cmake编译的方式了，要编写一个<code>CMakeLists.txt</code>文件，代码如下：</p> \n<pre class=\"line-numbers language-cmake\"><code class=\"language-cmake\">cmake_minimum_required(VERSION 3.1 FATAL_ERROR)\n# 修改为你自己的nvcc路径，或者删掉这行，如果能运行的话。\nset(CMAKE_CUDA_COMPILER \"/usr/local/cuda/bin/nvcc\")\nproject(add2 LANGUAGES CXX CUDA)\n\nfind_package(Torch REQUIRED)\nfind_package(CUDA REQUIRED)\nfind_library(TORCH_PYTHON_LIBRARY torch_python PATHS \"${TORCH_INSTALL_PREFIX}/lib\")\n\n# 修改为你自己的python路径，或者删掉这行，如果能运行的话。\ninclude_directories(/usr/include/python3.7)\ninclude_directories(include)\n\nset(SRCS kernel/add2.cpp kernel/add2_kernel.cu)\nadd_library(add2 SHARED ${SRCS})\n\ntarget_link_libraries(add2 \"${TORCH_LIBRARIES}\" \"${TORCH_PYTHON_LIBRARY}\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这里踩了好几个大坑。首先是找不到nvcc的路径，于是第3行先设置了一下，当然如果你删了也能跑那就更好。然后是找不到python的几个头文件，于是加上了第11行，同样如果你删了也能跑那就更好。最后是一个巨坑，没有链接<code>TORCH_PYTHON_LIBRARY</code>，导致动态链接库生成成功了，但是调用执行一直报错，所以加上了第8行和第17行。</p> \n<p>cpp端用的是<code>TORCH_LIBRARY</code>进行封装：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">TORCH_LIBRARY</span><span class=\"token punctuation\">(</span>add2<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    m<span class=\"token punctuation\">.</span><span class=\"token function\">def</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"torch_launch_add2\"</span><span class=\"token punctuation\">,</span> torch_launch_add2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>这里不再使用pybind11，因为我的pybind11没有使用conda安装，会出现一些编译问题，详见：<a href=\"https://github.com/pybind/pybind11/issues/1379#issuecomment-489815562\" target=\"_blank\" rel=\"noopener\">https://github.com/pybind/pybind11/issues/1379#issuecomment-489815562</a>。</p> \n<p>编写完后执行下面编译命令：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">mkdir build\ncd build\ncmake -DCMAKE_PREFIX_PATH=\"$(python3 -c \'import torch.utils; print(torch.utils.cmake_prefix_path)\')\" ../\nmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p>最后会在<code>build</code>目录下生成一个<code>libadd2.so</code>，通过如下方式在python端调用：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> torch\ntorch<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>load_library<span class=\"token punctuation\">(</span><span class=\"token string\">\"build/libadd2.so\"</span><span class=\"token punctuation\">)</span>\ntorch<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>add2<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<p>如果编译成功的话，可以看到如下输出信息：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">Building CXX object CMakeFiles/add2.dir/kernel/add2.cpp.o\n[ 66%] Building CUDA object CMakeFiles/add2.dir/kernel/add2_kernel.cu.o\n[100%] Linking CXX shared library libadd2.so\n[100%] Built target add2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"执行python\"><a href=\"#执行python\" class=\"headerlink\" title=\"执行python\"></a>执行python</h2>\n<p>这里我实现了两个功能，代码都很简单，一个是测试时间，一个是训练模型。都可以通过参数<code>--compiler</code>来指定编译方式，可供选择的就是上面提到的三种：jit、setup和cmake。</p> \n<h3 id=\"比较运行时间\"><a href=\"#比较运行时间\" class=\"headerlink\" title=\"比较运行时间\"></a>比较运行时间</h3>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 time.py --compiler jit\npython3 time.py --compiler setup\npython3 time.py --compiler cmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"训练模型\"><a href=\"#训练模型\" class=\"headerlink\" title=\"训练模型\"></a>训练模型</h3>\n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">python3 train.py --compiler jit\npython3 train.py --compiler setup\npython3 train.py --compiler cmake<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>\n<p>至此三种编译cuda算子并python调用的方式基本都囊括了，下一篇教程将讲讲PyTorch如何将自定义cuda算子加入到计算图中，并实现前向和反向传播，最终训练模型。</p>', '2022-04-22 02:32:10', '1.1k', 5, 6745);
INSERT INTO `t_article` VALUES ('d71586ff187344219159f62d3813b004', '编程算法', 12, '【每日算法Day 79】所有人都会做的入门题，但是能看出你的代码能力！', 'http://47.96.31.161:9000/my-file/img13.jpg', '关注公众号【算法码上来】，每日算法干货马上就来！ 这两天要帮老师录制一下题解视频，所以题目挑简单一点的，减（shui）轻（liang）大（pian）家（wen）压（zhang）力。 题目链接LeetCode 面试题 08.01.', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<blockquote> \n <p>这两天要帮老师录制一下题解视频，所以题目挑简单一点的，减（shui）轻（liang）大（pian）家（wen）压（zhang）力。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/three-steps-problem-lcci/\" title=\"LeetCode 面试题 08.01. 三步问题\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 08.01. 三步问题</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>三步问题。有个小孩正在上楼梯，楼梯有 $n$ 阶台阶，小孩一次可以上 $1$ 阶、$2$ 阶或 $3$ 阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模 $1000000007$。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 3 \n输出：\n4\n解释：\n有四种走法<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 5\n输出：\n13<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这道题是动态规划入门题，我相信大家都会做，如果不会做，那就当我没说过这句话。</p> \n<p>令 $f[i]$ 为上 $i$ 个台阶的方案数，那么最后一步可以是跳 $1$ 步，或者跳 $2$ 步，或者跳 $3$ 步过去的，所以就有：<br>$$<br>f[i] = f[i-1] + f[i-2] + f[i-3]<br>$$<br>初始情况就是 $f[1] = 1, f[2] = 2, f[3] = 4$ 。</p> \n<p>然后利用取模的加法公式，可以每算出一个 $f[i]$ 都取一下模。</p> \n<p>当然了这题太水了，我主要就是想看看大家会怎么实现呢？</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"定义长度为-n-的数组\"><a href=\"#定义长度为-n-的数组\" class=\"headerlink\" title=\"定义长度为 $n$ 的数组\"></a>定义长度为 $n$ 的数组</h3>\n<p>最朴素的方法当然是定义长度为 $n$ 的数组，然后算就完事了，代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll p <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1e6</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    ll f<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span>i<span class=\"token number\">-3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"定义四个变量\"><a href=\"#定义四个变量\" class=\"headerlink\" title=\"定义四个变量\"></a>定义四个变量</h3>\n<p>但是这样太费空间了啊，其实每次只需要用到之前的三个状态就行了，然后还要用个临时变量用来交换状态值，代码如下：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll p <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        ll a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> p<span class=\"token punctuation\">;</span>\n            a <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n            b <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            c <span class=\"token operator\">=</span> d<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"定义长度为-3-的数组\"><a href=\"#定义长度为-3-的数组\" class=\"headerlink\" title=\"定义长度为 $3$ 的数组\"></a>定义长度为 $3$ 的数组</h3>\n<p>但是用 $4$ 个变量也太丑陋了，对于我这种处女座患者（对不起我是射手座）来说，完全无法忍受！</p> \n<p>所以我直接定义了一个长度为 $3$ 的数组，然后下标对 $3$ 取模来实现循环数组，这样代码看起来就很舒服啦：</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ll p <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ll f<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>应读者要求，再来个 <code>python</code> 代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">waysToStep</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        f <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>i<span class=\"token number\">-2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%=</span> <span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> int<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 08:45:04', '2.7k', 11, 9708);
INSERT INTO `t_article` VALUES ('d9af20871c9c4ef5bcee39f33be248a3', '随笔', 14, '情人节，情人结，情人劫', 'https://picsum.photos/1920/1080?random&rand=0.2992169707303747', '首先还是祝各位有情人的、没情人的都节日快乐~ 为什么突然挑这个时间写文章呢，一是好几天没发了再水水，二是太闷了唠唠嗑，三是抒发一下近来的情感。 先说说我的择偶标准的变化历程吧。刚上大学时，我还是投身学习的小屁孩，那时候只想找一个系，一个班的', '<p>首先还是祝各位有情人的、没情人的都节日快乐~</p> \n<p>为什么突然挑这个时间写文章呢，一是好几天没发了再水水，二是太闷了唠唠嗑，三是抒发一下近来的情感。</p> \n<p>先说说我的择偶标准的变化历程吧。刚上大学时，我还是投身学习的小屁孩，那时候只想找一个系，一个班的，天天腻在一起，一起上课吃饭自习，有时间呢就出去玩玩，典型的校园青春剧咯。当然因为很多事做的不到位，后来就结束了。一直到现在，都没有经历过下一段。这期间，我的择偶观不断发生着变化，准确来说，是越来越宽松。从一个系扩大到了一个学校，扩大到了一个上海，当然仍然无法接受异地，腻在一起的心依旧没有磨灭。颜值上我也没有很高标准，我对我自己也有自知之明。开始越来越看中未来的计划了，考虑很多现实因素。以后不在上海工作？pass。门不当户不对？对不起我怂了。圈子差太多？咱们聊不来。等等等等。考虑的越多，越怂，以至于没有一个可以进入我的考虑范围之内了。我室友曾经跟我说过，考虑那么多干嘛，先谈着不就行了。再小几岁也许我会这么想吧，现在不小了，到了谈婚论嫁的年龄了，太现实了，我会想到以后很远很远的日子，不想随随便便了，最好下一次就是最后一次。可能28岁以前找不到的话，就要接受相亲的事实了吧，直奔目的，也挺好，就跟做买卖一样。其实择偶标准这方面都是活的，我最最最看重的就是跟我能聊得来，性格相合，有差距无所谓，我的可塑性还是不错的，都好调节。如果上来就聊不来，那就基本gg了，我这么擅长聊天的人都能聊死，我只能说确实不适合。</p> \n<p>再说说我是个什么样的人吧，很多人可能对我有很大的误解。我是一个经历非常简单的人，26年来应该除了学习、一段恋爱、实习工作、游戏，再无他物。我也是一个恋爱或人生理论家、鸡汤大师，我说过，我很擅长开导人，我也很少不回别人的消息。所以可能在我单身的时候，会经常看到我的聊天列表里面的人不停的换，公司来了两个学妹实习吃个饭也能被人逮到把柄，所以自然而然会把我往海王那里引导。实际上寡王差不多吧，不聊感情不聊骚，只是出于学长之类的身份给予一些必要的帮助吧。而且我是一个很有原则的人，只要我有了目标，不管是将来进行时还是现在进行时，我都不会再和其他异性闲聊了，对自己负责，对她也是负责。我的判断能力也挺强的吧，很难被他人的观点左右，我只会根据自己的判断，去决定网上的观点是对还是错，对的我吸收了，错的我一笑了之，不会当真。这也导致了我一定程度上的独立性，看到网上的恋爱教学、人生教学、成功学、营销大师这种，我基本上都当段子看，不全信，不茫然跟从，甚至有些会在心里骂讲的什么玩意。我也很擅长开导人，失恋了、考验了、找工作了、发论文了等等等等，都有人找我问过，理论我都能说一大堆，鸡汤我也能编的停不下来。我很擅长从我的实际情况和我身边人的实际情况出发，用讲故事的形式告诉那些人人生的道理，而不是网上的教学那样张口就来大道理。我一直觉得，身边人都有那么多好的范例了，为什么还要去相信那些虚无的，没有见过的事物。当然身边的人也不能全部借鉴，还是靠我自己的判断力，哪些人的经历我觉得适合我，哪些人我觉得三观不正，有问题，我要远离。我都有自己的判断方式，近朱者赤，近墨者黑，从小到大我都是这样。生活上，我也很简单，现在每天上班，下班就回来打游戏，说白了还是比较懒。但是生活情调还是要有的，香薰啥的小物件我喜欢摆摆，起泡酒这种提高生活幸福感的东西还是要有的。我的抗压能力应该说还可以，虽然我很容易被压力困扰，学业压力、工作压力、情感压力。但是我还是比较能自我排解的吧，喝起泡酒微醺、写写文章就像现在这样、和室友聊聊、出去透透气，都能想开不少。没有什么大不了的，这个没成，大不了继续努力工作嘛，没有谁离不开谁。</p> \n<p>其实恋爱观这方面我也改变了很多想法了，以前的我很喜欢网聊，主要还是因为宅，刚开始肯定都是网上聊聊。那么就会有一个问题，有些不喜欢网聊的女生就会长时间不回你。当然可能原因很多，可能你是鱼，那你就也晾着就行了。也可能她是真的喜欢线下，那就要学会习惯，在她不回你消息的时候，不要再去想想想了，想她为什么还是不回我啊，她到底在干嘛呀，她到底是不是故意晾着我啊。大可不必，做好你自己的事就行了，发完你自己的消息，然后就去认真工作，提升自己，变得更好，吸引才是最重要的。当然这方面我还是没有完全适应呢，正在努力习惯。</p> \n<p>关于未来，我的计划其实是和绝大多数人一样的，很普通很平常。几年之内攒够首付的钱，在近郊附近买一套不大不小的房，距离在我和她公司的中间，看情况可以更靠近她一点，当然近地铁优先。若干年之后卖掉再换大的，定型。然后就是带小孩了，996的工作可能下班晚了点，谁有空谁接送，如果是两个程序员，那我真没想过该怎么办。双方父母肯定也会来带，一带一个月那种，然后带回老家带带之类的。这些话题都太远了，而且问题都不大，都不是什么难点，不多说了。</p> \n<p>放平心态，淡化得失，无论成功与否，都不要太放心上，对人要用心，对自己更要上心。</p> \n<p>还有好多没想得起来的，没写在文字里，以后慢慢聊吧。</p> \n<p>祝好。</p>', '2022-04-22 10:59:53', '9.5k', 6, 3823);
INSERT INTO `t_article` VALUES ('da1d43ad238a4efaade1296b4a16bf95', '编程算法', 18, '【每日算法Day 103】老题新做，几乎不会有人想到的解法，它来了', 'https://picsum.photos/1920/1080?random&rand=0.554482249776144', '前两天 Day 99 的时候，做过一道顺子的题目，当时有一个网友的妙解有点没看懂，今天我来给大家详细讲解一下。 题目链接LeetCode 846. 一手顺子 往期回顾：【每日算法Day 99】你们可能不知道只用20万赢到578万是什么概', '<blockquote> \n <p>前两天 Day 99 的时候，做过一道顺子的题目，当时有一个网友的妙解有点没看懂，今天我来给大家详细讲解一下。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/hand-of-straights/\" title=\"LeetCode 846. 一手顺子\" target=\"_blank\" rel=\"noopener\">LeetCode 846. 一手顺子</a></p> \n<p><strong>往期回顾：</strong><br><a href=\"https://godweiyang.com/2020/04/13/leetcode-846/\" title=\"【每日算法Day 99】你们可能不知道只用20万赢到578万是什么概念\">【每日算法Day 99】你们可能不知道只用20万赢到578万是什么概念</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>卢本伟有一手（hand）由整数数组给定的牌。 </p> \n<p>现在她想把牌重新排列成组，使得每个组的大小都是 <code>W</code>，且由 <code>W</code> 张连续的牌组成。</p> \n<p>如果她可以完成分组就返回 <code>true</code>，否则返回 <code>false</code>。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li><code>1 &lt;= hand.length &lt;= 10000</code></li> \n <li><code>0 &lt;= hand[i] &lt;= 10^9</code></li> \n <li><code>1 &lt;= W &lt;= hand.length</code></li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nhand = [1,2,3,6,2,3,4,7,8], W = 3\n输出:\ntrue\n解释：\n卢本伟的手牌可以被重新排列为 [1,2,3]，[2,3,4]，[6,7,8]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nhand = [1,2,3,4,5], W = 4\n输出:\nfalse\n解释：\n卢本伟的手牌无法被重新排列成几个大小为 4 的组。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题的妙解来自于题解区网友 <code>zhanzq</code>，当时没怎么看懂，现在我来给大家讲解一下。</p> \n<p><a href=\"https://leetcode-cn.com/problems/hand-of-straights/solution/onlognsuan-fa-by-zhanzq/\" title=\"网友题解地址\" target=\"_blank\" rel=\"noopener\">网友题解地址</a></p> \n<p>我们用一个例子来讲解：<br><img src=\"1.jpg\" alt></p> \n<p>假设 <code>W = 3</code>，给定的手牌正好是三个顺子：<code>[1,2,3], [2,3,4], [6,7,8]</code> 。</p> \n<p>那么我们统计出每张牌的数量，并且从小到大排序，记为 <code>count</code> ，这里就是 <code>[1,2,2,1,0,1,1,1,0]</code> ，并且在数字不连续处和末尾补 <code>0</code> （作用后面会详细说）。</p> \n<ul> \n <li>然后从小到大遍历每一张牌，首先 <code>1</code> 只有一张，那么如果它和后面牌能构成顺子，那么 <code>2, 3</code> 至少要有一张才行，于是 <code>total</code> 数组后面两个位置都加上 <code>1</code> 。</li> \n <li>然后遍历到 <code>2</code> ，因为 <code>2</code> 的数量是大于该位置处的 <code>total</code> 值的，所以 <code>2</code> 的数量足够满足前面的牌顺子要求。此外 <code>2</code> 还会多出一张，那么后面两个位置至少要有一张牌才行，于是 <code>total</code> 后面两个位置再加上 <code>1</code> 。</li> \n <li>然后遍历 <code>3, 4</code> ，发现数量正好都等于 <code>total</code> ，那说明它俩正好和前面的牌构成顺子，一点都不会多余。</li> \n <li>然后遍历到 <code>0</code> 了，这就说明和前面的牌断开了。如果这时候 <code>total</code> 不为 <code>0</code> ，就说明中间缺失了一些牌，前面存在顺子没法补足结尾。而如果最开始没有填充 <code>0</code> 的话，就没有办法判断这里的牌是否和前面连续的，你就有可能把 <code>6</code> 这张牌直接接到 <code>4</code> 后面组成顺子了。</li> \n <li>然后遍历 <code>6, 7, 8</code> 同理，在对应位置处更新 <code>total</code> 就行了。</li> \n <li>最后遍历 <code>0</code> ，发现 <code>total</code> 也是 <code>0</code> ，那就说明整副牌可以构成顺子，完美！</li> \n</ul> \n<p>时间复杂度是 $O(n \\log n + nW)$ ，这题数据不强也可以过的。</p> \n<p>有没有办法优化呢？其实更新 <code>total</code> 这一步可以优化掉 $O(W)$ 这个复杂度，直接 $O(1)$ 更新 <code>total</code> 。</p> \n<ul> \n <li>首先遍历 <code>1</code> ，因为 <code>1</code> 只有一张，那么如果它和后面牌能构成顺子，那么 <code>2, 3</code> 至少要有一张才行。但是这里我们不对这几张牌的 <code>total</code> 加上一，而是在这个顺子结尾的下一张牌处的 <code>deltas</code> 减去 <code>1</code> 。</li> \n <li>然后遍历 <code>2</code> ，那么这时候没有 <code>total</code> 了，怎么计算应该扣除多少前面顺子需要的 <code>2</code> 呢？其实只需要用前一张牌的牌数加上当前的 <code>deltas</code> 值就行了。为什么呢？前面一张牌有多少张，你当前这张就得至少有那么多去构成顺子，但是如果前面一张牌是某些顺子的结尾，你还得扣掉一些，而扣掉的数值正好就是当前的 <code>deltas</code> ，这在前面顺子的开头处已经记录过了。</li> \n <li>后面操作类似，就不详细阐述了。</li> \n</ul> \n<p>这种方法精髓就在于，不需要直接更新所有的 <code>total</code> 值，只需要在顺子结尾下一个元素处更新一下 <code>deltas</code> 就行了，每次的 <code>total</code> 可以通过上一张牌的 <code>count</code> 和当前的 <code>deltas</code> 推算出来。</p> \n<p>这样总的时间复杂度就降到了 $O(n \\log n + n)$，近似 $O(n \\log n)$ 。</p> \n<p>不得不说，这个方法还是非常妙的，反正我是一下子想不到的，看了代码都想了很久才想通。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"暴力更新（c-）\"><a href=\"#暴力更新（c-）\" class=\"headerlink\" title=\"暴力更新（c++）\"></a>暴力更新（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">total</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> total<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> delta <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> total<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token operator\">+</span>W <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> total<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> delta<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> total<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isNStraightHand</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> hand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>W <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> hand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"优化（c-）\"><a href=\"#优化（c-）\" class=\"headerlink\" title=\"优化（c++）\"></a>优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">deltas</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            pre <span class=\"token operator\">+</span><span class=\"token operator\">=</span> deltas<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> delta <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> pre<span class=\"token punctuation\">;</span>\n                pre <span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> W <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> deltas<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>W<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> delta<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pre <span class=\"token operator\">&gt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isNStraightHand</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> hand<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> W<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>W <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">%</span>W<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> hand<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> hand<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hand<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> hand<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        count<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 16:26:18', '9.3k', 11, 8948);
INSERT INTO `t_article` VALUES ('da53183633ba422495999d8d6d02c458', '编程算法', 8, '每日算法系列【LeetCode 329】矩阵中的最长递增路径', 'https://picsum.photos/1920/1080?random&rand=0.7617864032156463', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数矩阵，找出最长递增路径的长度。 对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。 示例1 输入： nu', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数矩阵，找出最长递增路径的长度。</p> \n<p>对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = \n[\n  [9,9,4],\n  [6,6,8],\n  [2,1,1]\n]\n输出：\n4\n解释：\n最长递增路径为 [1, 2, 6, 9]。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = \n[\n  [3,4,5],\n  [3,2,6],\n  [2,2,1]\n]\n输出：\n4\n解释：\n最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"DFS-记忆化搜索\"><a href=\"#DFS-记忆化搜索\" class=\"headerlink\" title=\"DFS+记忆化搜索\"></a>DFS+记忆化搜索</h3>\n<p>对于点 $[x, y]$ 来说，以它为终点的最长递增路径一定会经过上下左右四个点其一。所以如果它四周的点小于 $[x, y]$ ，就递归遍历四周的点，然后以 $[x, y]$ 为终点的最长递增路径长度就是以四周小于它的点为终点的最长递增路径长度加 $1$ ：<br>$$<br>dfs(x, y) = \\max{\\{dfs(x-1, y), dfs(x+1, y), dfs(x, y-1), dfs(x, y+1)\\}} + 1<br>$$<br>注意这里四周的点首先不能超过边界，然后数值上必须小于 $[x, y]$ 。</p> \n<p>但是直接这样会有很多重复计算，所以我们必须用记忆化搜索，用 $dp[x][y]$ 保存搜索结果。如果发现已经计算过了，就不再递归，直接返回结果。</p> \n<p>最终每个格子最多遍历一遍，时间复杂度是 $O(nm)$ 。</p> \n<h3 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h3>\n<p>把每个格子当作一个点，然后从数值小的点向四周比它大的点连一条有向边，最终一定会形成一个有向无环图，问题就转变成了求有向无环图中的最长路径。</p> \n<p>方法是先找到所有入度为 $0$ 的结点，然后放入一个队列，依次从队列里取出结点，从图中删除这些结点。然后图中就出现了新的入度为 $0$ 的结点了，它们路径长度加 $1$ 。接着重复上面的操作，直到最后没有结点。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"DFS-记忆化搜索（c-）\"><a href=\"#DFS-记忆化搜索（c-）\" class=\"headerlink\" title=\"DFS+记忆化搜索（c++）\"></a>DFS+记忆化搜索（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">longestIncreasingPath</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> dp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">,</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"拓扑排序（c-）\"><a href=\"#拓扑排序（c-）\" class=\"headerlink\" title=\"拓扑排序（c++）\"></a>拓扑排序（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">longestIncreasingPath</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> matrix<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">degree</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> matrix<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        degree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>degree<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> matrix<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> matrix<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>degree<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    dp<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 21:26:58', '8.3k', 6, 7809);
INSERT INTO `t_article` VALUES ('dc4d2eac5ec5432e85e2b9c48c2069fe', '编程算法', 31, '【每日算法Day 109】五大解法，带你深入了解完全背包方案数', 'https://picsum.photos/1920/1080?random&rand=0.9288383884291336', '今天这题是完全背包问题 + 背包问题方案数，我一共列举了 5 种解法，层层递进优化。并且从两个角度殊途同归，最终优化到同一个式子。强烈建议掌握，对理解背包问题有很大帮助。 题目链接LeetCode 面试题 08.11. 硬币 题目描述给', '<blockquote> \n <p>今天这题是完全背包问题 + 背包问题方案数，我一共列举了 5 种解法，层层递进优化。并且从两个角度殊途同归，最终优化到同一个式子。强烈建议掌握，对理解背包问题有很大帮助。</p> \n</blockquote> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/coin-lcci/\" title=\"LeetCode 面试题 08.11. 硬币\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题 08.11. 硬币</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定数量不限的硬币，币值为 <code>25</code> 分、<code>10</code> 分、<code>5</code> 分和 <code>1</code> 分，编写代码计算 <code>n</code> 分有几种表示法。(结果可能会很大，你需要将结果模上 <code>1000000007</code>)</p> \n<p><strong>说明：</strong> </p> \n<ul> \n <li><code>0 &lt;= n (总金额) &lt;= 1000000</code></li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 5\n输出:\n2\n解释：\n有两种方式可以凑成总金额:\n5=5\n5=1+1+1+1+1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nn = 10\n输出:\n4\n解释：\n有四种方式可以凑成总金额:\n10=10\n10=5+5\n10=5+1+1+1+1+1\n10=1+1+1+1+1+1+1+1+1+1<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先我们规定一些记号，用 $p[i]$ 来表示第 $i$ 种硬币的面值，用 $dp[i][j]$ 表示用前 $i$ 种硬币组成面值 $j$ 的方案数。令 $n$ 表示需要表示的面值，$m$ 表示硬币数。</p> \n<h3 id=\"朴素想法（错误）\"><a href=\"#朴素想法（错误）\" class=\"headerlink\" title=\"朴素想法（错误）\"></a>朴素想法（错误）</h3>\n<p>首先我们可以想到，最朴素的方法不就是<strong>组成面值 $j$ 的方案数等于所有组成面值 $j-p[k]$ 的方案数之和</strong>：<br>$$<br>dp[i][j] = \\sum_{k=0}^{i}{dp[i][j-p[k]]}<br>$$</p> \n<p>但是这样有个很严重的问题，就是会产生重复计算，也就是将 <code>6 = 1 + 5</code> 和 <code>6 = 5 + 1</code> 视为两种情况。</p> \n<h3 id=\"动态规划-1\"><a href=\"#动态规划-1\" class=\"headerlink\" title=\"动态规划 1\"></a>动态规划 1</h3>\n<p>朴素想法的纠正方法就是，<strong>规定拆解后的数字是有序的</strong>，这样就不会出现重复计算了。</p> \n<p>那么具体怎么实现呢？其实只需要加上一个约束，也就是强制令 $p[k]$ 为组成面值 $j$ 的最大面值硬币。那么用掉它之后，组成面值 $j-p[k]$ 的最大面值硬币仍然只能是 $p[k]$ ，这样转移下去就一定是有序的，不会出现面值突然增大的情况。转移方程只需要修改一下转移后的可用硬币 $i$：<br>$$<br>dp[i][j] = \\sum_{k=0}^{i}{dp[k][j-p[k]]}<br>$$</p> \n<p>时间复杂度 $O(nm^2)$ ，空间复杂度 $O(nm)$ 。</p> \n<h3 id=\"动态规划-2（超时）\"><a href=\"#动态规划-2（超时）\" class=\"headerlink\" title=\"动态规划 2（超时）\"></a>动态规划 2（超时）</h3>\n<p>另一条思考路线是，我们<strong>假设第 $i$ 个硬币用 $k$ 枚，然后枚举所有的 $k$</strong> 就行了。转移方程很好写：<br>$$<br>dp[i][j] = \\sum_{k=0}^{\\lfloor j/p[i] \\rfloor}{dp[i-1][j-k \\cdot p[i]]}<br>$$</p> \n<p>但是这样时间复杂度太高了，直接超时。</p> \n<p>时间复杂度 $O(n^2m)$ ，空间复杂度 $O(nm)$ 。</p> \n<h3 id=\"转移方程优化\"><a href=\"#转移方程优化\" class=\"headerlink\" title=\"转移方程优化\"></a>转移方程优化</h3>\n<blockquote> \n <p>神奇的地方来了，上面两种方法，全部可以优化为同一个式子，仔细看好了。</p> \n</blockquote> \n<p><strong>动态规划 1：</strong> </p> \n<p>首先看第一个方法，转移方程为：<br>$$<br>dp[i][j] = \\sum_{k=0}^{i}{dp[k][j-p[k]]}<br>$$<br>我们令 $i = i - 1$ ，又可以得到：<br>$$<br>dp[i-1][j] = \\sum_{k=0}^{i-1}{dp[k][j-p[k]]}<br>$$<br>两式左右两边相减可以得到：<br>$$<br>dp[i][j] = dp[i-1][j] + dp[i][j-p[i]]<br>$$</p> \n<p><strong>动态规划 2：</strong> </p> \n<p>再看第二个方法，转移方程为：<br>$$<br>dp[i][j] = \\sum_{k=0}^{\\lfloor j/p[i] \\rfloor}{dp[i-1][j-k \\cdot p[i]]}<br>$$<br>令 $j = j - p[i]$ ，又可以得到：<br>$$<br>dp[i][j-p[i]] = \\sum_{k=1}^{\\lfloor j/p[i] \\rfloor}{dp[i-1][j-k \\cdot p[i]]}<br>$$<br>两式左右两边相减可以得到：<br>$$<br>dp[i][j] = dp[i-1][j] + dp[i][j-p[i]]<br>$$</p> \n<p><strong>最终形式：</strong> </p> \n<p>所以，最终<strong>两个方法消去求和之后，形式是一样的！</strong>都是：<br>$$<br>dp[i][j] = dp[i-1][j] + dp[i][j-p[i]]<br>$$</p> \n<p>时间复杂度 $O(nm)$ ，空间复杂度 $O(nm)$ 。</p> \n<h3 id=\"空间优化\"><a href=\"#空间优化\" class=\"headerlink\" title=\"空间优化\"></a>空间优化</h3>\n<p>注意到，上面转移方程每个时刻 $i$ 其实只和 $i-1$ 还有 $i$ 时刻有关，所以可以把第一个维度消除掉。这样转移方程就变为了：<br>$$<br>dp[j] = dp[j] + dp[j-p[i]]<br>$$<br>但是需要特别注意的是，这里一共有三项，分别表示的是第 $i$ 时刻、第 $i-1$ 时刻、第 $i$ 时刻。所以在两层循环遍历的时候，<strong>第一层循环必须是遍历硬币 $i$ ，第二层才是遍历组成的面值 $j$ ，这样才不会导致第 $i-1$ 时刻的值被覆盖掉无法访问。</strong></p> \n<p>时间复杂度 $O(nm)$ ，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"数学法\"><a href=\"#数学法\" class=\"headerlink\" title=\"数学法\"></a>数学法</h3>\n<p>这个方法就只针对本题硬币种类比较少的情况了。</p> \n<p>假设组成面值 $n$ 需要 $i$ 枚 <code>25</code> 分， $a$ 枚 <code>10</code> 分， $b$ 枚 <code>5</code> 分， $c$ 枚 <code>1</code> 分，那么有：<br>$$<br>n = 25i + 10a + 5b + c<br>$$<br>这里 $i$ 我们是需要枚举的，范围是 $[0, \\lfloor n/25 \\rfloor]$ ，所以我们令 $r = n - 25i$，那么就得到了：<br>$$<br>r = 10a + 5b + c<br>$$<br>那么 $a$ 的范围是 $[0, \\lfloor r/10 \\rfloor]$ 。而 $a$ 确定了之后， $b$ 的范围就是 $[0, \\lfloor (r-10a)/5 \\rfloor]$ 。而 $a, b$ 都确定了之后， $c$ 是唯一确定了的。所以最终的方案数就是：<br>$$<br>\\begin{aligned}<br>\\sum_{a=0}^{\\lfloor r/10 \\rfloor}{\\sum_{b=0}^{\\lfloor (r-10a)/5 \\rfloor}{1}} &amp;= \\sum_{a=0}^{\\lfloor r/10 \\rfloor}{(\\lfloor (r-10a)/5 \\rfloor + 1)}\\\\<br>&amp;= \\sum_{a=0}^{\\lfloor r/10 \\rfloor}{(\\lfloor r/5 \\rfloor -2a + 1)}\\\\<br>&amp;= (\\lfloor r/10 \\rfloor + 1)(\\lfloor r/5 \\rfloor + 1) - (\\lfloor r/10 \\rfloor + 1)\\lfloor r/10 \\rfloor \\\\<br>&amp; =(\\lfloor r/10 \\rfloor + 1)(\\lfloor r/5 \\rfloor - \\lfloor r/10 \\rfloor + 1)<br>\\end{aligned}<br>$$</p> \n<p>所以最终我们遍历 $i \\in [0, \\lfloor n/25 \\rfloor]$，然后令 $r = n - 25i$。接着令 $x = \\lfloor r/10 \\rfloor$，$y = \\lfloor r/5 \\rfloor$，最后对 $(x+1)(y-x+1)$ 进行累加就行了：<br>$$<br>\\sum_{i=0}^{\\lfloor n/25 \\rfloor}{(x+1)(y-x+1)}<br>$$</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"动态规划-1（c-）\"><a href=\"#动态规划-1（c-）\" class=\"headerlink\" title=\"动态规划 1（c++）\"></a>动态规划 1（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    ll dp<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> p<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>p<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划-2（超时）（c-）\"><a href=\"#动态规划-2（超时）（c-）\" class=\"headerlink\" title=\"动态规划 2（超时）（c++）\"></a>动态规划 2（超时）（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    ll dp<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">/</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> j<span class=\"token operator\">/</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>k<span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"转移方程优化（c-）\"><a href=\"#转移方程优化（c-）\" class=\"headerlink\" title=\"转移方程优化（c++）\"></a>转移方程优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    ll dp<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">/</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;=</span> p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>M<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"空间优化（c-）\"><a href=\"#空间优化（c-）\" class=\"headerlink\" title=\"空间优化（c++）\"></a>空间优化（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">1000010</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> M <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n    ll dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> M<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&gt;=</span> p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"数学法（c-）\"><a href=\"#数学法（c-）\" class=\"headerlink\" title=\"数学法（c++）\"></a>数学法（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">typedef</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ll<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ll mod <span class=\"token operator\">=</span> <span class=\"token number\">1e9</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">waysToChange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ll res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token operator\">/</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ll r <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">25</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n            ll x <span class=\"token operator\">=</span> r <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> r <span class=\"token operator\">/</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">(</span>res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token operator\">=</span> mod<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2021-01-15 21:52:23', '4.2k', 8, 7380);
INSERT INTO `t_article` VALUES ('dc5161c460364fc9960dfb6c237f36dc', '编程算法', 29, '每日算法系列【LeetCode 1363】形成三的最大倍数', 'https://picsum.photos/1920/1080?random&rand=0.09864545560067228', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。 由于答案可能不在整数数据类型范围内，请以字符串形', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你一个整数数组 digits，你可以通过按任意顺序连接其中某些数字来形成 3 的倍数，请你返回所能得到的最大的 3 的倍数。</p> \n<p>由于答案可能不在整数数据类型范围内，请以字符串形式返回答案。</p> \n<p>如果无法得到答案，请返回一个空字符串。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ndigits = [8,1,9]\n输出：\n\"981\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ndigits = [8,6,7,1,0]\n输出：\n\"8760\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ndigits = [1]\n输出：\n\"\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例4</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\ndigits = [0,0,0,0,0,0]\n输出：\n\"0\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= digits.length &lt;= 10^4</li> \n <li>0 &lt;= digits[i] &lt;= 9</li> \n <li>返回的结果不应包含不必要的前导零。</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先要知道一个小学生都知道的定理：<strong>如果一个数可以被 $3$ 整除，那么它的每一位上的数之和也可以被 $3$ 整除，反之也成立。</strong></p> \n<p>那么问题就转化为了挑选出最多的数，使得和是 $3$ 的倍数。我们可以先求出所有数之和，记为 $sum$ ，然后有如下三种情况：</p> \n<ul> \n <li>如果 $sum \\% 3 = 0$ ，那么所有数都选中就行了。</li> \n <li>如果 $sum \\% 3 = 1$ ，那么必须删掉一个模 $3$ 余 $1$ 的数（按照从小到大顺序删除 1、4、7）。如果这三个数都没有，那就要删除两个模 $3$ 余 $2$ 的数（按照从小到大顺序删除 2、5、8，删除两次）。</li> \n <li>如果 $sum \\% 3 = 2$ ，那么必须删掉一个模 $3$ 余 $2$ 的数（按照从小到大顺序删除 2、5、8）。如果这三个数都没有，那就要删除两个模 $3$ 余 $1$ 的数（按照从小到大顺序删除 1、4、7，删除两次）。</li> \n</ul> \n<p>最终将剩下的数按照从小到大顺序排序，拼接在一起就行了。</p> \n<p>注意如果有前导 $0$ ，就说明答案就是 $0$ 。</p> \n<p>时间复杂度为 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> cnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span><span class=\"token number\">3</span> <span class=\"token operator\">==</span> q <span class=\"token operator\">&amp;&amp;</span> cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    string <span class=\"token function\">largestMultipleOfThree</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">cnt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> digits<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            cnt<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> q <span class=\"token operator\">=</span> sum <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">del</span><span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token operator\">-</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        string res <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>cnt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token string\">\'0\'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'0\'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-07-02 13:55:16', '9.2k', 6, 3888);
INSERT INTO `t_article` VALUES ('dcac4176e22f41b8be5ab7e5685772a7', '随笔', 5, '鼠年最后一篇随笔', 'https://picsum.photos/1920/1080?random&rand=0.1458048440767482', '明天就是除夕了，这应该也是鼠年最后一篇文章了，也达成了第一次在外过年的成就。 今年没有选择回家过年🧨，虽然家在江苏盐城，2小时的🚄就到了，原因很多。 一是懒得做好几次核酸，虽然家里农村管的可能并不严，也不需要啥隔离，但还是嫌麻烦。 二是', '<p>明天就是除夕了，这应该也是鼠年最后一篇文章了，也达成了第一次在外过年的成就。</p> \n<p>今年没有选择回家过年🧨，虽然家在江苏盐城，2小时的🚄就到了，原因很多。</p> \n<p>一是懒得做好几次核酸，虽然家里农村管的可能并不严，也不需要啥隔离，但还是嫌麻烦。</p> \n<p>二是要写毕业论文，在公司写🈶️4k显示器，🈶️我的机械键盘，租房还🈶️我的🖥️可以打打🎮。</p> \n<p>三是在公司还能拿个💰，补贴补贴家用，毕竟6天就顶爸妈两人一个月了。</p> \n<p>毕业论文已经写了大半了，过年申请了加班，认真熟悉一下之后的工作，想尽快融入。</p> \n<p>还是有太多东西不会，和学校里学的都不一样，cuda、DL编译等等太多太多，希望早日能熟悉这块领域。</p> \n<p>过年准备了很多吃的喝的，防止点不到外卖或者店不开门，饿是饿不死，论文也不会写的。</p> \n<p>第一次在外过年，心情倒也没那么失落，也没那么想家，和爸妈也经常视频，也不反对我留下。</p> \n<p>开始学着买🐔金，做一波韭菜，吃一波人口红利了。</p> \n<p>好好攒钱，早日买房，平时吃喝也都在公司食堂，除了房租可能一个月也就花几百，把💰花在对的人和事身上。</p> \n<p>好好❤️自己，❤️👩。</p>', '2021-09-23 21:53:45', '9.4k', 4, 2572);
INSERT INTO `t_article` VALUES ('ddda7437f1bf4d84a8eea72caf091070', '编程算法', 15, '熬了几个通宵，我写了份CUDA新手入门代码', 'https://picsum.photos/1920/1080?random&rand=0.18741536883141163', '在用PyTorch或者TensorFlow搭积木的时候，你是不是也遇到过下面这些情况： 自带的算子及其组合都无法满足你超（bian）常（tai）的计算需求。 自带的算子不可导，需要自己定义反向传播的梯度，例如argmax。 自带的算子太慢', '<p>在用PyTorch或者TensorFlow搭积木的时候，你是不是也遇到过下面这些情况：</p> \n<ul> \n <li>自带的算子及其组合都无法满足你超（bian）常（tai）的计算需求。</li> \n <li>自带的算子不可导，需要自己定义反向传播的梯度，例如<code>argmax</code>。</li> \n <li>自带的算子太慢了，严重影响了你发paper的速度。</li> \n</ul> \n<p><img src=\"1.jpeg\" alt></p> \n<hr> \n<p>这时候你就会想，要是能自己实现一个速度又快、又能满足需求的算子就好了。</p> \n<p>你想到了CUDA，自己写一个CUDA算子不就完事了嘛！</p> \n<p>然后问题又来了，写是写完了，怎么用python代码调用它呢？</p> \n<p>还有一个问题，这个算子它没梯度啊，自动求导机制不顶用了！</p> \n<p>你去网上各种搜索，方法倒是全有，但是源码都好复杂，你一个新手怎么可能有心思看完那么复杂的教程？</p> \n<p><img src=\"2.jpeg\" alt></p> \n<hr> \n<p>这时候，你突然看到了这篇文章，看完后你惊呼：“怎么会有这么简洁的示例代码，这就是我想要的！”</p> \n<p>没错，这就是我熬了好几个通宵，查了无数bug后，写出来的一份示例代码。</p> \n<p>话不多说，先上源码好吧：<br><a href=\"https://github.com/godweiyang/NN-CUDA-Example\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/NN-CUDA-Example</a></p> \n<p>我给它命名为“Neural Network CUDA Example”，简称“NN CUDA Example”，意思就是神经网络调用CUDA的示例。</p> \n<p><img src=\"logo.png\" alt></p> \n<p>那么这玩意到底有啥用呢？目前为止，它可以让你学到下面这些东西：</p> \n<ul> \n <li>最简单的CUDA算子的写法。</li> \n <li>最简洁的PyTorch和TensorFlow封装CUDA算子的方法。</li> \n <li>几种编译CUDA算子的方法。</li> \n <li>python调用CUDA算子的几种方式。</li> \n <li>python中统计CUDA算子运行时间的正确方法。</li> \n <li>PyTorch和TensorFlow自定义算子梯度的方法。</li> \n</ul> \n<p><img src=\"3.jpeg\" alt></p> \n<hr> \n<p>你直呼内行，要是早点能看到这篇文章，能多发好几篇论文啊。</p> \n<p>看完代码，有些细节你还是懵逼了，这这这都是啥意思啊，为啥这么写啊？</p> \n<p>这时候你又看到了几篇教程，哦原来都有讲解，那没事了。</p> \n<ul> \n <li><a href=\"https://godweiyang.com/2021/03/18/torch-cpp-cuda/\">PyTorch自定义CUDA算子教程与运行时间分析</a></li> \n <li><a href=\"https://godweiyang.com/2021/03/18/torch-cpp-cuda-2/\">详解PyTorch编译并调用自定义CUDA算子的三种方式</a></li> \n <li><a href=\"https://godweiyang.com/2021/03/18/torch-cpp-cuda-3/\">三分钟教你如何PyTorch自定义反向传播</a></li> \n</ul> \n<p><img src=\"4.jpeg\" alt></p> \n<hr> \n<p>从那以后，你代码能力飞速提升，一连发了好几篇顶会。</p> \n<p>然后你顺手一键三连，把这篇文章转给了身边有需要的人，个个都夸你发现了宝藏。</p>', '2020-03-19 22:30:52', '3.9k', 8, 5731);
INSERT INTO `t_article` VALUES ('de5149aaa1444ff688ba6a1b6cb03883', '编程算法', 2, '【每日算法Day 86】面试经典题：把数字翻译成字符串', 'https://picsum.photos/1920/1080?random&rand=0.20260454826766894', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 面试题46. 把数字翻译成字符串 题目描述给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/\" title=\"LeetCode 面试题46. 把数字翻译成字符串\" target=\"_blank\" rel=\"noopener\">LeetCode 面试题46. 把数字翻译成字符串</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n12258\n输出:\n5\n解释：\n12258有5种不同的翻译，分别是\"bccfi\", \"bwfi\", \"bczi\", \"mcfi\"和\"mzi\"<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>说明：</strong></p> \n<ul> \n <li>$0 \\le num &lt; 2^{31}$</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>显然这题就是个动态规划问题，我们令 $f[i]$ 表示 $num$ 到第 $i$ 位为止表示的方法数。</p> \n<p>那么我们观察 $num$ 的第 $i$ 位和第 $i-1$ 位，也就是最后两位，记为 $last$。如果 $10 \\le last \\le 25$，那么就可以把这两位合并成一个字母表示，同时也可以分成两个字母表示，所以 $f[i] = f[i-1] + f[i-2]$ 。但是如果 $last &gt; 25$ ，那就只能分成两个字母来表示了，所以 $f[i] = f[i-1]$ 。那如果 $last &lt; 10$ 会怎么样呢？那说明最后两位是 $0x$ 的形式，这种形式没有办法用一个字母表示，所以只能分成两个字母表示，所以 $f[i] = f[i-1]$ 。</p> \n<p>综上，如果 $10 \\le last \\le 25$，就有 $f[i] = f[i-1] + f[i-2]$ ；否则的话就有 $f[i] = f[i-1]$ 。</p> \n<p>当然上面这是把 $num$ 拆成了数字形式的字符串来做的，其实这题也可以直接用递归，这样都不用转变成字符串形式了。</p> \n<p>我们直接令 $f(num)$ 表示数字 $num$ 的方法数。那么最后两位结果就是 $last = num \\% 100$ ，那么如果 $10 \\le last \\le 25$，就有 $f(num) = f(num/10) + f(num/100)$ ；否则的话就有 $f(num) = f(num/10)$ 。递归的终止条件就是，如果 $num &lt; 10$ ，那么只有一种表示方法。</p> \n<p>当然这里递归有重复计算，可以采用记忆化搜索，但是因为复杂度太低了，没有必要。</p> \n<p>时间复杂度为 $O(\\log_{10}{num})$，也就是 $num$ 的位数。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> num<span class=\"token operator\">%</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">&lt;=</span> last <span class=\"token operator\">&amp;&amp;</span> last <span class=\"token operator\">&lt;=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span> res <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">/</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">translateNum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> num <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n        res<span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>translateNum<span class=\"token punctuation\">(</span>num<span class=\"token operator\">//</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">%</span><span class=\"token number\">100</span>\n        <span class=\"token keyword\">if</span> <span class=\"token number\">10</span><span class=\"token operator\">&lt;=</span>last<span class=\"token operator\">&lt;=</span><span class=\"token number\">25</span><span class=\"token punctuation\">:</span> res <span class=\"token operator\">+=</span> self<span class=\"token punctuation\">.</span>translateNum<span class=\"token punctuation\">(</span>num<span class=\"token operator\">//</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 13:24:22', '4.0k', 6, 8504);
INSERT INTO `t_article` VALUES ('e2dc6825793942669011a37b0624e5d3', '编程算法', 10, '三分钟教你如何PyTorch自定义反向传播', 'https://picsum.photos/1920/1080?random&rand=0.07634349478408387', '在前面两篇教程中，我们详细讲解了如何编写cuda算子，并用PyTorch进行调用，并且详细讲述了三种编译cuda算子的方式，具体可以看前面两篇： https://godweiyang.com/2021/03/18/torch-cpp-cud', '<p>在前面两篇教程中，我们详细讲解了如何编写cuda算子，并用PyTorch进行调用，并且详细讲述了三种编译cuda算子的方式，具体可以看前面两篇：</p> \n<p><a href=\"https://godweiyang.com/2021/03/18/torch-cpp-cuda/\">https://godweiyang.com/2021/03/18/torch-cpp-cuda/</a><br><a href=\"https://godweiyang.com/2021/03/21/torch-cpp-cuda-2/\">https://godweiyang.com/2021/03/21/torch-cpp-cuda-2/</a></p> \n<p>本文我们将讲解如何用自定义cuda算子搭建一个简单的神经网络，并实现反向传播，进行模型训练。</p> \n<p>完整的代码还是放在了github仓库，欢迎大家star并fork：<br><a href=\"https://github.com/godweiyang/torch-cuda-example\" target=\"_blank\" rel=\"noopener\">https://github.com/godweiyang/torch-cuda-example</a></p> \n<p>本文主要涉及到的是<code>train.py</code>这个代码，功能是搭建了一个PyTorch模型，并且调用了自定义的cuda算子，实现了自定义的反向传播函数，最终完成训练。</p> \n<h2 id=\"模型描述\"><a href=\"#模型描述\" class=\"headerlink\" title=\"模型描述\"></a>模型描述</h2>\n<p>之前我们实现了一个$a + b$的tensor求和cuda算子，于是我们可以利用它来实现$\\mathcal{L} = a^2 + b^2$。</p> \n<p>最终训练收敛后$a$和$b$都会趋近于0，模型没有输入，只有两个可训练的参数$a$&#x8;和$b$。</p> \n<h2 id=\"搭建模型\"><a href=\"#搭建模型\" class=\"headerlink\" title=\"搭建模型\"></a>搭建模型</h2>\n<p>首先我们还是像正常写PyTorch模型那样搭建一个模型，代码如下：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddModel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        super<span class=\"token punctuation\">(</span>AddModel<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># tensor长度</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n\n        <span class=\"token comment\" spellcheck=\"true\"># 定义可训练参数a和b</span>\n        self<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>Tensor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Parameter<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>Tensor<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 正态分布初始化参数a和b</span>\n        self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>normal_<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>normal_<span class=\"token punctuation\">(</span>mean<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 求a^2与b^2</span>\n        a2 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span>\n        b2 <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>square<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 调用自定义cuda算子对两个平方数求和</span>\n        c <span class=\"token operator\">=</span> AddModelFunction<span class=\"token punctuation\">.</span>apply<span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>重点就在调用自定义cuda算子那一行<code>AddModelFunction.apply()</code>，你也可以写成<code>c = a2 + b2</code>。不过这里我们为了演示如何使用自定义cuda算子，所以不这么干了。</p> \n<h2 id=\"实现自定义cuda算子前向和反向传播\"><a href=\"#实现自定义cuda算子前向和反向传播\" class=\"headerlink\" title=\"实现自定义cuda算子前向和反向传播\"></a>实现自定义cuda算子前向和反向传播</h2>\n<p>下面就是如何实现<code>AddModelFunction.apply()</code>函数了，我们先来看一下具体代码：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">AddModelFunction</span><span class=\"token punctuation\">(</span>Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    @staticmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        c <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>compiler <span class=\"token operator\">==</span> <span class=\"token string\">\'jit\'</span><span class=\"token punctuation\">:</span>\n            cuda_module<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> args<span class=\"token punctuation\">.</span>compiler <span class=\"token operator\">==</span> <span class=\"token string\">\'setup\'</span><span class=\"token punctuation\">:</span>\n            add2<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">elif</span> args<span class=\"token punctuation\">.</span>compiler <span class=\"token operator\">==</span> <span class=\"token string\">\'cmake\'</span><span class=\"token punctuation\">:</span>\n            torch<span class=\"token punctuation\">.</span>ops<span class=\"token punctuation\">.</span>add2<span class=\"token punctuation\">.</span>torch_launch_add2<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> Exception<span class=\"token punctuation\">(</span><span class=\"token string\">\"Type of cuda compiler must be one of jit/setup/cmake.\"</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> c\n\n    @staticmethod\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> grad_output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>grad_output<span class=\"token punctuation\">,</span> grad_output<span class=\"token punctuation\">,</span> None<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>这个类继承的是<code>torch.autograd.Function</code>类，我们可以用它来实现一下无法自动求导的操作，比如<code>argmax</code>这种不可导的函数。</p> \n<p>我们需要实现两个函数，<code>forward</code>和<code>backward</code>，分别用来前向和反向传播，注意都得声明成静态函数。</p> \n<p>前向传播接收多个参数，第一个固定为<code>ctx</code>，用来存储反向传播中可能会用到的一些上下文，比如<code>input</code>和一些前向过程中的中间变量等等，其他参数随你定。然后我们根据上一教程中调用cuda算子的方法计算得到求和结果，进行返回。</p> \n<p>反向传播接收两个参数，第一个同样是<code>ctx</code>，里面存着前向过程中保存的一些上下文变量信息。第二个是<code>grad_output</code>，也就是最终的损失函数对前向传播的返回值求导的结果。在我们这里的模型中，令<br>$$a2 = a^2, b2 = b^2, s = a2 + b2, \\mathcal{L} = s$$<br>那么自定义cuda算子实现的就是$s = a2 + b2$这一步，而<code>grad_output</code>就是$\\frac{\\partial \\mathcal{L}}{\\partial s}$。我们自定义的cuda算子反向传播的导数就是$\\frac{\\partial s}{\\partial a2}$和$\\frac{\\partial s}{\\partial b2}$，然后根据链式求导法则就可以得到损失函数对每个参数的导数了。</p> \n<p>反向传播返回值表示损失函数对前向传播每一个参数的梯度，所以个数必须等于前向传播除了<code>ctx</code>以外的其他参数个数，并且顺序也要一一对应。因为$\\frac{\\partial s}{\\partial a2} = \\frac{\\partial s}{\\partial b2} = 1$，所以返回值就是<code>grad_output</code>，<code>grad_output</code>和<code>None</code>，因为对常数$n$不需要求导，所以直接返回空即可。</p> \n<h2 id=\"训练流程\"><a href=\"#训练流程\" class=\"headerlink\" title=\"训练流程\"></a>训练流程</h2>\n<p>最终训练流程和平常一样：</p> \n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 定义模型</span>\nmodel <span class=\"token operator\">=</span> AddModel<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 将模型中所有参数拷贝到GPU端</span>\nmodel<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token operator\">=</span><span class=\"token string\">\"cuda:0\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 定义优化器</span>\nopt <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 清空优化器缓存</span>\n    opt<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 前向传播</span>\n    output <span class=\"token operator\">=</span> model<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 求loss</span>\n    loss <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 反向传播</span>\n    loss<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\"># 更新参数</span>\n    opt<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> epoch <span class=\"token operator\">%</span> <span class=\"token number\">25</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"epoch {:&gt;3d}: loss = {:&gt;8.3f}\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>epoch<span class=\"token punctuation\">,</span> loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p>最终损失函数降到了0，log信息如下：</p> \n<pre class=\"line-numbers language-shell\"><code class=\"language-shell\">Loading extension module add2...\nInitializing model...\nInitializing optimizer...\nBegin training...\nepoch   0: loss = 1996.658\nepoch  25: loss =  727.122\nepoch  50: loss =  264.796\nepoch  75: loss =   96.431\nepoch 100: loss =   35.117\nepoch 125: loss =   12.789\nepoch 150: loss =    4.657\nepoch 175: loss =    1.696\nepoch 200: loss =    0.618\nepoch 225: loss =    0.225\nepoch 250: loss =    0.082\nepoch 275: loss =    0.030\nepoch 300: loss =    0.011\nepoch 325: loss =    0.004\nepoch 350: loss =    0.001\nepoch 375: loss =    0.001\nepoch 400: loss =    0.000\nepoch 425: loss =    0.000\nepoch 450: loss =    0.000\nepoch 475: loss =    0.000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2>\n<p>这三个教程暂时告一段落了，通过这些简单的例子，应该大致能学会如何自己写cuda算子，并且用PyTorch调用，完成模型训练了。</p> \n<p>更复杂的模型其实基本的原理都是类似的，我不喜欢上来就讲解很复杂的大项目源码，我喜欢抽象出一个最简的example，这样更容易理解底层的原理，而不会被很多冗余的代码干扰。</p>', '2022-04-22 05:02:42', '1.3k', 10, 3893);
INSERT INTO `t_article` VALUES ('e3baa20646154d30a83ae19c2cd9ec9c', '随笔', 21, '摸鱼一年半，我终于摸出了一篇顶会论文', 'https://picsum.photos/1920/1080?random&rand=0.9540088762016209', '就在今天中午，在我失眠了两个晚上之后，ACL 2020 终于发送了录取通知邮件。庆幸的是，我这篇水文竟然也中了。', '<blockquote> \n <p>就在今天中午，在我失眠了两个晚上之后，ACL 2020 终于发送了录取通知邮件。庆幸的是，我这篇水文竟然也中了。</p> \n</blockquote> \n<p><img src=\"1.jpg\" alt=\"第一篇论文中啦，过程很惊险刺激\"></p> \n<p>其实这篇能中我是根本没想到的，在经历了一年多的摸鱼失败之后，在去年最后一个季度我才拍脑袋想了这个诡异的 idea 。然后搞了一两个月交了论文，苦苦等到二月份，没想到 review 评分还可以（4、3.5、2.5）。不过说实话，我感觉 4 分的那个没有 2.5 分的那个看的透彻。最后和老板一顿 rebuttal ，就只能求佛指望 2.5 分的那个提一提分了。最后感谢 2.5 分的评审仔细阅读了我的回复，提了 1 分，但是诡异的是 4 分的评审给我降到了 3.5 分，估计是之前也没仔细看懂细节吧。不过结局是好的，这三位应该都是这个领域很权威的大佬，不然不会看的这么透彻的。最后三个评审和 meta-review 都给出了一些批评性的意见，这也让我又想起了导师在上次碰壁后说过的一句话：他们能认真看并且提出批评意见，说明这个方向还没死掉，还是有人关注的。</p> \n<p><img src=\"2.jpg\" alt></p> \n<p>我的科（mo）研（yu）生涯还得从保完研开始说起。很多人都问过我为啥不保研去清北复交呢？每次我的回答都差不多吧。一是当时确实懒，嫌夏令营啥的好麻烦，保本校舒舒服服啥都不用干。二是当时不知道看了哪里说研究生导师大于学校，而且确实现在的导师超级 nice ，于是我就留下了。三是心想着早半年进实验室不香吗？能多做些科研。事实证明，早进没啥用，都被我打游戏摸鱼耗光了。</p> \n<p><img src=\"4.jpg\" alt=\"我普陀区第一盖伦岂是跟你开玩笑的？\"></p> \n<p>遥想两年前的寒假，那时候刚刚保研不久。进了实验室第一件事就是做毕业设计了，那时候就给我定下了现在的方向——成分句法分析。不过那时候真是啥都不懂，深度学习也刚入门，句法分析看的几篇论文（还是导师丢给我的）竟然都是传统方法的经典论文。于是毕业论文做的就是传统方法夹杂着深度学习，现在看来就是一坨 shi ，效果差到离谱，数据都没处理好，吹的倒是天花乱坠，还混了个优秀毕业论文。早知如此，当初就应该直接看最新的前沿论文，这样不仅毕业论文好写，也能更早的为现在打下坚实的基础。不过像下面这种经典论文还是必看的，虽然方法现在过时了，但是思想有些还是可以借鉴的。</p> \n<p><img src=\"3.jpg\" alt=\"我的启蒙论文\"></p> \n<p>然后就开始第一次顶会投稿了，上来就给我整了个 ACL 2019 。那时候我还没什么想法，论文倒是看了差不多了，然后拍脑袋想了个改编的点子。其实本质上方法没啥大差别，但是当时啥也不懂啊，觉得挺有新意，就愣愣地拿别人的代码改改跑起来了。最后效果也是难以言尽，就高了一丢丢，估计还是实现上的影响或者多次跑取了个最好的。然后憨憨地写了篇论文，导师还给我认真从头到尾修改了好几遍，最后提交了。第一次出结果也慌的很啊，半夜醒来一直看手机邮箱。然后凌晨两点收到的邮件，睡意朦胧中看了眼第一句写着 we are sorry （当时没有 rebuttal）。评分也不高，只有 3.5、2.5、2.5 ，现在看来 3.5 的那个评审还是给足面子了，要我说 2.5 都高了。当时导师就说下了那句让我印象深刻的话：不要怕，应该感到高兴，他们能认真看并且提出批评意见，说明这个方向还没死掉，还是有人关注的。</p> \n<p>这时候应该才二三月份吧，你要问我这还有大半年呢，你干嘛了？是的，我干嘛了呢？我什么都没干，我直接把这篇一个字没改转投了 CoNLL ，心想一个 CCF C 类会议，总能碰碰运气吧？结果还是低分被拒，事实证明这篇果然是坨 shi ，这时候我自己都已经不想看了，索性丢在了一边再也不管它了。而导师这时候安慰我说，CoNLL 别看是个 C 会，不水的，不要气馁。一直到下半年开学，我基本上没有任何新的 idea ，一直都在召唤师峡谷放纵，然后顺带看完了这个方向几乎所有的论文，但是依旧没有任何 idea 。</p> \n<p><img src=\"5.jpg\" alt></p> \n<p>直到有一天，我看着师兄的 ACL 2019 论文，用 GNN 来做依存句法分析。我就想好像还没人用 GNN 来做过成分句法分析，可是哪来的图呢？依存树可以转变成一张图，结点数量是确定的，在完全图上跑 GAT 可以生成出依存树。但是成分树还有中间结点啊，似乎不好办，于是那段时间我一直在想有没有其他的表示方法，可以把成分树也表示成 GAT 可以处理的形式。</p> \n<p>那段时间真的特别迷茫，不知道这条路走不走得下去。每天跟导师聊天都会抱怨，有监督确实做不下去了，这次投完我一定要转无监督了。然后终于有了这篇论文 idea 的雏形，把句法树转成了线性序列，也有办法跑 GAT 了。但是在代码实现上，我这次学乖了，之前一整年我都是在一份效果不是那么好的代码基础上修改的，用的是 DyNet 深度学习框架。但是这次我决定直接在 SOTA 代码，也就是 ACL 2019 交大同学那篇论文代码基础上进行修改。老话说的对的，确实要站在巨人的肩膀上，会少走很多弯路，自己实现确实锻炼代码能力，但是实在是太耗时间了，当时来不及了。</p> \n<p><img src=\"8.jpg\" alt=\"实验室打扫的很干净，烦躁的心情也会好点\"></p> \n<p>那一个多月，我再也没有出现在召唤师峡谷过（可能出现过一两次嘻嘻），每天晚上都熬到了凌晨一两点才走。调参确实辛苦，尝试了各种参数想把效果再调高一点，但是确实已经差不多到顶了，很难上去了。后来讨论中经师兄提醒又加了 dropout ，效果一下子又上去了很多，那时候才看到了一丝希望。做完了各种实验之后，就顺带着开始写论文了。论文写起来其实挺快的，一个星期就能差不多有了初稿。</p> \n<p>不得不说，导师对我的帮助实在是太大了。跑实验那段时间，每天下午都要和我讨论半天模型细节。刚开始他也不是很懂我的 idea，讲了很久他才明白个大概。等论文写完，他改我的初稿，把我一整页的啰嗦证明浓缩成了很精简的几段话。又把我的 introduction 完全重写了一遍，基本上实验之前的部分全都是他撰写和修改的。后来苦等了两个多月，rebuttal 出来了，因为疫情在家只能远程和导师交流。老板又把我的回复完全重写了一遍，真的看起来读起来完全不同了，rebuttal 确实得找有经验的好好写！</p> \n<p><img src=\"6.jpg\" alt=\"非常感谢敬爱的我导\"></p> \n<p>现在总算松了一口气，一直没有论文，其实我挺为毕业感到担忧的。如果这次不中，我都打算直接水个 C 会混毕业了。实习啥的都不用想太好的了，老老实实找个升经验吧。但是现在中了，还是不能松懈，我还是决定继续想 idea 投之后的几个会。英雄联盟中无极剑圣有句台词：真正的大师，永远怀着一颗学徒的心。不能因为达到毕业要求了就开始混日子了。其实这次说白了还是运气好水上的论文，我感觉我还是很菜。看看网上实习都问 LSTM、SVM 之类的细节原理，我就一脸懵逼，平时我都调包啊，细节我哪里记得？其他很多基础知识也都朦朦胧胧早已不记得了。工程代码能力更别谈了，模型都没手撸过，都是修修改改，以后不知道怎么办呢。别人总吹我，你很强啊、牛啊，其实我自己知道的，我算周围人里面比较菜的了，所谓的强都是表面上的和本科那些没啥用的成绩了，科研和课程差别还是太大了。特别是网上认识了很多很多的大佬之后，越发感觉我根本不值得一提。</p> \n<p><img src=\"7.jpg\" alt=\"真正的大师，永远怀着一颗学徒的心\"></p> \n<p>总结我的硕士前半程，一年划水，idea 做废掉了，半年奇思妙想水了一篇顶会。我的经历并不值得学习，但是我还是想提几点也许可以对科研有帮助的小建议：</p> \n<ul> \n <li>积累是一定要的，你做的这个方向一定要了解的差不多，才能知道下一步朝哪发展。</li> \n <li>不要拘泥于只看你方向论文，去看看其他方向论文，甚至看看 CV 的论文，说不定有能直接拿过来用的 idea 。</li> \n <li>idea 挺随缘的，也许是你在吃饭的时候突然蹦出来的。平时走路、吃饭等闲暇时间可以脑子里想一想，我的 idea 就是冲澡的时候想出来的。</li> \n <li>多跟导师、学长们讨论讨论，可以让你少走弯路，甚至把你从错误的方向拉回来。讨论的时候也许能解决你想了很久都没想通的问题。</li> \n <li>站在巨人的肩膀上。论文多看顶会的，代码多看大牛写的。</li> \n <li>平时组会别人讲论文的时候多听听，虽然跟你方向不搭，可能也能拿来用的，对你的 idea 也有很大启发。</li> \n <li>有时间和精力的，可以写博客，写一点论文解读，写的过程可以解决你没看懂的很多问题。</li> \n</ul> \n<p>下面要开始找实习和准备下一阶段工作了，希望中意的几家公司能要我吧哈哈。这里也感谢所有一直以来支持我的朋友们，祝你们早日顶会发到手软。还有我的几个儿子们，不知道什么时候才能开学呢，几个月没见了，请你们的饭局要约起来了。最后微信名终于改掉了（不中 paper 不改名，拜拜~），下面该考虑脱单的事宜了，操劳的爸妈都把乡下老房子装修好了，就等着我领一个回家了，不知道发量日渐稀少可还有人要哦。</p> \n<p><img src=\"9.jpg\" alt></p>', '2022-04-22 18:07:40', '3.6k', 6, 2307);
INSERT INTO `t_article` VALUES ('e3d22ad71a97489dbd0c5e10bfe4efe7', '编程算法', 25, '十大经典排序算法整理汇总（附代码）', 'https://picsum.photos/1920/1080?random&rand=0.8637209342258398', '本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p> \n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p> \n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\" target=\"_blank\" rel=\"noopener\">LeetCode 912. 排序数组</a> 这道题。</p> \n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2>\n<blockquote> \n <p>如果发现表中有错误，请留言告知。</p> \n</blockquote> \n<table> \n <thead> \n  <tr> \n   <th>算法</th> \n   <th>最好</th> \n   <th>最坏</th> \n   <th>平均</th> \n   <th>空间</th> \n   <th align=\"center\">稳定性</th> \n   <th align=\"center\">是否基于比较</th> \n  </tr> \n </thead> \n <tbody>\n  <tr> \n   <td>冒泡排序</td> \n   <td>$O(n)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(1)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>选择排序</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(1)$</td> \n   <td align=\"center\">$\\times$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>插入排序</td> \n   <td>$O(n)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(1)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>快速排序</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(\\log n)$~$O(n)$</td> \n   <td align=\"center\">$\\times$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>归并排序</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>希尔排序</td> \n   <td>$O(n^{1.3})$</td> \n   <td>$O(n^2)$</td> \n   <td>$O(n\\log n)$~$O(n^2)$</td> \n   <td>$O(1)$</td> \n   <td align=\"center\">$\\times$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n  <tr> \n   <td>计数排序</td> \n   <td>$O(n+k)$</td> \n   <td>$O(n+k)$</td> \n   <td>$O(n+k)$</td> \n   <td>$O(n+k)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\times$</td> \n  </tr> \n  <tr> \n   <td>基数排序</td> \n   <td>$O(nk)$</td> \n   <td>$O(nk)$</td> \n   <td>$O(nk)$</td> \n   <td>$O(n+k)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\times$</td> \n  </tr> \n  <tr> \n   <td>桶排序</td> \n   <td>$O(n)$</td> \n   <td>$O(n)$</td> \n   <td>$O(n)$</td> \n   <td>$O(n+m)$</td> \n   <td align=\"center\">$\\checkmark$</td> \n   <td align=\"center\">$\\times$</td> \n  </tr> \n  <tr> \n   <td>堆排序</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(n\\log n)$</td> \n   <td>$O(1)$</td> \n   <td align=\"center\">$\\times$</td> \n   <td align=\"center\">$\\checkmark$</td> \n  </tr> \n </tbody>\n</table> \n<blockquote> \n <p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p> \n</blockquote> \n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p> \n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3>\n<p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p> \n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bubble_sort</a></p> \n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Selection_sort</a></p> \n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Insertion_sort</a></p> \n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Quicksort</a></p> \n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Merge_sort</a></p> \n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Shellsort</a></p> \n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Counting_sort</a></p> \n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Radix_sort</a></p> \n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Bucket_sort</a></p> \n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Heapsort</a></p> \n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2>\n<p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p> \n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p> \n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-</span><span class=\"token operator\">=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maxv <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">&gt;</span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-05-21 17:06:16', '6.5k', 11, 1409);
INSERT INTO `t_article` VALUES ('e5510d792e4c40719e2ee165634d623f', '编程算法', 32, '每日算法系列【LeetCode 658】找到 K 个最接近的元素', 'https://picsum.photos/1920/1080?random&rand=0.45588819827009097', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,4,5], k=4, x=3\n输出：\n[1,2,3,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,4,5], k=4, x=-1\n输出：\n[1,2,3,4]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>k 的值为正数，且总是小于给定排序数组的长度</li> \n <li>数组不为空，且长度不超过 10^4</li> \n <li>数组里的每个元素与 x 的绝对值不超过 10^4</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h3>\n<p>这题要找离 $x$ 最近的 $k$ 个元素，又因为数组是排好序的，所以离 $x$ 最远的元素一定在数组两端。</p> \n<p>那么我们只需要用两个指针，一个指针 $l$ 指着第一个元素，一个指针 $r$ 指着最后一个元素。如果 $r - l \\ge k$ ，那就说明窗口中元素个数大于 $k$ ，那么就要删除一个元素。删除哪个呢？就看 $arr[l]$ 和 $arr[r]$ 谁离 $x$ 更远，就删除谁。如果一样远，就删除大的元素 $arr[r]$ 。就这样删到窗口中只剩 $k$ 个元素为止。</p> \n<p>这个方法时间复杂度是 $O(n)$ 。</p> \n<h3 id=\"二分-滑动窗口\"><a href=\"#二分-滑动窗口\" class=\"headerlink\" title=\"二分+滑动窗口\"></a>二分+滑动窗口</h3>\n<p>如果 $n$ 太大，那么仅仅靠滑动窗口显然不行。注意观察答案所在的窗口可以发现，这个长度为 $k$ 的窗口一定是靠近 $x$ 的，也就是 $x$ 要么在窗口前一个位置，要么在窗口后一个位置，要么在窗口中间某个位置。 $x$ 和窗口中间绝对不可能有其他的数组元素。</p> \n<p>那么我们可以二分找到第一个比 $x$ 大的元素（找第一个比它小的元素也行），然后左右各伸展出 $k$ 的长度，最终答案窗口一定就在这个范围之内。然后继续使用上面的滑动窗口来求解。</p> \n<p>这个方法时间复杂度缩减到了 $O(\\log n + k)$ 。</p> \n<h3 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h3>\n<p>如果 $k$ 太大，那么上面的方法又没有意义了，还是会退化到 $O(n)$ 。</p> \n<p>上面两个方法都是先把窗口范围定到某一个区间里，然后一点一点的缩小窗口大小，最终得到答案的。那么能否直接判断出长度为 $k$ 的答案窗口位置在哪里呢？</p> \n<p>按照上面的思路，长度为 $k$ 的窗口一定是通过长度为 $k+1$ 的窗口删除首尾之一元素得到的。那么我们观察某一个特定的长度为 $k+1$ 的窗口 $[l, l+k]$ ，如果 $arr[l]$ 离 $x$ 距离比 $arr[l+k]$ 离 $x$ 更远的话，那就要删除 $arr[l]$ ，同时说明 $l$ 以及它左边的所有元素都不可能是答案窗口的左边界。反之如果 $arr[l]$ 离 $x$ 距离小于等于 $arr[l+k]$ 离 $x$ 的距离，那么就要删除 $arr[l+k]$ 了，同时说明 $l$ 右边的元素都不可能是答案窗口的左边界。</p> \n<p>综上，我们可以用二分直接寻找答案窗口的左边界。这样时间复杂度就降到了 $O(\\log n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"滑动窗口（c-）\"><a href=\"#滑动窗口（c-）\" class=\"headerlink\" title=\"滑动窗口（c++）\"></a>滑动窗口（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分-滑动窗口（c-）\"><a href=\"#二分-滑动窗口（c-）\" class=\"headerlink\" title=\"二分+滑动窗口（c++）\"></a>二分+滑动窗口（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        l <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分（c-）\"><a href=\"#二分（c-）\" class=\"headerlink\" title=\"二分（c++）\"></a>二分（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span>k<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>m<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"滑动窗口（python）\"><a href=\"#滑动窗口（python）\" class=\"headerlink\" title=\"滑动窗口（python）\"></a>滑动窗口（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span>\n        <span class=\"token keyword\">while</span> r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分-滑动窗口（python）\"><a href=\"#二分-滑动窗口（python）\" class=\"headerlink\" title=\"二分+滑动窗口（python）\"></a>二分+滑动窗口（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> x<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n        r <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span>\n        l <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">-</span>k<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span> r<span class=\"token operator\">-</span>l <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> arr<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"二分（python）\"><a href=\"#二分（python）\" class=\"headerlink\" title=\"二分（python）\"></a>二分（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">findClosestElements</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>k\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> x<span class=\"token operator\">-</span>arr<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> arr<span class=\"token punctuation\">[</span>m<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n        <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">:</span>l<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 07:16:26', '6.3k', 11, 7985);
INSERT INTO `t_article` VALUES ('e7952f97-c37b-445e-9144-0ca4e924b668', '随笔', 24, '真正的努力，从来都不动声色', 'https://picsum.photos/1920/1080?random&rand=0.9787777860616854', '文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要文章摘要', '<p class=\"ql-align-justify\">大四上学期备战考研时，在图书馆自习室我认识了茉莉，一个笑起来有两个梨涡的女孩。</p><p class=\"ql-align-justify\">得知我也在准备考研，茉莉很热情，要了我的联系方式，并约定一起晨读，背英语单词。我欣然接受。</p><p class=\"ql-align-justify\">第二天，茉莉穿着一件白色蕾丝长裙，踩着高跟鞋，长发披肩，姗姗来迟。我提醒她赶紧背书，她却拿出课本，让我帮她先拍几张照。站在树下，坐在长椅上，正面、侧身、背影……各种角度，各种姿态，一顿狂拍。</p><p class=\"ql-align-justify\">我想，她可能是好不容易找到个伴给她拍照，等几天新鲜劲儿过了就会安心复习。谁知，她每天晨读都要拍照，穿各种风格的衣服，摆各式各样的姿势，找各种不同的角度。</p><p class=\"ql-align-justify\">原来，她每天晨读、拍照就是为了在朋友圈打卡。她精心选图、修图，并绞尽脑汁配上文艺范儿的文字：“世界上任何书籍都不能带给你好运，但是它们能让你悄悄成为你自己。”“总有一天，你会感谢现在拼命努力的自己”……</p><p class=\"ql-align-justify\">我觉得，有这个拍照、选图、修图的时间，还不如多读几页书、多背几个单词。全身心地沉浸在<a href=\"https://www.lz13.cn/lizhimingyan/7966.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(51, 51, 51);\">学习</a>中，是一件非常投入、非常享受的事情，哪还有心思忙着拍照、发朋友圈，等着收获一连串的赞和评论呢？</p><p class=\"ql-align-justify\">果然，不到一个月，茉莉就以天气渐渐变冷容易感冒为由，结束了晨读的日子。</p><p class=\"ql-align-justify\">天下难事，必作于易；天下大事，必作于细。努力，是克服自己的畏难情绪和惰性，朝着既定目标一点点、一天天、一步步靠近。</p><p class=\"ql-align-justify\">你做三四月的事，在八九月自有答案。真正的努力，从来不需要世人皆知。</p><p class=\"ql-align-justify\">不久前，朋友兰兰刚考上博士。</p><p class=\"ql-align-justify\">兰兰研究生毕业，在老家的小城市工作，老公在省会城市。她一直想和老公结束两地分居的日子。但是，她的专业不是很好就业，在人才济济的省会城市也没多大优势，于是她想考个博士，以后去高校工作。</p><p class=\"ql-align-justify\">兰兰考博<a href=\"https://www.lz13.cn/lizhimingyan/3859.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(51, 51, 51);\">成功</a>给我打电话时，我很震惊。因为她平常工作很忙，事情特别多，更关键的是她刚生完孩子。</p><p class=\"ql-align-justify\">原来，兰兰两年前就计划考博了。她制定了严格的学习计划，工作日每天保证学习两小时，周末和节假日每天至少保证学习四小时，学习计划精确到每半小时。她复习的时候，关机、断网，只用手表看时间。怀孕期间，在身体允许的情况下，学习也没有间断。</p><p class=\"ql-align-justify\">我问她怎么不告诉我们考博的事情。她说，考博是她慎重考虑后做出的决定。她不需要昭告天下，只需朝着这个目标日复一日地努力。太多的关注和问候，反而容易给她带来一些不必要的心理压力。</p><p class=\"ql-align-justify\">既然选择了远方，便只顾风雨兼程。真正的努力，从来都不动声色。</p><p class=\"ql-align-justify\">很多时候，我们喜欢嚷着要改变，要努力。</p><p class=\"ql-align-justify\">想学瑜伽，咬咬牙报了培训班，买了瑜伽服，发朋友圈打卡，请大家监督……最后却<a href=\"https://www.lz13.cn/lizhimingyan/7801.html\" rel=\"noopener noreferrer\" target=\"_blank\" style=\"color: rgb(51, 51, 51);\">坚持</a>不下来，不了了之；</p><p class=\"ql-align-justify\">想学英语，买了一大堆书，几个月过去了却还是停留在前三页；</p><p class=\"ql-align-justify\">想考研，约上小伙伴去自习室，最后却忙着自拍、看小说、聊微信，甚至补觉……</p><p class=\"ql-align-justify\">如果我们能把嚷嚷的劲头落实到每一天的实际行动中，也许就能减少很多因碌碌无为、虚度光阴而留下的悔恨了。</p><p class=\"ql-align-justify\">成功者之所以成功，是因为他们不浮躁、不喧闹，长年累月，脚踏实地、不动声色地努力。</p><p class=\"ql-align-justify\">真正的努力，是“不积跬步，无以至千里；不积小流，无以成江海”的积累；是“贵有恒，何必三更眠五更起；最无益，只怕一日曝十日寒”的自律；是“千淘万漉虽辛苦，吹尽黄沙始到金”的执着。</p><p><br></p>', '2022-04-23 17:28:15', '2.3k', 4, 5078);
INSERT INTO `t_article` VALUES ('e9743c05dbd94498a6b598fb9dee0b7c', '编程算法', 15, '每日算法系列【LeetCode 312】戳气球', 'https://picsum.photos/1920/1080?random&rand=0.7961058282255051', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。 现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得 nums[l', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>有 n 个气球，编号为0 到 n-1，每个气球上都标有一个数字，这些数字存在数组 nums 中。</p> \n<p>现在要求你戳破所有的气球。每当你戳破一个气球 i 时，你可以获得 nums[left] <em> nums[i] </em> nums[right] 个硬币。 这里的 left 和 right 代表和 i 相邻的两个气球的序号。注意当你戳破了气球 i 后，气球 left 和气球 right 就变成了相邻的气球。</p> \n<p>求所能获得硬币的最大数量。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,1,5,8]\n输出：\n167\n解释：\nnums = [3,1,5,8] --&gt; [3,5,8] --&gt;   [3,8]   --&gt;  [8]  --&gt; []\ncoins =  3*1*5      +  3*5*8    +  1*3*8      + 1*8*1   = 167<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>你可以假设 nums[-1] = nums[n] = 1，但注意它们不是真实存在的所以并不能被戳破。</li> \n <li>0 ≤ n ≤ 500, 0 ≤ nums[i] ≤ 100</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<h3 id=\"dfs-记忆化搜索\"><a href=\"#dfs-记忆化搜索\" class=\"headerlink\" title=\"dfs+记忆化搜索\"></a>dfs+记忆化搜索</h3>\n<p>对于区间 [l, r] ，我们考虑最后一个被戳破的气球 k ，那么之前的步骤我们可以分为两步，也就是求 [l, k-1] 和 [k+1, r] 之间的最大分数。</p> \n<p>那么为什么不考虑先戳破 k 呢？因为这样的话 [l, k-1] 和 [k+1, r] 就会连接在一起，两个子状态就不能独立计算了，互相会产生影响。</p> \n<p>两个子区间的最大的分算完之后，最后 k 的得分就是 nums[l-1] <em> nums[k] </em> nums[r+1] ，取使得总得分最高的 k 就行了。</p> \n<p>有一个小技巧就是，提示里也说了，就是刚开始的时候在首尾各添加一个分数为 1 的虚拟气球。</p> \n<p>但是直接这样递归会超时，因为有很多的子状态都重复计算了，所以可以用一个全局的数组保存每个状态的分数。初始化为 -1 ，如果某个状态计算过了，就直接返回它的值就行了，不然就递归计算。</p> \n<h3 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h3>\n<p>上面的方法是自顶向下的，其实也可以转化成自底向上的，也就是从小的区间开始算起，最后算最大的，这就是动态规划的方法，具体的实现细节和上面是一模一样的。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"dfs-记忆化搜索（c-）\"><a href=\"#dfs-记忆化搜索（c-）\" class=\"headerlink\" title=\"dfs+记忆化搜索（c++）\"></a>dfs+记忆化搜索（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">510</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxCoins</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&gt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划（c-）\"><a href=\"#动态规划（c-）\" class=\"headerlink\" title=\"动态规划（c++）\"></a>动态规划（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">510</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maxCoins</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span>len<span class=\"token number\">-1</span> <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> j<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"dfs-记忆化搜索（python）\"><a href=\"#dfs-记忆化搜索（python）\" class=\"headerlink\" title=\"dfs+记忆化搜索（python）\"></a>dfs+记忆化搜索（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxCoins</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        res <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> l <span class=\"token operator\">&gt;</span> r<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        res <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>l<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> k<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>self<span class=\"token punctuation\">.</span>dfs<span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dp<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res\n        <span class=\"token keyword\">return</span> res\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"动态规划（python）\"><a href=\"#动态规划（python）\" class=\"headerlink\" title=\"动态规划（python）\"></a>动态规划（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxCoins</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> l <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> l <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n                <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> dp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2021-09-22 08:04:43', '5.1k', 6, 6249);
INSERT INTO `t_article` VALUES ('ee6f8b4fc7954b33a2187a20e147fd33', '编程算法', 13, '【每日算法Day 89】手动实现字符串转整数（atoi）函数，你会吗？', 'https://picsum.photos/1920/1080?random&rand=0.043962886208899765', '题目链接LeetCode 字符串转换整数（atoi） 题目描述请你来实现一个 atoi 函数，使其能将字符串转换成整数。 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下： 如果第一个', '<p><img src=\"1.jpg\" alt=\"还有几个小时ACL2020就出结果了，祈祷！\"></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/string-to-integer-atoi/\" title=\"LeetCode 字符串转换整数（atoi）\" target=\"_blank\" rel=\"noopener\">LeetCode 字符串转换整数（atoi）</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p> \n<p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p> \n<ul> \n <li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li> \n <li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li> \n <li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li> \n</ul> \n<p>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p> \n<p>在任何情况下，若函数不能进行有效的转换时，请返回 <code>0</code> 。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>本题中的空白字符只包括空格字符 ‘ ‘ 。</li> \n <li>假设我们的环境只能存储 <code>32</code> 位大小的有符号整数，那么其数值范围为 $[−2^{31}, 2^{31} − 1]$。如果数值超过这个范围，请返回 <code>INT_MAX</code> （$2^{31} − 1$） 或 <code>INT_MIN</code> （$−2^{31}$） 。</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"42\"\n输出:\n42<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"   -42\"\n输出:\n-42\n解释：\n第一个非空白字符为 \'-\', 它是一个负号。\n我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"4193 with words\"\n输出:\n4193\n解释：\n转换截止于数字 \'3\' ，因为它的下一个字符不为数字。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例4</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"words and 987\"\n输出:\n0\n解释：\n第一个非空字符是 \'w\', 但它不是数字或正、负号。\n因此无法执行有效的转换。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例5</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n\"-91283472332\"\n输出:\n-2147483648\n解释：\n数字 \"-91283472332\" 超过 32 位有符号整数范围。 \n因此返回 INT_MIN (−231) 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>官方题解用的有限状态自动机，理解起来也是比较轻松的，写起来也避免了一堆臃肿的 <code>if-else</code> 。但是我这里就不用自动机了，直接模拟就行了，写起来也很轻松好理解！</p> \n<ul> \n <li><p>首先用一个变量 <code>idx</code> 标记当前遍历到的位置，用 <code>sign = 1, -1</code> 表示整数的正负性。</p> </li> \n <li><p>然后从 <code>idx = 0</code> 开始，将开头的空格全部去掉。</p> </li> \n <li><p>然后判断当前的位置 <code>idx</code> 处的字符是不是 <code>+, -</code> 或者数字，并且 <code>idx</code> 要小于字符串长度。如果一个都没满足，那么说明是非法字符串，直接返回 <code>0</code> 。</p> </li> \n <li><p>然后如果当前的位置 <code>idx</code> 处的字符是 <code>-</code> ，那么就令 <code>sign = -1</code> 。否则如果是 <code>+</code> ，就令 <code>sign = 1</code> 。然后遍历后一个字符。</p> </li> \n <li><p>最后遍历一段连续的数字，把它转换成整数，注意转换的时候要乘上符号位 <code>sign</code> 。如果发现数字超过了 <code>[INT_MIN, INT_MAX]</code> 范围，就直接返回最大最小值就行了。</p> </li> \n <li><p>否则的话最后就是合法整数，直接返回答案。</p> </li> \n</ul> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">myAtoi</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\' \'</span><span class=\"token punctuation\">)</span> idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'+\'</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'-\'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'-\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'+\'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            idx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">&lt;</span> n <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> res<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>sign<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token string\">\'0\'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">&gt;</span> INT_MAX<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> INT_MAX<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res <span class=\"token operator\">&lt;</span> INT_MIN<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> INT_MIN<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myAtoi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        n<span class=\"token punctuation\">,</span> idx <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        res<span class=\"token punctuation\">,</span> sign <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">if</span> idx <span class=\"token operator\">&gt;=</span> n <span class=\"token operator\">or</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'+\'</span> <span class=\"token operator\">and</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\'-\'</span> <span class=\"token operator\">and</span> <span class=\"token operator\">not</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">if</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'-\'</span><span class=\"token punctuation\">:</span>\n            sign <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">elif</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\'+\'</span><span class=\"token punctuation\">:</span>\n            idx <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> str<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> c<span class=\"token punctuation\">.</span>isdigit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">break</span>\n            res <span class=\"token operator\">=</span> res<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>sign<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&gt;</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">if</span> res <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"正则表达式（python）\"><a href=\"#正则表达式（python）\" class=\"headerlink\" title=\"正则表达式（python）\"></a>正则表达式（python）</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">myAtoi</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">:</span> str<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">(</span>min<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>re<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">\'^[\\+\\-]?\\d+\'</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span>lstrip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2020-12-03 18:30:39', '9.0k', 4, 5866);
INSERT INTO `t_article` VALUES ('f051c8ee98b14c9fb2db04fd745f7d7d', '编程算法', 11, '【每日算法Day 69】面试经典题：分发糖果问题', 'http://47.96.31.161:9000/my-file/img57.jpg', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目链接LeetCode 135. 分发糖果 题目描述老师想给孩子们分发糖果，有 $N$ 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。 你需要按照以下要求，帮助老师', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/candy/\" title=\"LeetCode 135. 分发糖果\" target=\"_blank\" rel=\"noopener\">LeetCode 135. 分发糖果</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>老师想给孩子们分发糖果，有 $N$ 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。</p> \n<p>你需要按照以下要求，帮助老师给这些孩子分发糖果：</p> \n<ul> \n <li>每个孩子至少分配到 $1$ 个糖果。</li> \n <li>相邻的孩子中，评分高的孩子必须获得更多的糖果。</li> \n</ul> \n<p>那么这样下来，老师至少需要准备多少颗糖果呢？</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,0,2]\n输出：\n5\n解释：\n你可以分别给这三个孩子分发 2、1、2 颗糖果。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,2]\n输出：\n4\n解释：\n你可以分别给这三个孩子分发 1、2、1 颗糖果。\n第三个孩子只得到 1 颗糖果，这已满足上述两个条件。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这题虽然难度定义成<strong>困难</strong>，但其实代码不长，思路也比较简单清晰。</p> \n<p>首先明确一下题目中的两个条件，我们可以把所有人的分数在坐标轴中连起来，这样就形成了一个波形图（<strong>图片来自官方题解</strong>）：<br><img src=\"1.png\" alt><br>那么这就像一座一座山峰一样，在谷底（左右两边分数都大于等于它）糖果数一定是 $1$ 。从谷底往两侧扩展，糖果数逐渐加 $1$ 就行了。</p> \n<p>要注意的一点是图中 pt.13 那个位置也是一个谷底，因为它右边的分数等于它。</p> \n<p>那么问题的关键就是如何找到这些谷底了。</p> \n<h3 id=\"两次遍历\"><a href=\"#两次遍历\" class=\"headerlink\" title=\"两次遍历\"></a>两次遍历</h3>\n<p>首先初始化所有人都分到 $1$ 个糖果。</p> \n<p>然后从左向右遍历一次所有分数，如果发现分数小于等于前一个人分数，那暂时不用管，因为你从左向右是没法知道下坡的点距离谷底还有多远的。而如果发现分数大于前一个人分数，那么就在前一个人糖果数基础上，再多分一个给他，因为是上坡，所以谷底一定在左边已经遍历过了，是知道距离的。</p> \n<p>接着就是遍历下坡了，也就是从右向左遍历所有分数，同理如果发现分数大于后一个人分数，那么就在后一个人糖果数基础上，再多分一个给他。</p> \n<p>但是这里要处理一个冲突，那就是峰顶既是上坡，又是下坡，其实只要两次遍历完取上坡和下坡中糖果数较大的那个就行了。</p> \n<p>总结一下就是<strong>一次从左向右遍历所有上坡，一次从右向左遍历所有下坡，峰顶取两次较大值</strong>。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"一次遍历\"><a href=\"#一次遍历\" class=\"headerlink\" title=\"一次遍历\"></a>一次遍历</h3>\n<p>从上面方法中可以看出，本题求解的难点就在于从左向右遍历的时候，下坡到底有多长没法知道，必须全部遍历完了才能知道。还有就是山峰的值必须看左右两边的上坡下坡有多长。</p> \n<p>为了解决这个问题，我们可以用变量 <code>up</code> 记录上坡的长度，<code>down</code> 记录下坡的长度。</p> \n<p>当遇到谷底的时候，就表明一座山遍历结束了，那么我们只需要比较 <code>up</code> 和 <code>down</code> 的大小就知道峰顶取值了。</p> \n<p>而如何判断一座山遍历结束呢？假设现在遍历到了第 $i$ 个学生，我们再用两个变量，<code>ns</code> 表示 $i-1$ 到 $i$ 的变化趋势（$1$：上升，$-1$：下降，$0$：不变），<code>os</code> 表示前一个时刻 $i-2$ 到 $i-1$ 的变化趋势。那么谷底只有下面三种情况：</p> \n<ul> \n <li>$os &lt; 0$ 且 $ns &gt; 0$ 。也就是前一个时刻在下降，当前时刻上升了，那显然第 $i-1$ 个学生是谷底。</li> \n <li>$os &lt; 0$ 且 $ns = 0$ 。也就是前一个时刻在下降，当前时刻不变，这种情况下第 $i-1$ 个学生也是谷底，因为根据题意，他的糖果数没必要比第 $i$ 个学生多。</li> \n <li>$os &gt; 0$ 且 $ns = 0$ 。也就是前一个时刻在上升，当前时刻不变。这种情况下，山峰只有上坡（到峰顶 $i-1$ 结束），没有下坡，所以这座山也遍历结束了，得计算糖果数了。</li> \n</ul> \n<p>这座山峰的的糖果数可以表示为三部分之和：上坡、下坡和峰顶。上坡就是 $1+2+\\ldots+up$，下坡就是 $1+2+\\ldots+down$，峰顶就是 $\\max{\\{up, down\\}}+1$ 。算完了之后，这座山峰就再也不用考虑了， <code>up</code> 和 <code>down</code> 都清零。</p> \n<p>在具体实现的时候，这个方法细节有点多，一不小心就会错，直接看代码注释吧。</p> \n<p>继续看下面这张图：<br><img src=\"1.png\" alt><br>贴一段官方的样例解释：<br><img src=\"2.jpg\" alt></p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(1)$ 。</p> \n<h3 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h3>\n<p>我们用一个单调栈来保存单调下降的得分，也就是下坡。</p> \n<p>当遍历到第 $i$ 个学生时，如果栈顶元素 $j$ 的得分小于等于 $i$ 的得分，也就是遇到谷底了，那么就出栈，直到栈空。</p> \n<p>最后用一个很大的数将栈里所有元素顶出来就行了。</p> \n<p>时间复杂度 $O(n)$ ，空间复杂度 $O(n)$ 。</p> \n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3>\n<p>第一种解法最容易理解和实现，也不用考虑什么特殊情况。但是后两种方法处理起来就稍稍有点麻烦了，需要结合样例和代码来理解。但是本质上都是一样的，都是从谷底（糖果数为 $1$）开始，向两周扩展。方法一是先从每个谷底向右边上坡扩展，再向左边下坡扩展。方法二是计算出相邻两个谷底之间的上坡下坡长度，然后直接计算。第三个方法是从每个谷底先向左边下坡扩展，再向右边上坡扩展。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"两次遍历（c-）\"><a href=\"#两次遍历（c-）\" class=\"headerlink\" title=\"两次遍历（c++）\"></a>两次遍历（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">candy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> ratings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> ratings<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"一次遍历（c-）\"><a href=\"#一次遍历（c-）\" class=\"headerlink\" title=\"一次遍历（c++）\"></a>一次遍历（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">candy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> ratings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> ratings<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> up <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> down <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> os <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ns <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ns <span class=\"token operator\">=</span> ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&gt;</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>ratings<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 这座山峰遍历结束，计算糖果数。</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>os <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ns <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> os <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ns <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 这里看似好像峰顶没有加 1，其实是 count(down) 减去了 1。</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 因为谷底是共享的，所以将谷底给了下一座山峰的上坡。</span>\n                sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>down<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">,</span> down<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                up <span class=\"token operator\">=</span> down <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ns <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> up<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ns <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> down<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 如果是平原，说明谷底不会共享，之前少加的 1 再补上。</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ns<span class=\"token punctuation\">)</span> sum<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            os <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 最后一座山峰循环里不会计算到，再加上。</span>\n        sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>down<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">,</span> down<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"单调栈（c-）\"><a href=\"#单调栈（c-）\" class=\"headerlink\" title=\"单调栈（c++）\"></a>单调栈（c++）</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">candy</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> ratings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ratings<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>INT_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> ratings<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        stack<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> st<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> ratings<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> ratings<span class=\"token punctuation\">[</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>st<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    st<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> n<span class=\"token number\">-1</span> <span class=\"token operator\">&amp;&amp;</span> ratings<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ratings<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> ratings<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    sum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            st<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 08:44:49', '3.1k', 9, 9715);
INSERT INTO `t_article` VALUES ('f332a6bc3b244717b88b427f6a9beac0', '编程算法', 7, '每日算法系列【LeetCode 827】最大人工岛', 'https://picsum.photos/1920/1080?random&rand=0.6353299512984409', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述在二维地图上， 0 代表海洋， 1 代表陆地，我们最多只能将一格 0 海洋变成 1 变成陆地。 进行填海之后，地图上最大的岛屿面积是多少？（上、下、左、右四个方向相连的 1 可', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>在二维地图上， 0 代表海洋， 1 代表陆地，我们最多只能将一格 0 海洋变成 1 变成陆地。</p> \n<p>进行填海之后，地图上最大的岛屿面积是多少？（上、下、左、右四个方向相连的 1 可形成岛屿）</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1, 0], [0, 1]]\n输出：\n3\n解释：\n将一格 0 变成 1 ，最终连通两个小岛得到面积为 3 的岛屿。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1, 1], [1, 0]]\n输出：\n4\n解释：\n将一格 0 变成 1 ，岛屿的面积扩大为 4 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[[1, 1], [1, 1]]\n输出：\n4\n解释：\n没有 0 可以让我们变成 1 ，面积依然为 4 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= grid.length = grid[0].length &lt;= 50</li> \n <li>0 &lt;= grid[i][j] &lt;= 1</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p><strong>没有做过这种类型题目的强烈建议自己动手实现一遍，对提升代码能力有很大帮助。</strong></p> \n<p>这题虽然是 hard 难度，但其实没有什么算法，只用到了 dfs 求连通块而已。我们只需要知道填充了一个 0 之后，它上下左右跟它相邻的 4 块连通块是多大。</p> \n<p>首先普及一下什么是连通块，就是一块由 1 组成的区域，其中任意两块 1 都可以由一条 1 组成的路径走过去（只能上下左右走）。那么这题我们遍历所有的 0 ，把它四周的连通块大小加起来就是填充了这块 0 之后的连通块大小了。那么问题是怎么知道它周围连通块的大小呢？</p> \n<p>首先我们得求出所有连通块的大小，然后存下来，这就得用到 dfs 了。</p> \n<p>用二维数组 index （初始化为 -1）记录方块是否被搜索过。然后遍历所有的方块，如果是 1 ，并且 index 为 -1 （也就是没被搜索过），那么它的 index 设为 1 ，表示被搜索过了。然后从它开始向四周进行 dfs ，直到跟它相连的所有 1 的连通块都被搜索完毕。这时候整块连通块里面的 1 方块的 index 都被设成了 1 ，就算以后被遍历到了也不会被搜索了。那么大小怎么记录呢？只需要设置一个变量 cnt 初始为 1 ，然后 dfs 的时候遇到一个未被搜索的块就加 1 ，最后 cnt 就是当前连通块的大小了。</p> \n<p>光知道了每个连通块的大小还不行，对于一个 0 块，四周的 1 方块万一属于同一个连通块怎么办？得区分它们，不然就会被重复计算。所以在上面的 dfs 之前，给那块连通块一个唯一的编号（从 0 开始），遇到下一个连通块就加 1 。这样 index 数组就可以用来存连通块的编号了，同时还能表示方块是否被搜索过。</p> \n<p>具体的细节还得看代码，有很多实现的技巧，当然我写的还有一些优化余地。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N <span class=\"token operator\">=</span> <span class=\"token number\">55</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dx<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> dy<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> area<span class=\"token punctuation\">[</span>N<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> flag<span class=\"token punctuation\">[</span>N<span class=\"token operator\">*</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">largestIsland</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        m <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        n <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> idx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    index<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>idx<span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    area<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cnt<span class=\"token punctuation\">;</span>\n                    res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>grid<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>flag<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            flag<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                            tmp <span class=\"token operator\">+</span><span class=\"token operator\">=</span> area<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> flag<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            flag<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;=</span> y <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> idx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> cnt<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> grid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> grid<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                index<span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> idx<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">,</span> <span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">,</span> grid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>dfs 求连通块是常规操作，必须要学会，很考验代码功底，要细心，不然很容易写错。 </p>', '2020-06-06 06:01:28', '4.5k', 2, 6233);
INSERT INTO `t_article` VALUES ('f5dc139bb4a54546a713d4de843275c0', '编程算法', 30, '每日算法系列【LeetCode 123】买卖股票的最佳时机 III', 'https://picsum.photos/1920/1080?random&rand=0.613932733062429', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。 注意: 你不能同时参与多笔交易（你必', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p> \n<p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。</p> \n<p>注意: 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,3,5,0,0,3,1,4]\n输出：\n6\n解释：\n在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。\n随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,2,3,4,5]\n输出：\n4\n解释：\n在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。   \n注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。   \n因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[7,6,4,3,1]\n输出：\n0\n解释：\n在这个情况下, 没有交易完成, 所以最大利润为 0。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第三题。</p> \n<p>本题中买卖次数变成了最多两次，那么我们可以照搬之前只能买卖一次的做法。首先如果我们假设第一只股票卖出去时价格是 $price[i]$ ，那么它之前的最优买入价格（也就是最低的价格）计算方法和第一题相同，只需要用一个变量存储就行了。而第二次买卖我们只需要知道 $price[i]$ 右边进行一次买卖最多能赚到多少钱就行了。这可以通过从右向左倒过来预处理处理，方法和第一题完全相同。</p> \n<p>记第 $i$ 只股票左边（包含）买卖一次最大利润为 $left[i]$ ，右边（包含）买卖一次最大利润为 $right[i]$ ，那么最终的答案就是：<br>$$<br>\\sum_{0 &lt; i &lt; n-2}{left[i] + right[i+1]}<br>$$</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        minn <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minn<span class=\"token punctuation\">)</span>\n            minn <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>minn<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        maxx<span class=\"token punctuation\">,</span> maxp<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            maxp <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>maxp<span class=\"token punctuation\">,</span> maxx<span class=\"token operator\">-</span>prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            maxx <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>maxx<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>maxp<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-01-30 05:42:12', '2.4k', 10, 1291);
INSERT INTO `t_article` VALUES ('f872cd42528e464db0fb6ba298fe6972', '编程算法', 21, '【每日算法Day 91】求解数组中出现次数超过1/3的那个数', 'https://picsum.photos/1920/1080?random&rand=0.4019594946346706', '题目链接LeetCode 229. 求众数 II 题目描述给定一个大小为 $n$ 的数组，找出其中所有出现超过 $\\lfloor n/3 \\rfloor$ 次的元素。 说明： 要求算法的时间复杂度为 $O(n)$，空间复杂度为 $O(1)', '<h2 id=\"题目链接\"><a href=\"#题目链接\" class=\"headerlink\" title=\"题目链接\"></a>题目链接</h2>\n<p><a href=\"https://leetcode-cn.com/problems/majority-element-ii/\" title=\"LeetCode 229. 求众数 II\" target=\"_blank\" rel=\"noopener\">LeetCode 229. 求众数 II</a></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个大小为 $n$ 的数组，找出其中所有出现超过 $\\lfloor n/3 \\rfloor$ 次的元素。</p> \n<p><strong>说明：</strong></p> \n<ul> \n <li>要求算法的时间复杂度为 $O(n)$，空间复杂度为 $O(1)$。</li> \n</ul> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[3,2,3]\n输出:\n3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[1,1,1,3,3,2,2,2]\n输出:\n[1,2]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是求解众数的升级版：<br><a href=\"https://godweiyang.com/2020/04/04/leetcode-inteview-39/\" title=\"【每日算法Day 90】5种方法：求解数组中出现次数超过一半的那个数\">【每日算法Day 90】5种方法：求解数组中出现次数超过一半的那个数</a><br>但是这题没有保证一定存在满足条件的数，不过不要紧。</p> \n<p>首先可以肯定最多有两个数的数量超过 <code>1/3</code> ，这个就不用我过多解释了吧。然后我们只需要找出出现次数最多的两个数，看它俩次数是否超过 <code>1/3</code> 就行了。</p> \n<p>那么怎么找呢？如果存在某个数超过 <code>1/3</code> ，那我们每次删掉三个不同的数，直到最后没法删，最后剩下的数一定有这个超过 <code>1/3</code> 的数。原因很简单，因为每删一次最多删掉一个这个数，而删除最多 <code>1/3</code> 数组长度次之后所有数都被删光了，但是这个数还剩下一点。</p> \n<p>所以我们用两个变量 <code>cand1</code> 和 <code>cand2</code> 表示两个候选人，<code>cnt1</code> 和 <code>cnt2</code> 表示两个候选人数量。那么如果两个候选人有一个和当前数 <code>x</code> 相同，对应的数量就加一。否则的话如果如果有某个候选人为空，就让 <code>x</code> 顶替成为新的候选人。否则的话就说明两个候选人都有，并且 <code>x</code> 和它俩都不相同，那么就同时删除三个不同的数，也就是两个候选人数量各减一，同时删去 <code>x</code> 。</p> \n<p>最后判断两个候选人数量是否超过了 <code>1/3</code> 就行了。</p> \n<p>这里关键点就在于，<strong>每次删除三个不同的数，判断最后剩下的数是否符合题意就行了</strong>。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> cand1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cand2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand1 <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cand2 <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cand1 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>cnt2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                cand2 <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n                cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                cnt1<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                cnt2<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        cnt1 <span class=\"token operator\">=</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> cand1<span class=\"token punctuation\">)</span> cnt1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> cand2<span class=\"token punctuation\">)</span> cnt2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt1 <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cand1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cnt2 <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cand2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">majorityElement</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        cand1<span class=\"token punctuation\">,</span> cand2<span class=\"token punctuation\">,</span> cnt1<span class=\"token punctuation\">,</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> cand1 <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span>\n                cnt1 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> cand2 <span class=\"token operator\">==</span> x<span class=\"token punctuation\">:</span>\n                cnt2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> cnt1 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                cand1 <span class=\"token operator\">=</span> x\n                cnt1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> cnt2 <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                cand2 <span class=\"token operator\">=</span> x\n                cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                cnt1 <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n                cnt2 <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n        cnt1 <span class=\"token operator\">=</span> cnt2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> cand1<span class=\"token punctuation\">:</span>\n                cnt1 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n            <span class=\"token keyword\">elif</span> x <span class=\"token operator\">==</span> cand2<span class=\"token punctuation\">:</span>\n                cnt2 <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> cnt1 <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">//</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cand1<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> cnt2 <span class=\"token operator\">&gt;</span> n<span class=\"token operator\">//</span><span class=\"token number\">3</span><span class=\"token punctuation\">:</span>\n            res<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>cand2<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！<br><img src=\"/medias/contact.jpg\" alt></p> \n</blockquote>', '2022-04-22 05:51:44', '1.4k', 9, 7289);
INSERT INTO `t_article` VALUES ('f9f08b26994d4652ae12d1d893472db8', '编程算法', 22, '【每日算法Day 62】LeetCode 815. 公交路线', 'https://picsum.photos/1920/1080?random&rand=0.6675951502138391', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述我们有一系列公交路线。每一条路线 $routes[i]$ 上都有一辆公交车在上面循环行驶。例如，有一条路线 $routes[0] = [1, 5, 7]$，表示第一辆（下标为', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>我们有一系列公交路线。每一条路线 $routes[i]$ 上都有一辆公交车在上面循环行驶。例如，有一条路线 $routes[0] = [1, 5, 7]$，表示第一辆（下标为 $0$）公交车会一直按照 $1 \\to 5 \\to 7 \\to 1 \\to 5 \\to 7 \\to 1 \\to \\ldots$ 的车站路线行驶。</p> \n<p>假设我们从 $S$ 车站开始（初始时不在公交车上），要去往 $T$ 站。 期间仅可乘坐公交车，求出最少乘坐的公交车数量。返回 $-1$ 表示不可能到达终点车站。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nroutes = [[1, 2, 7], [3, 6, 7]]\nS = 1\nT = 6\n输出：\n2\n解释：\n最优策略是先乘坐第一辆公交车到达车站 7, 然后换乘第二辆公交车到车站 6。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>$1 \\le routes.length \\le 500$.</li> \n <li>$1 \\le routes[i].length \\le 500$.</li> \n <li>$0 \\le routes[i][j] &lt; 10 ^ 6$.</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>我们可以将每一条线路视作一个点，对于任意两条线路，如果它们经过的车站有交集，那么就在两点之间连一条边，这样就构成了一张图。</p> \n<p>图中有些点（路线）是包含起点 $S$ 的，我们把它们都作为起点。而有些点（路线）是包含终点 $T$ 的，我们把它们都作为终点。</p> \n<p>那么问题就转化为了求起点到终点的最短路径。因为起点和终点数量可能有多个，所以我们新建两个结点，一个起点用来指向所有包含 $S$ 的点，一个终点用来指向所有包含 $T$ 的点。接下来问题就变成了单源最短路径问题了。</p> \n<p>因为本题中边并没有权值（或者说都是 $1$），那么我们就可以直接用 BFS 来进行求解最短路。</p> \n<p>建图的时候，对于任意两条路线，我们要判断它们车站是否存在交集。可以事先对每条线路的车站编号进行排序，然后用双指针法判断。最好排完序还要去重，防止数据有重复。不过实际运行中，就算不排序也能通过，说明数据给的就是有序的了。</p> \n<p>最终时间复杂度由几部分决定。假设路线数量是 $N$，每条路线最多有 $M$ 个车站。那么排序复杂度为 $O(NM \\log M)$，建图复杂度为 $O(N^2M)$，BFS 复杂度为 $O(N^2)$。因此总的时间复杂度忽略低阶项之后为 $O(N^2M)$。看起来貌似还是有点高，但其实建图的时候，大多数情况下双指针法并不会遍历完所有的车站，所以达不到 $O(M)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">numBusesToDestination</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> routes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>S <span class=\"token operator\">==</span> T<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        routes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>S<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        routes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>T<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> G <span class=\"token operator\">=</span> <span class=\"token function\">buildGraph</span><span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">,</span> T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">BFS</span><span class=\"token punctuation\">(</span>G<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">buildGraph</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> routes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> S<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> T<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span> <span class=\"token function\">G</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> su <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sv <span class=\"token operator\">=</span> routes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>u <span class=\"token operator\">&lt;</span> su <span class=\"token operator\">&amp;&amp;</span> v <span class=\"token operator\">&lt;</span> sv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> routes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>u<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>routes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> routes<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">++</span>v<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        G<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        G<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> G<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">BFS</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;&gt;</span><span class=\"token operator\">&amp;</span> G<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> G<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> S <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> T <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> <span class=\"token function\">dis</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        queue<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span> Q<span class=\"token punctuation\">;</span>\n        Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dis<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Q<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> u <span class=\"token operator\">=</span> Q<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Q<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> G<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    Q<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    dis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">==</span> T<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> dis<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-03-27 15:05:48', '3.2k', 10, 6193);
INSERT INTO `t_article` VALUES ('fa10538dcaf84a6b9d566f57a140c477', '随笔', 29, '物来顺应，未来不迎，当时不杂，既过不恋', 'https://picsum.photos/1920/1080?random&rand=0.012682103973678749', '前言不知不觉来字节实习也有半年多了，前一阵子也终于通过了转正，正式成为了一名new ByteDancer。刚开始来的时候，原以为会和校园生活有很大的差别，也许很久都没法适应成为社会人的生活。但是现实打破了我的顾虑，字节这个大家庭给了我太多的', '<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>不知不觉来字节实习也有半年多了，前一阵子也终于通过了转正，正式成为了一名new ByteDancer。刚开始来的时候，原以为会和校园生活有很大的差别，也许很久都没法适应成为社会人的生活。但是现实打破了我的顾虑，字节这个大家庭给了我太多的惊喜。回首两年的研究生校园生活，以及字节的半年实习经历，感触良多。</p> \n<p>我非常喜欢曾国藩的一句十六字箴言：</p> \n<blockquote> \n <p>物来顺应，未来不迎，当时不杂，既过不恋。</p> \n</blockquote> \n<p>这句话意思是说，<strong>凡事要顺其自然，坦然面对，活在当下，不过度担忧未来还未发生的事，要心无杂念地做好眼前的事，不要去留恋和纠结发生过的事</strong>。这是曾国藩的处世哲学，也是我一直以来努力追求的处世方式。</p> \n<h2 id=\"未来不迎\"><a href=\"#未来不迎\" class=\"headerlink\" title=\"未来不迎\"></a>未来不迎</h2>\n<p>遥想两年前刚刚保研成功，接下来头等大事便是选择学校和导师了。都说人往高处爬，许多人可能都会选择更好的学校，名声更大的导师。然而我没有，我毅然决然地选择了本校的一位青年教师。很多人不理解，问我是怎么考虑的。其实我的想法也很简单，未来不迎，我并不会过多考虑未来的我会是怎么样的，我并不在乎老师名气有多大，我也不在乎名校会给我贴多少金，我只看重老师能力强不强，对学生好不好。事实证明，我的选择没有错。能够早早进实验室开始科研也是对自己能力的一大提升，况且老师真正做到了亲力亲为，手把手带我进入了自然语言处理的领域。其实这也是一种懒人心态，我比较乐于<strong>活在当下，努力做好目前能做到的事，而不去过多想象以后的我会成为什么样的人，现在的选择对我的未来有多大的影响</strong>。</p> \n<p>刚上研究生，我便开始运营起了我的博客、知乎、公众号等各大自媒体平台。初衷呢是想记录一下我的科研生涯中的点点滴滴，记录学习过程中遇到的各种问题和各种知识。但是后来看的人越来越多，也认识了全国各地非常多和我一样对算法和自然语言处理感兴趣的小伙伴。行走江湖，多认识一个人就是多一个靠山。和他们的交流中我也学到了很多，也发现了自己平时学习过程中一些很难发现的错误。其实当时完全没有想过我的博客未来会发展成什么样，会有多少人来看，更没想过godweiyang这么名字会有多少人会知道。但是不用去过度担忧未来，即使没有一个人去看你总结的经验和知识，即使没有一个人欣赏你认同你，你也要坚持写下去。总有一天，你会拨开云雾见光明。</p> \n<h2 id=\"既过不恋\"><a href=\"#既过不恋\" class=\"headerlink\" title=\"既过不恋\"></a>既过不恋</h2>\n<p>其实我的硕士生涯前两年科研并不顺利。因为悟性差，论文看得少，同时做的方向又非常的小众，所以并没有想出非常有创新的idea。拍脑袋想了个现在看起来非常无聊的点子，做了些不那么充分的实验，然后就冲击ACL顶会了。结果当然不出意料，评审们的观点也都很犀利，指出了我创新不足的缺点。然而创新不足是一个致命伤，这几乎没有办法修改，于是我只能转投了自以为更加简单一点的会议，最后依然被拒。就这样大半年快过去了，我的科研还是零进展。导师安慰我说，不要气馁，评审们提出这么详细的意见，说明这个方向并没有死掉，还是有很多人关注的。这也给了我很大的信心，<strong>不能想这么多乱七八糟的，也不要去留恋过往的得失，既过不恋，专心做好自己手头的事就行了</strong>。</p> \n<p>但是不留恋不等于不反思。从失败的投稿经历中还是可以学到很多经验的，motivation要充分，idea要有创新，实验要做的充分等等。后来一个偶然的机会，我从师兄以往的论文中联想到了能否可以把他的idea迁移到我的领域。然而迁移过程中还是遇到了棘手的问题，由于短语结构的句法树和成分结构的句法树表示上存在差异，因此我需要一种全新的表示方法，然后才能继续下面的工作。但是一直没有想法，那段时间特别迷茫，不知道这个领域还能不能走得下去。每天跟导师聊天都会抱怨，有监督句法分析确实做不下去了，这次会议投完我一定要转无监督了。又是一个偶然的机会，在洗澡的时候突然想出了一种全新表示，歪打正着，成为了后来论文中最主要的创新点。</p> \n<h2 id=\"当时不杂\"><a href=\"#当时不杂\" class=\"headerlink\" title=\"当时不杂\"></a>当时不杂</h2>\n<p>那之后的一个多月，我再也没有打过游戏，当时不杂，专心完成我的论文初稿，同时完善各种实验。实验也遇到了很多困难，但在实验室师兄们的帮助下最终都顺利解决了。不得不说的是，导师对我的帮助实在是太大了。尽管刚开始他并不能完全理解我的idea，但是每天都会坚持和我讨论细节，并给出我修改的建议。等论文初稿完成，给我反反复复修改了很多遍，许多公式和证明都被精简浓缩。后来疫情在家的rebuttal环节，依旧远程帮我修改回复意见，最终侥幸中了今年的ACL。从这段经历中也可以看出，一个良师非常的重要。古语有云，三人行必有我师，能称作你老师的不一定是比你年长很多的人，你身边的任何人，都可能会给你人生中的某个阶段带来很大的启示，也会成为助力你前进的助推剂。英雄联盟中的易大师说过，<strong>真正的大师永远怀着一颗学徒的心，不管你以后做到了多高的位置，做出了多高的成就，都要永远怀着一颗谦逊求学的心</strong>。</p> \n<p>在两年的硕士生涯里，我总结了下面几点经验，不管是在学术中，还是在工作中，我觉得都是通用的：</p> \n<ul> \n <li>一定要多积累领域相关知识，只有看的多了，才能知道下一步往哪里走。</li> \n <li>但是不要拘泥于你自己的领域，也许别人的领域知识会对你有启发式的影响。</li> \n <li>灵感来源于生活，阿基米德在洗澡时想出了浮力定律，也许你也能在洗澡时想出一个新的idea呢。</li> \n <li>学会谦逊，每个人的意见都可能会对你的前进方向产生影响，多去聆听，这会让你少走很多弯路。</li> \n <li>站在巨人的肩膀上，不要埋头造轮子，这会节省你很多时间，当然并不意味着你不懂底层的原理。</li> \n <li>学会总结，就像这篇博客一样，总结可以让你回顾过去的得失，及时纠正前进中的错误。</li> \n</ul> \n<h2 id=\"余生很长，未来可期\"><a href=\"#余生很长，未来可期\" class=\"headerlink\" title=\"余生很长，未来可期\"></a>余生很长，未来可期</h2>\n<p>接下来就是找实习了，当时也找了很多公司，但是由于懒人心态，只想留在上海，并没有去外面的世界看看的想法。实习面试也很顺利，成功进入了字节。但是由于在学校做的方向太小众了，来了这以后就开始做一个全新的方向了，也就是机器翻译。但我认为自然语言处理很多领域知识都是相通的，同时在学校组会我也学到了很多其他领域的知识，因此来了字节以后入门也没有那么的困难。AI Lab的工作体验和学校实验室其实非常接近，区别可能就是将学术和工程结合起来了，需要更多的考虑线上的需求，数据量和模型也大了很多。但是这里的氛围是非常相近的，也有非常多的大佬可以给你针对性的指导意见，这里的每个人都可以成为我的老师，教会了我很多在学校从来没接触过的知识。另一方面，公司的工作强度比学校更大，每天学到的东西是学校的很多倍，在这里你可以过得更加充实。</p> \n<p>来了这半年多了，过程中也遇到了很多瓶颈，但是很感谢能力很强的mentor和其他同事们给我带来的各种帮助。虽然半年时间里做出的成果很有限，不算突出，但是我努力过了，自然就能坦然接受，并立志在接下来的工作中继续完善，最终争取做到最好。</p> \n<p>最后再来说说刚刚结束的秋招。还是和三年前一样，我依然选择留在上海，因此最终在上海的几家公司中选择了字节。说说字节的哪些方面吸引了我吧。一是平台，也就是工作内容。机器翻译还是和我所学的自然语言处理非常相关的，而且实习了半年也是逐渐熟悉了，因此不需要时间成本再去换新的方向了。二是工作氛围。组内的气氛我还是非常喜欢的，大家都很年轻，都很有干劲。这让我联想到了我的导师，也是很年轻，每天有精力指导我们实验室每一个人。同时气氛又非常的活泼，不会让我感到那么紧张，那么的有压力。三是工作环境。字节上海的园区非常的干净整洁，设施也都很丰富。四是公司福利。自从来了公司，我爱上了去食堂吃饭，免费又好吃的三餐让我再也不用纠结点什么外卖了。同时各种节假日也会有活动和礼品，营造出各种节日氛围，这才是我理想中的工作环境，是我曾经幻想中大厂应该有的模样。可能有许多人忍受不了大小周的工作作息，但我暂时并没有感觉到有太大影响，毕竟也有加班费嘛，况且周末在家也是打游戏。为什么说是暂时呢？因为我现在单身，一个人的周末自然略显无聊，当然要用工作来让自己更加充实啦。</p> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>很感谢能够加入字节，能够拥有这么好的平台、人脉，能够让我在这里做我喜欢做的事情。还是那句至理箴言，<strong>物来顺应，未来不迎，当时不杂，既过不恋</strong>。今后的工作中不管出现什么困难，都要坦然面对，一个bug修一周不是什么稀奇事，就看你有没有那种毅力。余生很长，不用去想太过久远的空洞目标，朝着一个正确的方向前进就行了。立足当下，做好你手头的活，不以物喜，不以己悲，心无旁骛才能做出优秀的成果。最后不要太过留恋过去，过往如烟，从中总结出得失，悟出经验，带着它继续前行就好了。</p> \n<p>godweiyang<br>撰于 2020.12.04</p>', '2022-04-22 15:13:06', '1.9k', 2, 8054);
INSERT INTO `t_article` VALUES ('fbc2c35789f446ef8748b9ae9b55c44c', '编程算法', 4, '每日算法系列【LeetCode 719】找出第 k 小的距离对', 'https://picsum.photos/1920/1080?random&rand=0.3572154223537606', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。 示例1 输入： nums = [1,3,1] k =', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个整数数组，返回所有数对之间的第 k 个最小距离。一对 (A, B) 的距离被定义为 A 和 B 之间的绝对差值。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\nnums = [1,3,1]\nk = 1\n输出：\n0\n解释：\n所有数对如下：\n(1,3) -&gt; 2\n(1,1) -&gt; 0\n(3,1) -&gt; 2\n因此第 1 个最小距离的数对是 (1,1)，它们之间的距离为 0。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>2 &lt;= len(nums) &lt;= 10000.</li> \n <li>0 &lt;= nums[i] &lt; 1000000.</li> \n <li>1 &lt;= k &lt;= len(nums) * (len(nums) - 1) / 2.</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>注意到这题 $n$ 比较大，所以不能算出所有的数对差值，然后排序，这样时间复杂度就是 $O(n^2 \\log {n^2})$ 了。</p> \n<p>直觉上应该先给数组从小到大排个序，那么差值最小值就是 0 ，最大值就是 $nums[n-1] - nums[0]$ ，答案肯定也就在这个区间里了。</p> \n<p>那么我们可以从最大的差值开始，看是否有数对满足这个差值，并且这个差值还得是第 $k$ 小的。对于差值 $m$ ，如果它是第 $k$ 小的，说明所有数对中差值小于等于 $m$ 的数对个数 $c$ 一定大于等于 $k$ 。因为如果第 $k$ 小的差值只有一个数对满足，那么 $c = k$ ，否则的话就有多个数对差值都是 $m$ ，那就有 $c &gt; k$ 。于是我们找到第一个满足 $c &lt; k$ 的差值就行了，再加 1 就是最终的答案。</p> \n<p>那么怎么求小于等于 $m$ 的数对个数 $c$ 呢？因为排过序了，所以可以采用双指针的方法，初始时 $l = r = 0$ ，对于每个右指针 $r$ ，我们移动左指针 $l$ ，直到 $nums[r] - nums[l] \\le m$ 。那么最终 $r - l$ 就是以 $nums[r]$ 作为较大数的数对个数。因为两个指针都是向右移动的，所以每次计算个数只需要 $O(n)$ 的时间复杂度。</p> \n<p>所以这个方法最终总的时间复杂度为 $O(Wn + n \\log n)$ ，因为最大差值 $W$ 还是太大，所以还是没有办法直接遍历。</p> \n<p>又注意到随着 $m$ 的减小， $c$ 也是单调减小的，所以可以二分寻找 $m$ 。如果 $c \\ge k$ ，那么说明答案小于等于 $m$ ，于是令 $r = m$ 。如果 $c &lt; k$ ，那么说明答案一定大于 $m$ ，于是令 $l = m + 1$ ，最终答案就是 $l$ 。</p> \n<p>这样二分优化之后，最终的时间复杂度为 $O(n\\log W + n\\log n)$ ，可以接受。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">smallestDistancePair</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">)</span> r <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> l<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> K<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> K<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            cnt <span class=\"token operator\">+</span><span class=\"token operator\">=</span> r <span class=\"token operator\">-</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> cnt<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">smallestDistancePair</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>\n        nums<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">:</span> int<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n            cnt<span class=\"token punctuation\">,</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n            <span class=\"token keyword\">for</span> r <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r <span class=\"token operator\">and</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;</span> K<span class=\"token punctuation\">:</span>\n                    l <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                cnt <span class=\"token operator\">+=</span> r <span class=\"token operator\">-</span> l\n            <span class=\"token keyword\">return</span> cnt\n\n        l<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">while</span> l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">:</span>\n            m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n            <span class=\"token keyword\">if</span> count<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&gt;=</span> k<span class=\"token punctuation\">:</span>\n                r <span class=\"token operator\">=</span> m\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                l <span class=\"token operator\">=</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2020-03-23 13:28:47', '5.3k', 2, 2235);
INSERT INTO `t_article` VALUES ('fe61f886c118499e8cc51a22820a96b8', '编程算法', 1, '每日算法系列【LeetCode 121】买卖股票的最佳时机', 'https://picsum.photos/1920/1080?random&rand=0.6727587159536216', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。 注意你不能在买', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p> \n<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p> \n<p>注意你不能在买入股票前卖出股票。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[7,1,5,3,6,4]\n输出：\n5\n解释：\n在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。\n注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\n[7,6,4,3,1]\n输出：\n0\n解释：\n在这种情况下, 没有交易完成, 所以最大利润为 0。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>这是 <strong>【买卖股票的最佳时机】</strong> 系列题目的第一题。</p> \n<p>这道题目要求只能买卖一次股票。所以最佳策略一定是挑一个最低的价格买入，再挑一个最高的价格卖出。但是还有另一个限制条件，那就是你得先买，然后才能卖出去。</p> \n<p>所以我们只需要枚举每个股票，把它当作卖出的那一只股票，然后只需要求出它之前价格最低的那一只股票就行了。价格最低的股票可以用一个变量来进行维护，然后枚举所有卖出的股票，减去它之前价格最低的那一只股票，然后和最优答案进行比较，最终就能得到最多能赚多少钱了。</p> \n<p>最终答案就是：<br>$$<br>\\max_{0 \\le i &lt; n}{\\left\\{price[i] - \\min_{0 \\le j &lt; i}{\\left\\{price[j]\\right\\}}\\right\\}}<br>$$</p> \n<p>时间复杂度是 $O(n)$ 。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maxProfit</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>prices<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span>\n        minn<span class=\"token punctuation\">,</span> res <span class=\"token operator\">=</span> prices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minn<span class=\"token punctuation\">)</span>\n            minn <span class=\"token operator\">=</span> min<span class=\"token punctuation\">(</span>minn<span class=\"token punctuation\">,</span> prices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-22 10:51:51', '1.5k', 3, 1772);
INSERT INTO `t_article` VALUES ('ff48366a66284eddbdfae8fc75923b92', '编程算法', 17, '每日算法系列【LeetCode 1186】删除一次得到子数组最大和', 'https://picsum.photos/1920/1080?random&rand=0.944376109859314', '关注公众号【算法码上来】，每日算法干货马上就来！ 题目描述给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。 换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除', '<blockquote> \n <p>关注公众号【算法码上来】，每日算法干货马上就来！</p> \n</blockquote> \n<p><img src=\"/medias/contact.jpg\" alt></p> \n<h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2>\n<p>给你一个整数数组，返回它的某个 非空 子数组（连续元素）在执行一次可选的删除操作后，所能得到的最大元素总和。</p> \n<p>换句话说，你可以从原数组中选出一个子数组，并可以决定要不要从中删除一个元素（只能删一次哦），（删除后）子数组中至少应当有一个元素，然后该子数组（剩下）的元素总和是所有子数组之中最大的。</p> \n<p>注意，删除一个元素后，子数组 不能为空。</p> \n<p><strong>示例1</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\narr = [1,-2,0,3]\n输出：\n4\n解释：\n我们可以选出 [1, -2, 0, 3]，然后删掉 -2，这样得到 [1, 0, 3]，和最大。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例2</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\narr = [1,-2,-2,3]\n输出：\n3\n解释：\n我们直接选出 [3]，这就是最大和。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>示例3</strong></p> \n<pre class=\"line-numbers language-text\"><code class=\"language-text\">输入：\narr = [-1,-1,-1,-1]\n输出：\n-1\n解释：\n最后得到的子数组不能为空，所以我们不能选择 [-1] 并从中删去 -1 来得到 0。\n我们应该直接选择 [-1]，或者选择 [-1, -1] 再从中删去一个 -1。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<p><strong>提示</strong></p> \n<ul> \n <li>1 &lt;= arr.length &lt;= 10^5</li> \n <li>-10^4 &lt;= arr[i] &lt;= 10^4</li> \n</ul> \n<h2 id=\"题解\"><a href=\"#题解\" class=\"headerlink\" title=\"题解\"></a>题解</h2>\n<p>首先回顾一道很相似的题目，也就是求连续子数组的最大值，并不需要删除元素。</p> \n<p>这其实只需要用动态规划就能实现了，也就是计算以 $arr[i]$ 结尾的连续子数组的最大值，记为 $dp[i]$ 。那么它一定要取 $arr[i]$ ，而前面的元素的话，如果 $dp[i-1] &gt; 0$ ，也就是以 $arr[i-1]$ 为结尾的连续子数组最大值大于 0 ，那就加上前面的最大值，否则的话只取 $arr[i]$ 就行了。最终答案就是取所有 $dp[i]$ 中最大的，状态转移方程是：<br>$$<br>dp[i] = arr[i] + max(dp[i-1], 0)<br>$$</p> \n<p>回到本题，如果一个元素都不删除的话，那么做法就和上面一模一样。如果删除一个元素的话，那么它的左右两边就分成了两个连续的子数组了。</p> \n<p>那么我们假设删除的是 $arr[i]$ ，那么我们只要求左右两边子数组的最大值之和，也就是以 $arr[i-1]$ 结尾和以 $arr[i+1]$ 开头的两个连续子数组的最大值之和。以 $arr[i-1]$ 结尾上面已经求过了，以 $arr[i+1]$ 开头和上面方法类似，从后往前求一遍就行了。这样预处理完两个动态规划数组之后，遍历删除的元素，就能 $O(n)$ 时间内算出最大值。</p> \n<p>具体实现的时候，注意到删除的元素是有限制的，其实只需要遍历删除 $arr[1]$ 到 $arr[n-2]$ 就行了，因为删除首尾两个元素的话，剩下来一个子数组，答案已经包含在开始的预处理之中了。</p> \n<p>空间方面，从右往左求以 $arr[i]$ 开头的连续子数组最大值的时候，没有必要保存到数组里了，直接用变量保存，然后同时计算删除 $arr[i]$ 之后最大值就行了。</p> \n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<h3 id=\"c\"><a href=\"#c\" class=\"headerlink\" title=\"c++\"></a>c++</h3>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">maximumSum</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">&gt;</span><span class=\"token operator\">&amp;</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> dp<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            res <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            last <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> \n<h3 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h3>\n<pre class=\"line-numbers language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">maximumSum</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span> List<span class=\"token punctuation\">[</span>int<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">&gt;</span> int<span class=\"token punctuation\">:</span>\n        n <span class=\"token operator\">=</span> len<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n        dp <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> n\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        res<span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>n<span class=\"token number\">-2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n            res <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> dp<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>last<span class=\"token punctuation\">)</span>\n            last <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> max<span class=\"token punctuation\">(</span>last<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> res<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>', '2022-04-11 20:51:21', '3.0k', 4, 8797);
INSERT INTO `t_article` VALUES ('ffd798f73d574f3e8f7cf79a93f1819d', '随笔', 4, '北京五日游记', 'https://picsum.photos/1920/1080?random&rand=0.3823836073607124', '前言临近毕业了，趁着室友强哥正好也有空，一起约了去北京玩一玩。从12.6到12.10，一共5天，每天平均3万步，走了很多地方，也算是挺充实的了。 足迹：首都国际机场、大栅栏、圆明园、四季民福（和平里店）、后海美食街、南锣鼓巷、天安门广场、王', '<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>临近毕业了，趁着室友强哥正好也有空，一起约了去北京玩一玩。从12.6到12.10，一共5天，每天平均3万步，走了很多地方，也算是挺充实的了。</p> \n<p><strong>足迹：</strong><br>首都国际机场、大栅栏、圆明园、四季民福（和平里店）、后海美食街、南锣鼓巷、天安门广场、王府井、三里屯、鸟巢、水立方、蓝色港湾、故宫、天坛、德云社（新街口剧场）、八达岭长城、五道口、北京字节（泰鹏大厦）、中科院计算所。</p> \n<h2 id=\"第一天\"><a href=\"#第一天\" class=\"headerlink\" title=\"第一天\"></a>第一天</h2>\n<p>早上8点的飞机，早早起了床就赶到了虹桥机场，两小时就到了。出了<strong>首都国际机场</strong>，直奔宾馆，因为天安门店和天安门广场店看错了，还跑错了地方。我们住的地方在杨梅竹斜街，胡同里老北京味很浓厚，就是房子看起来老破不堪，但是架不住地价贵啊，酸了。</p> \n<p><img src=\"1.jpeg\" alt=\"首都机场线\"></p> \n<p><img src=\"2.jpeg\" alt=\"正阳门\"></p> \n<p>到了宾馆后，直奔<strong>大栅栏</strong>，吃了顿<strong>新成炸酱面</strong>，味道还不错，据宣传历史挺悠久的，建国初期就开了。</p> \n<p>然后就去了<strong>圆明园</strong>，现场买票即可。见到了近三年不见的老同学：微笑直到夕阳尽头，强哥也见到了他的女同学。圆明园有三个园，太大了只逛了一小部分，不过见到了只在教科书里见到的废墟。北京的冬天真冷啊，还是在郊外的园子里，差点没被冻死，手机还开了直播，手都要被冻坏了。</p> \n<p><img src=\"3.jpeg\" alt=\"圆明园\"></p> \n<p><img src=\"4.jpeg\" alt=\"爷孙满堂\"></p> \n<p>这天正好是我的农历生日，晚上我们四个人订了蛋糕，去吃了<strong>四季民福（和平里店）</strong>，因为故宫店人太多了所以没去。 不得不说，第一次吃正宗的北京烤鸭，味道还真不错，价格也还好，人均才150。有一说一，这是长这么大第一次在外面过这么正式的生日吧，昶臻还给我唱了生日歌，感动了，上一次有人给我过生日应该还是前女友吧。</p> \n<p><img src=\"5.jpeg\" alt=\"切烤鸭的师傅\"></p> \n<p><img src=\"6.jpeg\" alt=\"片皮烤鸭\"></p> \n<p><img src=\"7.jpeg\" alt=\"生日蛋糕\"></p> \n<p>后来去逛了<strong>后海</strong>，晚上黑漆漆的，确实没啥意思。美食街，也就是酒吧街了，基本都是清吧。门口都是拉客的，最好不要进去，要去就去大众点评上评价最高的那几家。</p> \n<p><img src=\"8.jpeg\" alt=\"后海酒吧\"></p> \n<p>顺道去了<strong>南锣鼓巷</strong>，建议白天去，晚上黑漆漆的，就中间一条胡同能逛。店的话还可以吧，吃了杯双皮奶，一般。有很多老北京风味的老店，不过都不是很感兴趣，没有什么特别想买的东西。</p> \n<p><img src=\"9.jpeg\" alt=\"双皮奶\"></p> \n<p><img src=\"10.jpeg\" alt=\"文宇奶酪店\"></p> \n<h2 id=\"第二天\"><a href=\"#第二天\" class=\"headerlink\" title=\"第二天\"></a>第二天</h2>\n<p><strong>大栅栏</strong>找了家包子店吃了早餐，挺贵的，不过味道尚可，最重要的是量挺大，管饱。</p> \n<p><img src=\"11.jpeg\" alt=\"早餐店\"></p> \n<p>然后顺路去了趟<strong>天安门广场</strong>，安检特别严格，排队就排了很久。第一次见到从小只在电视上见过的天安门，心里还是非常激动的。</p> \n<p><img src=\"12.jpeg\" alt=\"天安门广场\"></p> \n<p><img src=\"13.jpeg\" alt=\"人民英雄纪念碑\"></p> \n<p>然后去了<strong>王府井</strong>，这条街不是很长，没有想象中的那么热闹，可能是因为工作日，人比较稀少。但是和南京东路比的话，也感觉差了点热闹和繁华。</p> \n<p><img src=\"14.jpeg\" alt=\"王府井\"></p> \n<p><img src=\"15.jpeg\" alt=\"北京饭店\"></p> \n<p>接着去了据说美女很多的<strong>三里屯</strong>，结果还是大失所望，工作日白天都没啥人，让我感觉像是冷清的商场。所以建议还是周末的晚上来，据说还会有好戏看（未成年人莫入），不过我这次是没有机会见到了，下次一定。</p> \n<p><img src=\"16.jpeg\" alt=\"三里屯\"></p> \n<p>午饭在三里屯吃了一家<strong>潇湘阁</strong>，真的非常下饭，强烈推荐，人均70左右。</p> \n<p><img src=\"17.jpeg\" alt=\"潇湘阁\"></p> \n<p>下午就去了<strong>鸟巢、水立方</strong>，现场买票就行了。当然如果你不需要进水立方里面看，就不需要买票，外面拍拍照就行了。水立方里面也没啥好看的，所以建议别买票进去了。</p> \n<p><img src=\"18.jpeg\" alt=\"鸟巢\"></p> \n<p><img src=\"19.jpeg\" alt=\"水立方\"></p> \n<p><img src=\"20.jpeg\" alt=\"水立方比赛泳池\"></p> \n<p>晚上去了传说中夜景很好看的<strong>蓝色港湾</strong>，不得不说，真的很好看。但是强哥要和他女同学约去吃饭了，我就自己吃了<strong>麦当劳</strong>。</p> \n<p><img src=\"21.jpeg\" alt=\"蓝色港湾\"></p> \n<p><img src=\"22.jpeg\" alt=\"蓝色港湾\"></p> \n<p><img src=\"23.jpeg\" alt=\"蓝色港湾\"></p> \n<p>晚上的杨梅竹斜街别有一番风味，人很少，很安静。</p> \n<p><img src=\"24.jpeg\" alt=\"杨梅竹斜街\"></p> \n<h2 id=\"第三天\"><a href=\"#第三天\" class=\"headerlink\" title=\"第三天\"></a>第三天</h2>\n<p>早饭试了试大栅栏的<strong>狗不理包子</strong>，如网上流传那样，差评，又贵又一般。</p> \n<p><img src=\"25.jpeg\" alt=\"狗不理包子\"></p> \n<p>然后就去了<strong>故宫</strong>，需要提前一天在网上预约，同样需要过严格的安检。故宫很大，所有宫逛下来需要小半天时间。这次唯一的购物也是在故宫里产生的，买了三个香囊，太喜欢这外观了，我真是少女心爆棚。</p> \n<p><img src=\"26.jpeg\" alt=\"天安门\"></p> \n<p><img src=\"27.jpeg\" alt=\"太和殿\"></p> \n<p><img src=\"28.jpeg\" alt=\"可可爱爱的香囊\"></p> \n<p>接着就直奔<strong>天坛</strong>，在附近吃了顿肯德基，还冲了200块会员卡，送了一堆券，回去一定要记得用！白嫖了一顿半价生日套餐，还没吃过这么便宜的一顿KFC。天坛同样需要提前一天网上预约，里面也非常大，逛了整整一下午。还是非常壮观的，其实就是一个公园，散步养心非常不错。</p> \n<p><img src=\"29.jpeg\" alt=\"天坛\"></p> \n<p><img src=\"30.jpeg\" alt=\"天坛上拍的夕阳\"></p> \n<p>晚上去听了德云社（新街口剧场），附近吃了顿川湘菜。德云社不允许自带酒水，但是里面的酒水超级超级贵，最便宜的30块一杯，建议别买。我们买的位置还很垃圾，价格还是最贵的。相声的话，大咖你是别想见到了，都是小辈，不过效果还行吧，除了一两个相声笑点比较多以外，其他的一般般。</p> \n<p><img src=\"31.jpeg\" alt=\"德云社\"></p> \n<h2 id=\"第四天\"><a href=\"#第四天\" class=\"headerlink\" title=\"第四天\"></a>第四天</h2>\n<p>这一天全部用来去爬<strong>八达岭长城</strong>了，需要提前网上预约。前门站坐旅游公交1线，来回40元。记得带点吃的喝的，长城那边很贵。长城分为南北两线，南线7阁楼，没啥意思，走个几十米看个好汉碑就完事了，北线8个楼，建议走到底。如果爬不动可以直接坐缆车，直接到北线6楼。我们先去了南线3楼，然后折返，一路走到北线8楼，差点没累死。最后还是乖乖坐缆车下来了，单程100，往返便宜一点。</p> \n<p><img src=\"32.jpeg\" alt=\"爷孙登顶\"></p> \n<p><img src=\"33.jpeg\" alt=\"强哥个人秀\"></p> \n<p><img src=\"34.jpeg\" alt=\"强哥个人秀\"></p> \n<p><img src=\"35.jpeg\" alt=\"下山缆车\"></p> \n<p>太累了，这一天就没去其他地方了，晚上在杨梅竹斜街随便逛了逛，吃了顿<strong>铃木食堂</strong>，点评评价很高，人均八九十吧。</p> \n<p><img src=\"36.jpeg\" alt=\"杨梅竹斜街的杂货铺\"></p> \n<p><img src=\"37.jpeg\" alt=\"铃木食堂\"></p> \n<p><img src=\"38.jpeg\" alt=\"铃木食堂\"></p> \n<h2 id=\"第五天\"><a href=\"#第五天\" class=\"headerlink\" title=\"第五天\"></a>第五天</h2>\n<p>直奔<strong>五道口</strong>，见到了快7年没见的高中老同学：昌老师和奕哥，吃了顿<strong>日昌餐馆</strong>。然后去<strong>北京字节（泰鹏大厦）</strong>工区转了转，最后去中科院计算所转了转，还瞻仰了部门leader求学时的真迹。</p> \n<p><img src=\"43.jpeg\" alt=\"日昌餐馆\"></p> \n<p><img src=\"41.jpeg\" alt=\"多年未见的老朋友\"></p> \n<p><img src=\"39.jpeg\" alt=\"北大东门\"></p> \n<p><img src=\"40.jpeg\" alt=\"中科院计算所\"></p> \n<p><img src=\"42.jpeg\" alt=\"爷孙离别\"></p> \n<p>最后大兴机场回了浦东机场，一路上是真的累。</p> \n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2>\n<p>五天的时间过得很快，其实大部分地方也都逛完了，其他还有例如北海公园、景山公园、CBD等等地方还没有去，下次有机会出差再去玩玩吧。</p> \n<p>这几天对北京的感受呢，可能是因为工作日加上旅游淡季，游人非常稀少，去哪里都不需要排队，感觉冷冷清清。晚上的话到处黑漆漆的，很安静，挺舒服的，想让人早睡。不过整体上来看，我还是更喜欢上海，喜欢这里的夜生活，喜欢热闹。</p> \n<p>下一次和老朋友们再见又不知道是什么时候了，下一次应该就是工作了之后了。当然游戏中还是经常会遇见的，该喷还是得喷。</p> \n<p>这次总共算下来一人花了2500左右，还是挺实惠的，每天走的都很累，但是都很充实。下周开始又要上班了，继续做一个快乐的打工人，加油！毕业论文也要着手开始写了，希望能顺利毕业。</p>', '2022-04-22 20:41:15', '2.8k', 10, 3831);

-- ----------------------------
-- Table structure for t_article_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_article_tag`;
CREATE TABLE `t_article_tag`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id',
  `article_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章id',
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章标签名称',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 33 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_article_tag
-- ----------------------------
INSERT INTO `t_article_tag` VALUES (1, '5ecc277154c04f06a76172b292a1006c', '实习');
INSERT INTO `t_article_tag` VALUES (2, '5ecc277154c04f06a76172b292a1006c', '博客');
INSERT INTO `t_article_tag` VALUES (3, '5ecc277154c04f06a76172b292a1006c', '简历');
INSERT INTO `t_article_tag` VALUES (4, 'f051c8ee98b14c9fb2db04fd745f7d7d', 'NLP');
INSERT INTO `t_article_tag` VALUES (5, 'f051c8ee98b14c9fb2db04fd745f7d7d', 'ACL');
INSERT INTO `t_article_tag` VALUES (6, 'f051c8ee98b14c9fb2db04fd745f7d7d', '算法');
INSERT INTO `t_article_tag` VALUES (7, '22c3fa37c683402e827b24b93866f6f7', 'NLP');
INSERT INTO `t_article_tag` VALUES (8, '22c3fa37c683402e827b24b93866f6f7', '算法');
INSERT INTO `t_article_tag` VALUES (9, '22c3fa37c683402e827b24b93866f6f7', '深度学习');
INSERT INTO `t_article_tag` VALUES (10, 'd71586ff187344219159f62d3813b004', '算法');
INSERT INTO `t_article_tag` VALUES (11, 'd71586ff187344219159f62d3813b004', '博客');
INSERT INTO `t_article_tag` VALUES (12, 'd71586ff187344219159f62d3813b004', '模型训练');
INSERT INTO `t_article_tag` VALUES (13, '8fc7d0f84a05484394ce453feba93217', 'Leecode');
INSERT INTO `t_article_tag` VALUES (14, '8fc7d0f84a05484394ce453feba93217', '算法');
INSERT INTO `t_article_tag` VALUES (15, '7fd9f2a271f748c58dda205808334d9c', '博客');
INSERT INTO `t_article_tag` VALUES (16, '7fd9f2a271f748c58dda205808334d9c', '算法');
INSERT INTO `t_article_tag` VALUES (17, '7fd9f2a271f748c58dda205808334d9c', '可解释性');
INSERT INTO `t_article_tag` VALUES (18, '7fd9f2a271f748c58dda205808334d9c', 'AAAI');
INSERT INTO `t_article_tag` VALUES (19, '44f7e9a9-fa79-457f-9643-48005747c64f', '博客');
INSERT INTO `t_article_tag` VALUES (20, '49990f63-9414-4831-b5c4-f984a1d6d88d', '博客');
INSERT INTO `t_article_tag` VALUES (21, 'f484e1af-1fd4-4445-8827-9c896349cbf2', '博客');
INSERT INTO `t_article_tag` VALUES (22, '64bacf59-e9bb-4e41-82d8-bffb7bc4c79b', '博客');
INSERT INTO `t_article_tag` VALUES (23, '402a0951-27f9-4d90-b4b1-baef2cf0b3ff', '博客');
INSERT INTO `t_article_tag` VALUES (24, '651de749-1edb-4aeb-ae45-9c11a096b707', '博客');
INSERT INTO `t_article_tag` VALUES (25, 'b19643ad-1e68-4465-8d32-605bfaa8c039', '博客');
INSERT INTO `t_article_tag` VALUES (26, '0f83d9e5-24ba-428d-aa63-f5398d29110f', '博客');
INSERT INTO `t_article_tag` VALUES (27, '703a6fe2-6313-416e-aab9-5a9d253e5d1d', '博客');
INSERT INTO `t_article_tag` VALUES (28, '0d44d8b4-50a4-46a8-af41-b055ecd176bb', '博客');
INSERT INTO `t_article_tag` VALUES (29, '71535b1b-6480-4434-9154-6f515a46190f', '博客');
INSERT INTO `t_article_tag` VALUES (30, '2f8deb88-ac8f-41f4-beb3-510432c9dda1', '博客');
INSERT INTO `t_article_tag` VALUES (31, 'd1dca037-5efd-445f-8265-17f591bf9a73', '博客');
INSERT INTO `t_article_tag` VALUES (32, 'a78036d1-37eb-4849-b893-7796446eb1f8', '博客');
INSERT INTO `t_article_tag` VALUES (33, 'e7952f97-c37b-445e-9144-0ca4e924b668', '博客');

-- ----------------------------
-- Table structure for t_comment
-- ----------------------------
DROP TABLE IF EXISTS `t_comment`;
CREATE TABLE `t_comment`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id',
  `article_id` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '文章id',
  `user_id` int NULL DEFAULT NULL COMMENT '用户id',
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '评论内容',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 29 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_comment
-- ----------------------------
INSERT INTO `t_comment` VALUES (1, '1bdf1362e47e401cae809c2f55b8b182', 1, 'nice', '2022-04-22 08:03:33');
INSERT INTO `t_comment` VALUES (2, '5ecc277154c04f06a76172b292a1006c', 1, 'OK，nice', '2022-04-22 17:06:32');
INSERT INTO `t_comment` VALUES (4, '5ecc277154c04f06a76172b292a1006c', 1, 'great', '2022-04-22 17:07:04');
INSERT INTO `t_comment` VALUES (5, '5ecc277154c04f06a76172b292a1006c', 1, '棒棒的', '2022-04-22 17:07:13');
INSERT INTO `t_comment` VALUES (6, 'f051c8ee98b14c9fb2db04fd745f7d7d', 2, '加油💪🏻', '2022-04-22 17:09:22');
INSERT INTO `t_comment` VALUES (7, '22c3fa37c683402e827b24b93866f6f7', 2, '哦哦，好的', '2022-04-22 17:09:37');
INSERT INTO `t_comment` VALUES (8, 'd71586ff187344219159f62d3813b004', 1, 'hello', '2022-04-22 17:35:25');
INSERT INTO `t_comment` VALUES (9, '5ecc277154c04f06a76172b292a1006c', 21, '好耶', '2022-04-22 17:37:43');
INSERT INTO `t_comment` VALUES (10, '5ecc277154c04f06a76172b292a1006c', 24, '非常nice的页面', '2022-04-22 17:38:07');
INSERT INTO `t_comment` VALUES (11, '5ecc277154c04f06a76172b292a1006c', 20, '老师666', '2022-04-22 17:38:29');
INSERT INTO `t_comment` VALUES (12, '5ecc277154c04f06a76172b292a1006c', 10, '曹红亮\n', '2022-04-22 17:40:13');
INSERT INTO `t_comment` VALUES (13, '5ecc277154c04f06a76172b292a1006c', 18, '来了来了！', '2022-04-22 17:40:24');
INSERT INTO `t_comment` VALUES (14, '5ecc277154c04f06a76172b292a1006c', 38, '666\n', '2022-04-22 17:42:36');
INSERT INTO `t_comment` VALUES (16, '5ecc277154c04f06a76172b292a1006c', 16, '点赞点赞点赞', '2022-04-22 17:43:15');
INSERT INTO `t_comment` VALUES (18, '22c3fa37c683402e827b24b93866f6f7', 14, '好', '2022-04-22 18:55:00');
INSERT INTO `t_comment` VALUES (19, '22c3fa37c683402e827b24b93866f6f7', 14, '', '2022-04-22 18:55:06');
INSERT INTO `t_comment` VALUES (20, '7fd9f2a271f748c58dda205808334d9c', 14, 'ovo', '2022-04-22 18:56:14');
INSERT INTO `t_comment` VALUES (21, '5ecc277154c04f06a76172b292a1006c', 14, '赞赞赞！👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍👍', '2022-04-22 18:58:11');
INSERT INTO `t_comment` VALUES (22, 'f051c8ee98b14c9fb2db04fd745f7d7d', NULL, '冲冲冲！💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻', '2022-04-22 19:48:29');
INSERT INTO `t_comment` VALUES (23, 'f051c8ee98b14c9fb2db04fd745f7d7d', 14, '冲冲冲！💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻💪🏻', '2022-04-22 19:48:49');
INSERT INTO `t_comment` VALUES (24, '5ecc277154c04f06a76172b292a1006c', 7, '妙啊妙啊', '2022-04-22 19:53:25');
INSERT INTO `t_comment` VALUES (25, '5ecc277154c04f06a76172b292a1006c', 10, '妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊妙啊', '2022-04-22 19:56:48');
INSERT INTO `t_comment` VALUES (26, '22c3fa37c683402e827b24b93866f6f7', NULL, 'nice', '2022-04-22 20:08:01');
INSERT INTO `t_comment` VALUES (27, '5ecc277154c04f06a76172b292a1006c', 32, 'nice，写完了', '2022-04-22 20:25:08');
INSERT INTO `t_comment` VALUES (28, '5ecc277154c04f06a76172b292a1006c', 32, '跟着老师，冲冲冲！！！！', '2022-04-22 20:42:07');
INSERT INTO `t_comment` VALUES (29, '5ecc277154c04f06a76172b292a1006c', 19, '😄 😆 😊', '2022-04-22 21:07:23');

-- ----------------------------
-- Table structure for t_tag
-- ----------------------------
DROP TABLE IF EXISTS `t_tag`;
CREATE TABLE `t_tag`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id',
  `tag_name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签名称',
  `tag_color` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '标签颜色',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 85 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_tag
-- ----------------------------
INSERT INTO `t_tag` VALUES (1, '年终总结', '#F9EBEA');
INSERT INTO `t_tag` VALUES (2, '过年', '#F5EEF8');
INSERT INTO `t_tag` VALUES (3, '爱情', '#D5F5E3');
INSERT INTO `t_tag` VALUES (4, '疫情', '#E8F8F5');
INSERT INTO `t_tag` VALUES (5, '隔离', '#FEF9E7');
INSERT INTO `t_tag` VALUES (6, '博客', '#F8F9F9');
INSERT INTO `t_tag` VALUES (7, 'ACL', '#82E0AA');
INSERT INTO `t_tag` VALUES (8, 'NLP', '#D7BDE2');
INSERT INTO `t_tag` VALUES (9, '序列标注', '#A3E4D7');
INSERT INTO `t_tag` VALUES (10, '句法分析', '#85C1E9');
INSERT INTO `t_tag` VALUES (11, 'COLING', '#F8C471');
INSERT INTO `t_tag` VALUES (12, 'EMNLP', '#F9E79F');
INSERT INTO `t_tag` VALUES (13, '迁移学习', '#FEF9E7');
INSERT INTO `t_tag` VALUES (14, 'ICLR', '#FEF9E7');
INSERT INTO `t_tag` VALUES (15, 'EACL', '#F5EEF8');
INSERT INTO `t_tag` VALUES (16, 'AAAI', '#A3E4D7');
INSERT INTO `t_tag` VALUES (17, 'NAACL', '#A3E4D7');
INSERT INTO `t_tag` VALUES (18, 'dynet', '#82E0AA');
INSERT INTO `t_tag` VALUES (19, 'TACL', '#FEF9E7');
INSERT INTO `t_tag` VALUES (20, '内推', '#F9EBEA');
INSERT INTO `t_tag` VALUES (21, '简历', '#F8C471');
INSERT INTO `t_tag` VALUES (22, '面试', '#F9EBEA');
INSERT INTO `t_tag` VALUES (23, '可解释性', '#D7BDE2');
INSERT INTO `t_tag` VALUES (24, '成分句法分析', '#D7BDE2');
INSERT INTO `t_tag` VALUES (25, 'Transformer', '#F5EEF8');
INSERT INTO `t_tag` VALUES (26, '模型训练', '#F8F9F9');
INSERT INTO `t_tag` VALUES (27, '模型加速', '#FFF');
INSERT INTO `t_tag` VALUES (28, '机试', '#82E0AA');
INSERT INTO `t_tag` VALUES (29, '保研', '#F5EEF8');
INSERT INTO `t_tag` VALUES (30, 'AutoML', '#FEF9E7');
INSERT INTO `t_tag` VALUES (31, 'NAS', '#F8F9F9');
INSERT INTO `t_tag` VALUES (32, '神经架构搜索', '#F5EEF8');
INSERT INTO `t_tag` VALUES (33, '算法', '#F9EBEA');
INSERT INTO `t_tag` VALUES (34, 'leetcode', '#82E0AA');
INSERT INTO `t_tag` VALUES (35, '字节跳动', '#F8C471');
INSERT INTO `t_tag` VALUES (36, '实习', '#D5F5E3');
INSERT INTO `t_tag` VALUES (37, 'CUDA', '#F9E79F');
INSERT INTO `t_tag` VALUES (38, 'LightSeq', '#82E0AA');
INSERT INTO `t_tag` VALUES (39, '具体数学', '#FEF9E7');
INSERT INTO `t_tag` VALUES (40, '问答系统', '#E8F8F5');
INSERT INTO `t_tag` VALUES (41, 'cuda', '#F9E79F');
INSERT INTO `t_tag` VALUES (42, 'c++', '#E8F8F5');
INSERT INTO `t_tag` VALUES (43, '爬虫', '#D7BDE2');
INSERT INTO `t_tag` VALUES (44, '词云', '#D5F5E3');
INSERT INTO `t_tag` VALUES (45, '吴恩达', '#D5F5E3');
INSERT INTO `t_tag` VALUES (46, 'latex', '#D5F5E3');
INSERT INTO `t_tag` VALUES (47, 'ppt', '#F8F9F9');
INSERT INTO `t_tag` VALUES (48, '语言模型', '#85C1E9');
INSERT INTO `t_tag` VALUES (49, '生成模型', '#D7BDE2');
INSERT INTO `t_tag` VALUES (50, '量化', '#85C1E9');
INSERT INTO `t_tag` VALUES (51, 'encoder', '#F9E79F');
INSERT INTO `t_tag` VALUES (52, 'eoj', '#F5EEF8');
INSERT INTO `t_tag` VALUES (53, 'C++', '#85C1E9');
INSERT INTO `t_tag` VALUES (54, '秋招', '#A3E4D7');
INSERT INTO `t_tag` VALUES (55, '经验总结', '#FEF9E7');
INSERT INTO `t_tag` VALUES (56, '新年', '#FEF9E7');
INSERT INTO `t_tag` VALUES (57, 'BERT', '#FEF9E7');
INSERT INTO `t_tag` VALUES (58, '训练加速', '#D7BDE2');
INSERT INTO `t_tag` VALUES (59, 'github', '#F5EEF8');
INSERT INTO `t_tag` VALUES (60, 'hexo', '#FFF');
INSERT INTO `t_tag` VALUES (61, '周杰伦', '#F5EEF8');
INSERT INTO `t_tag` VALUES (62, '强化学习', '#FEF9E7');
INSERT INTO `t_tag` VALUES (63, 'PyTorch', '#85C1E9');
INSERT INTO `t_tag` VALUES (64, 'TensorFlow', '#A3E4D7');
INSERT INTO `t_tag` VALUES (65, '毕业', '#FEF9E7');
INSERT INTO `t_tag` VALUES (66, '经验', '#D5F5E3');
INSERT INTO `t_tag` VALUES (67, 'ubuntu', '#F9EBEA');
INSERT INTO `t_tag` VALUES (68, 'python', '#F8C471');
INSERT INTO `t_tag` VALUES (69, '画图', '#F8C471');
INSERT INTO `t_tag` VALUES (70, '发邮件', '#F8C471');
INSERT INTO `t_tag` VALUES (71, '学术', '#D5F5E3');
INSERT INTO `t_tag` VALUES (72, '科研', '#F9E79F');
INSERT INTO `t_tag` VALUES (73, '软件', '#A3E4D7');
INSERT INTO `t_tag` VALUES (74, 'sublime', '#D7BDE2');
INSERT INTO `t_tag` VALUES (75, '编译原理', '#F9E79F');
INSERT INTO `t_tag` VALUES (76, '编译器', '#82E0AA');
INSERT INTO `t_tag` VALUES (77, '火山翻译', '#E8F8F5');
INSERT INTO `t_tag` VALUES (78, '机器翻译', '#F5EEF8');
INSERT INTO `t_tag` VALUES (79, '恋爱观', '#F9EBEA');
INSERT INTO `t_tag` VALUES (80, '人生观', '#F8F9F9');
INSERT INTO `t_tag` VALUES (81, '价值观', '#F8C471');
INSERT INTO `t_tag` VALUES (82, '北京', '#F8F9F9');
INSERT INTO `t_tag` VALUES (83, '旅游', '#F9E79F');
INSERT INTO `t_tag` VALUES (84, '微信', '#F8C471');
INSERT INTO `t_tag` VALUES (85, '朋友圈', '#F5EEF8');

-- ----------------------------
-- Table structure for t_user
-- ----------------------------
DROP TABLE IF EXISTS `t_user`;
CREATE TABLE `t_user`  (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id',
  `phone` varchar(11) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '手机号',
  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '密码',
  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '昵称',
  `avatar` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '头像',
  `gender` int NULL DEFAULT NULL COMMENT '性别：0 保密；1 男；2 女',
  `birthday` date NULL DEFAULT NULL COMMENT '生日',
  `address` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '地址',
  `banner` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT 'banner图',
  `signature` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT '个签',
  `create_time` datetime NULL DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 38 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of t_user
-- ----------------------------
INSERT INTO `t_user` VALUES (1, '13951905171', '4297f44b13955235245b2497399d7a93', 'taoranran', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/upload/147bee1c-559e-46a3-99c2-5fcf4273f3d6.jpg', 2, '2022-04-22', '320000南京市栖霞区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner1.jpg', '彼岸花开，开到荼蘼', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (2, '13951905172', '4297f44b13955235245b2497399d7a93', '开到荼蘼', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/avatar/hand-2.jpg', 0, '2022-03-08', '江苏省无锡市宜兴市', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner2.jpg', '开到荼蘼的空间', '2022-03-23 15:11:02');
INSERT INTO `t_user` VALUES (3, '13951905173', '4297f44b13955235245b2497399d7a93', 'Navicat', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/avatar/hand-7.jpg', 1, '2022-03-24', '江苏省苏州市姑苏区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner3.jpg', 'Navicat的空间', '2022-03-23 17:35:55');
INSERT INTO `t_user` VALUES (4, '13951905174', '4297f44b13955235245b2497399d7a93', 'Tomcat', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/avatar/2.jpg', 2, '2022-03-27', '江苏省无锡市梁溪区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner4.jpg', 'Tomcat的空间', '2022-03-27 00:57:25');
INSERT INTO `t_user` VALUES (5, '13951905175', '4297f44b13955235245b2497399d7a93', 'Nginx', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/avatar/1.jpg', 2, '2022-03-27', '江苏省南京市鼓楼区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner5.jpg', 'Nginx的空间', '2022-03-27 00:58:52');
INSERT INTO `t_user` VALUES (6, '13900001111', '4297f44b13955235245b2497399d7a93', '测试用户', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/avatar/5.jpg', 2, '2022-04-22', '江苏省南京市栖霞区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner6.jpg', '测试用户的空间', '2022-04-22 07:05:24');
INSERT INTO `t_user` VALUES (7, '15962540975', '4297f44b13955235245b2497399d7a93', 'qzk', 'https://pic-go.oss-cn-shanghai.aliyuncs.com/avatars/avatar02.jpg', 1, '2022-04-22', '江苏省苏州市吴江区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner1.jpg', 'qzk的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (8, '13851826167', '4297f44b13955235245b2497399d7a93', 'hlh', 'https://h-l-h.oss-cn-shanghai.aliyuncs.com/pic-go/3327UKB])(ZT0DZGN@EZ6)2.jpg', 1, '2000-03-23', '江苏省南京市六合区', 'https://qianzhikang.github.io/qzk.github.io/medias/banner/6.jpg', '侯理豪的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (9, '18751852533', '4297f44b13955235245b2497399d7a93', 'hmm', 'https://wx-login.oss-cn-shanghai.aliyuncs.com/upload/avatar/avatar4.jpg', 0, '2000-02-16', '江苏省南通市通州区', 'https://wx-login.oss-cn-shanghai.aliyuncs.com/1.jpg', '何明明的空间', '2022-04-22 07:01:13');
INSERT INTO `t_user` VALUES (10, '15505151008', '4297f44b13955235245b2497399d7a93', 'Cdd', 'https://chl-bucket.oss-cn-hangzhou.aliyuncs.com/avatar/head9.jpg', 1, '2022-01-01', '320000南京市栖霞区', 'https://chl-bucket.oss-cn-hangzhou.aliyuncs.com/banner/banner8.jpg', '曹大大的空间', '2022-01-01 00:00:00');
INSERT INTO `t_user` VALUES (11, '13913457284', '4297f44b13955235245b2497399d7a93', 'ycshang', 'https://cdn.jsdelivr.net/gh/ycshang123/image-hosting@master/me.583hffnfvkw0.png', 2, '2022-04-22', '江苏省南京市栖霞区', 'https://cdn.jsdelivr.net/gh/ycshang123/image-hosting@master/me.583hffnfvkw0.png', 'ycshang的空间', '2022-04-22 10:33:13');
INSERT INTO `t_user` VALUES (12, '18018384983', '4297f44b13955235245b2497399d7a93', 'syhan', 'https://syhan.oss-cn-hangzhou.aliyuncs.com/img/me.png', 1, '2022-04-22', '江苏省无锡市滨湖区', 'https://syhan.oss-cn-hangzhou.aliyuncs.com/img/banner18.jpg', '涵的空间', '2022-04-22 10:31:13');
INSERT INTO `t_user` VALUES (13, '17314433312', '4297f44b13955235245b2497399d7a93', 'wangdong', 'https://riddler.oss-cn-shanghai.aliyuncs.com/upload/riddler', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://riddler.oss-cn-shanghai.aliyuncs.com/GoTham/GoTham9.jpeg', '我的精神家园', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (14, '18452555712', '4297f44b13955235245b2497399d7a93', 'YG.', 'https://soft2176-yj.oss-cn-hangzhou.aliyuncs.com/img/avatar.jpg', 1, '1997-12-29', '江苏省南京市栖霞区', 'https://soft2176-yj.oss-cn-hangzhou.aliyuncs.com/image/212.jpg', '一蓑烟雨任平生', '2022-04-22 10:34:13');
INSERT INTO `t_user` VALUES (15, '1470918223', '4297f44b13955235245b2497399d7a93', 'Wangrich', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204071504617.png', 0, '2022-04-22', '江苏省南京市栖霞区', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204221034350.png', '王瑞奇的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (16, '17606186124', '4297f44b13955235245b2497399d7a93', 'PatrickStarM', 'https://patrick-file.oss-cn-shanghai.aliyuncs.com/img/me.jpg', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://patrick-file.oss-cn-shanghai.aliyuncs.com/img/banner.png', '派大星的空间', '2022-04-22 10:10:10');
INSERT INTO `t_user` VALUES (17, '15162310144', '4295027270a60d246da869a9559d73d8', 'zzmax', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/avatar/cherry.jpg', 1, '2000-06-25', '江苏省南京市栖霞区', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/banner/banner.jpg', 'ZZMAX的空间', '2022-04-22 10:35:13');
INSERT INTO `t_user` VALUES (18, '18012275669', '4297f44b13955235245b2497399d7a93', 'EthanJiao', 'https://soft2176-use.oss-cn-hangzhou.aliyuncs.com/%E5%A4%B4%E5%83%8F/head-u-1.jpg', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://soft2176-use.oss-cn-hangzhou.aliyuncs.com/banner/banner43.jpg', 'EthanJiao的空间', '2022-04-22 10:01:13');
INSERT INTO `t_user` VALUES (19, '17721663859', '4297f44b13955235245b2497399d7a93', 'xzp', 'https://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/preview.jpg', 1, '2022-01-01', '320000南京市栖霞区', 'https://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/bg1.jpg\'\nhttps://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/bg1.jpg', '肖展鹏', '2022-01-01 00:00:00');
INSERT INTO `t_user` VALUES (20, '19952847321', '4297f44b13955235245b2497399d7a93', 'zqcdl', 'https://zqcdl-pic.oss-cn-hangzhou.aliyuncs.com/avatar/me.jpg', 0, '2022-04-22', '江苏省南京市栖霞区', 'https://zqcdl-pic.oss-cn-hangzhou.aliyuncs.com/banner/banner0.jpg', 'zqcdl的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (21, '18851699003', '4297f44b13955235245b2497399d7a93', 'crq', 'https://cdn.jsdelivr.net/gh/1802343228/image@main/avatar.3sylmzwhoqi0.png', 0, '2022-04-22', '江苏省南京市栖霞区', 'https://cdn.jsdelivr.net/gh/poicc/image@main/bgh.at8sse7wbww.webp', 'poicc的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (22, '18705252336', '4297f44b13955235245b2497399d7a93', '失重外太空', 'http://47.96.31.161:9000/my-file/dxd.jpg', 0, '2022-04-22', '江苏省南京市栖霞区', 'https://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/bg5.jpg', '失重外太空的空间', '2022-04-22 10:44:13');
INSERT INTO `t_user` VALUES (23, '13912879003', '93b008b7928b6fd873a35a94a792bddb', 'yyzhou', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/avatar/zyy%20avatar.jpg', 1, '2000-09-19', '江苏省南京市栖霞区', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/banner/zyy%20banner.jpg', 'yyzhou的空间', '2022-04-22 10:41:13');
INSERT INTO `t_user` VALUES (24, '19908324671', '4297f44b13955235245b2497399d7a93', 'radical', 'https://ossstored.oss-cn-shanghai.aliyuncs.com/upload/37cb66fe-d6df-4c96-a855-0756f9ee4a47.jpg', 1, '2022-04-23', '浙江省温州市瓯海区', 'https://ossstored.oss-cn-shanghai.aliyuncs.com/banner/banner17.jpg', 'Radical的私人空间', '2022-04-21 23:01:15');
INSERT INTO `t_user` VALUES (25, '13913587231', 'e10adc3949ba59abbe56e057f20f883e', 'Dddddeng', 'https://dengabc.oss-cn-shanghai.aliyuncs.com/122/%E7%8B%97%E5%A4%B4.png', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://dengabc.oss-cn-shanghai.aliyuncs.com/122/banner.png', 'DDDeng的空间', '2022-04-22 10:01:13');
INSERT INTO `t_user` VALUES (26, '17551862530', '4297f44b13955235245b2497399d7a93', 'LBH', 'https://public-cdn-oss.mosoteach.cn/avatar/2022/02/79a48ef62d82c4af9f3866bc2c96953d.png?v=1645272341&x-oss-process=style/s200x200', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://niit-soft.oss-cn-hangzhou.aliyuncs.com/banner/banner3.jpg', 'LBH的个人空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (27, '15005172973', '4297f44b13955235245b2497399d7a93', 'bear', 'https://cdn.jsdelivr.net/gh/casdxz/image@master/head/03.webp', 1, '1997-07-17', '江苏省宿迁市泗阳县', 'https://cdn.jsdelivr.net/gh/casdxz/image@master/head/banner21.webp', '熊殿下的空间', '2022-04-22 10:10:10');
INSERT INTO `t_user` VALUES (28, '18066067763', '4297f44b13955235245b2497399d7a93', 'wl', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204221044970.jpg', 1, '2022-04-22', '江苏省南京市高淳区', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204221044969.jpg', '王磊的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (29, '15651789618', '4297f44b13955235245b2497399d7a93', 'gjy', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204221044971.jpg', 1, '2022-04-22', '江苏省南京市江宁区', 'https://wang-rich.oss-cn-hangzhou.aliyuncs.com/md/202204221044972.jpg', '龚俊溢的空间', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (30, '17551720143', '  0ed703911ed93a6c6a7162fb515794c3', 'CHM', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/avatar/chm%20avatar.jpg', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/banner/chm%20banner.png', 'CHM的空间', '2022-04-22 10:01:13');
INSERT INTO `t_user` VALUES (31, '18680112248', '4297f44b13955235245b2497399d7a93', 'zhou', 'https://pic-md-test.oss-cn-hangzhou.aliyuncs.com/img/me.jpg', 0, '2022-04-22', '江苏省连云港市赣榆区', 'https://pic-md-test.oss-cn-hangzhou.aliyuncs.com/img/banner4.jpg', '听的页面', '2022-03-26 23:01:13');
INSERT INTO `t_user` VALUES (32, '15051862218', 'e10adc3949ba59abbe56e057f20f883e', 'Radical', 'https://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/lQDPDhtax0x2cv7NA-jNBdyw3MI6vV61OkcCZWebC0BoAA_1500_1000.jpg_720x720q90g.jpg', 0, '2022-04-22', '江苏省南京市栖霞区', 'https://xzpsjc11.oss-cn-hangzhou.aliyuncs.com/upload/bg6.jpg', 'syk的私人空间', '2022-04-21 23:01:15');
INSERT INTO `t_user` VALUES (33, '18324812031', '4297f44b13955235245b2497399d7a93', '宏涛', 'https://pixiuosses.oss-cn-shanghai.aliyuncs.com/%E5%9B%BE%E4%B8%80.jpg', 1, '1999-10-14', '江苏省南京市栖霞区', 'https://pixiuosses.oss-cn-shanghai.aliyuncs.com/%E5%A4%B4%E5%83%8F.jpg', '宏涛的空间', '2022-04-22 10:10:10');
INSERT INTO `t_user` VALUES (34, '18752007020', '256fce810a13fb0dcdd0470bec1b0828', 'swj', 'https://pic-swj.oss-cn-shanghai.aliyuncs.com/pic/1.jpg', 1, '2000-06-25', '江苏省南京市栖霞区', '\nhttps://pic-swj.oss-cn-shanghai.aliyuncs.com/pic/2.jpg', 'swj的空间', '2022-04-22 10:35:13');
INSERT INTO `t_user` VALUES (35, '17551720143', '  0ed703911ed93a6c6a7162fb515794c3', 'CHM', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/avatar/chm%20avatar.jpg', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://oss-zzmax-01.oss-cn-shanghai.aliyuncs.com/img/banner/chm%20banner.png', 'CHM的空间', '2022-04-22 10:01:13');
INSERT INTO `t_user` VALUES (36, '15358549901', '4297f44b13955235245b2497399d7a93', 'STF', 'https://ol.3dmgame.com/uploads/images/gamepc/20210528/1622166652_567074.jpg', 1, '2000-04-18', '江苏省南京市栖霞区', 'https://picb.zhimg.com/v2-3a1b7caf2cc4622e2a71b980bed72938_r.jpg', 'STF的空间', '2022-04-22 10:10:10');
INSERT INTO `t_user` VALUES (37, '18452555713', '4297f44b13955235245b2497399d7a93', 'YY', 'https://soft2176-yj.oss-cn-hangzhou.aliyuncs.com/image/yy.jpg', 1, '2022-04-22', '江苏省南京市栖霞区', 'https://soft2176-yj.oss-cn-hangzhou.aliyuncs.com/image/222.jpg', 'yy\n  的个人空间', '2022-04-21 10:34:13');
INSERT INTO `t_user` VALUES (38, '13198570806', '15d57e63a4ec3675a4b3bee4334658ca', 'JYH', 'https://jyhload.oss-cn-shanghai.aliyuncs.com/img/71b5ad29-42b7-405f-a54b-23bbc197bf97.file-1648296526873', 1, '2000-08-06', '江苏省南京市栖霞区', 'https://images8.alphacoders.com/108/thumbbig-1082257.webp', 'JYH的空间', '2022-04-22 10:10:10');

SET FOREIGN_KEY_CHECKS = 1;
